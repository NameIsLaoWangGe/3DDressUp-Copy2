{
  "code": "export var Lwg;\r\n(function (Lwg) {\r\n    let PlatformAdmin;\r\n    (function (PlatformAdmin) {\r\n        PlatformAdmin._Tpye = {\r\n            Bytedance: 'Bytedance',\r\n            WeChat: 'WeChat',\r\n            OPPO: 'OPPO',\r\n            OPPOTest: 'OPPOTest',\r\n            VIVO: 'VIVO',\r\n            General: 'General',\r\n            Web: 'Web',\r\n            WebTest: 'WebTest',\r\n            Research: 'Research',\r\n        };\r\n        PlatformAdmin._Ues = {\r\n            get value() {\r\n                return this['_platform/name'] ? this['_platform/name'] : null;\r\n            },\r\n            set value(val) {\r\n                this['_platform/name'] = val;\r\n                switch (val) {\r\n                    case PlatformAdmin._Tpye.WebTest:\r\n                        Laya.LocalStorage.clear();\r\n                        GoldAdmin._num.value = 5000;\r\n                        break;\r\n                    case PlatformAdmin._Tpye.Research:\r\n                        GoldAdmin._num.value = 50000000000000;\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n    })(PlatformAdmin = Lwg.PlatformAdmin || (Lwg.PlatformAdmin = {}));\r\n    let GameAdmin;\r\n    (function (GameAdmin) {\r\n        GameAdmin._switch = true;\r\n        GameAdmin.pause = {\r\n            get value() {\r\n                return GameAdmin._switch;\r\n            },\r\n            set value(bool) {\r\n                if (bool) {\r\n                    GameAdmin._switch = false;\r\n                    TimerAdmin._switch = false;\r\n                    LwgClick._switch = true;\r\n                }\r\n                else {\r\n                    GameAdmin._switch = true;\r\n                    TimerAdmin._switch = true;\r\n                    LwgClick._switch = false;\r\n                }\r\n            }\r\n        };\r\n        GameAdmin.level = {\r\n            get value() {\r\n                return Laya.LocalStorage.getItem('_Game/Level') ? Number(Laya.LocalStorage.getItem('_Game/Level')) : 1;\r\n            },\r\n            set value(val) {\r\n                let diff = val - this.level;\r\n                if (diff > 0) {\r\n                    this.maxLevel += diff;\r\n                }\r\n                if (val > this.loopLevel && this.loopLevel != -1) {\r\n                    Laya.LocalStorage.setItem('_Game/Level', (1).toString());\r\n                }\r\n                else {\r\n                    Laya.LocalStorage.setItem('_Game/Level', (val).toString());\r\n                }\r\n            }\r\n        };\r\n        GameAdmin.maxLevel = {\r\n            get value() {\r\n                return Laya.LocalStorage.getItem('_Game/maxLevel') ? Number(Laya.LocalStorage.getItem('_Game/maxLevel')) : this.level;\r\n            },\r\n            set value(val) {\r\n                Laya.LocalStorage.setItem('_Game/maxLevel', val.toString());\r\n            }\r\n        };\r\n        GameAdmin.loopLevel = {\r\n            get value() {\r\n                return this['_Game/loopLevel'] ? this['_Game/loopLevel'] : -1;\r\n            },\r\n            set value(val) {\r\n                this['_Game/loopLevel'] = val;\r\n            }\r\n        };\r\n        function _createLevel(parent, x, y) {\r\n            let sp;\r\n            Laya.loader.load('prefab/LevelNode.json', Laya.Handler.create(this, function (prefab) {\r\n                const _prefab = new Laya.Prefab();\r\n                _prefab.json = prefab;\r\n                sp = Laya.Pool.getItemByCreateFun('prefab', _prefab.create, _prefab);\r\n                parent.addChild(sp);\r\n                sp.pos(x, y);\r\n                sp.zOrder = 0;\r\n                const level = sp.getChildByName('level');\r\n                this.LevelNode = sp;\r\n            }));\r\n        }\r\n        GameAdmin._createLevel = _createLevel;\r\n        ;\r\n    })(GameAdmin = Lwg.GameAdmin || (Lwg.GameAdmin = {}));\r\n    let SceneAdmin;\r\n    (function (SceneAdmin) {\r\n        SceneAdmin._SceneControl = {};\r\n        SceneAdmin._SceneScript = {};\r\n        let _BaseName;\r\n        (function (_BaseName) {\r\n            _BaseName[\"PreLoad\"] = \"PreLoad\";\r\n            _BaseName[\"PreLoadCutIn\"] = \"PreLoadCutIn\";\r\n            _BaseName[\"Guide\"] = \"Guide\";\r\n            _BaseName[\"Start\"] = \"Start\";\r\n            _BaseName[\"Shop\"] = \"Shop\";\r\n            _BaseName[\"Task\"] = \"Task\";\r\n            _BaseName[\"Set\"] = \"Set\";\r\n            _BaseName[\"Victory\"] = \"Victory\";\r\n            _BaseName[\"Defeated\"] = \"Defeated\";\r\n            _BaseName[\"CheckIn\"] = \"CheckIn\";\r\n            _BaseName[\"LwgInit\"] = \"LwgInit\";\r\n            _BaseName[\"SelectLevel\"] = \"SelectLevel\";\r\n            _BaseName[\"Settle\"] = \"Settle\";\r\n        })(_BaseName = SceneAdmin._BaseName || (SceneAdmin._BaseName = {}));\r\n        SceneAdmin._PreLoadCutIn = {\r\n            openName: null,\r\n            closeName: null,\r\n            func: null,\r\n            zOrder: null,\r\n        };\r\n        function _preLoadOpenScene(openName, closeName, func, zOrder) {\r\n            _openScene(_BaseName.PreLoadCutIn, closeName, func);\r\n            SceneAdmin._PreLoadCutIn.openName = openName;\r\n            SceneAdmin._PreLoadCutIn.closeName = closeName;\r\n            SceneAdmin._PreLoadCutIn.func = func;\r\n            SceneAdmin._PreLoadCutIn.zOrder = zOrder;\r\n        }\r\n        SceneAdmin._preLoadOpenScene = _preLoadOpenScene;\r\n        class _SceneServe {\r\n            static _openZOderUp() {\r\n                if (SceneAniAdmin._closeSwitch.value) {\r\n                    let num = 0;\r\n                    for (const key in SceneAdmin._SceneControl) {\r\n                        if (Object.prototype.hasOwnProperty.call(SceneAdmin._SceneControl, key)) {\r\n                            const Scene = SceneAdmin._SceneControl[key];\r\n                            if (Scene.parent) {\r\n                                Scene.zOrder = 0;\r\n                                num++;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (this._openScene) {\r\n                        this._openScene.zOrder = num;\r\n                        for (let index = 0; index < this._closeSceneArr.length; index++) {\r\n                            const element = this._closeSceneArr[index];\r\n                            if (element) {\r\n                                element.zOrder = --num;\r\n                            }\r\n                            else {\r\n                                this._closeSceneArr.splice(index, 1);\r\n                                index--;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            ;\r\n            static _closeZOderUP(CloseScene) {\r\n                if (SceneAniAdmin._closeSwitch.value) {\r\n                    let num = 0;\r\n                    for (const key in SceneAdmin._SceneControl) {\r\n                        if (Object.prototype.hasOwnProperty.call(SceneAdmin._SceneControl, key)) {\r\n                            const Scene = SceneAdmin._SceneControl[key];\r\n                            if (Scene.parent) {\r\n                                num++;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (CloseScene) {\r\n                        CloseScene.zOrder = num;\r\n                        if (this._openScene) {\r\n                            this._openScene.zOrder = --num;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            ;\r\n            static _open() {\r\n                if (this._openScene) {\r\n                    if (this._openZOder) {\r\n                        Laya.stage.addChildAt(this._openScene, this._openZOder);\r\n                    }\r\n                    else {\r\n                        Laya.stage.addChild(this._openScene);\r\n                    }\r\n                    if (SceneAdmin._SceneScript[this._openScene.name]) {\r\n                        if (!this._openScene.getComponent(SceneAdmin._SceneScript[this._openScene.name])) {\r\n                            this._openScene.addComponent(SceneAdmin._SceneScript[this._openScene.name]);\r\n                        }\r\n                    }\r\n                    else {\r\n                        console.log(`${this._openScene.name}场景没有同名脚本！,需在LwgInit脚本中导入该脚本！`);\r\n                    }\r\n                    this._openZOderUp();\r\n                    this._openFunc();\r\n                }\r\n            }\r\n            ;\r\n            static _close() {\r\n                if (this._closeSceneArr.length > 0) {\r\n                    for (let index = 0; index < this._closeSceneArr.length; index++) {\r\n                        let scene = this._closeSceneArr[index];\r\n                        if (scene) {\r\n                            _closeScene(scene.name);\r\n                            this._closeSceneArr.splice(index, 1);\r\n                            index--;\r\n                        }\r\n                    }\r\n                }\r\n                this._remake();\r\n            }\r\n            static _remake() {\r\n                this._openScene = null;\r\n                this._openZOder = 1;\r\n                this._openFunc = null;\r\n                this._closeZOder = 0;\r\n            }\r\n        }\r\n        _SceneServe._openScene = null;\r\n        _SceneServe._openZOder = 1;\r\n        _SceneServe._openFunc = null;\r\n        _SceneServe._closeSceneArr = [];\r\n        _SceneServe._closeZOder = 0;\r\n        _SceneServe._sceneNum = 1;\r\n        SceneAdmin._SceneServe = _SceneServe;\r\n        function _openScene(openName, closeName, func, zOrder) {\r\n            LwgClick._switch = false;\r\n            Laya.Scene.load('Scene/' + openName + '.json', Laya.Handler.create(this, function (scene) {\r\n                const openScene = ToolsAdmin._Node.checkChildren(Laya.stage, openName);\r\n                if (openScene) {\r\n                    openScene.close();\r\n                    console.log(`场景${openName}重复出现！前面的场景将会被关闭！`);\r\n                }\r\n                _SceneServe._openScene = SceneAdmin._SceneControl[scene.name = openName] = scene;\r\n                if (closeName && SceneAdmin._SceneControl[closeName]) {\r\n                    _SceneServe._closeSceneArr.push(SceneAdmin._SceneControl[closeName]);\r\n                    _SceneServe._closeZOder = SceneAdmin._SceneControl[closeName].zOrder;\r\n                }\r\n                _SceneServe._openZOder = zOrder ? zOrder : null;\r\n                _SceneServe._openFunc = func ? func : () => { };\r\n                _SceneServe._open();\r\n            }));\r\n        }\r\n        SceneAdmin._openScene = _openScene;\r\n        function _closeScene(closeName, func) {\r\n            if (!SceneAdmin._SceneControl[closeName]) {\r\n                console.log(`场景${closeName}关闭失败，可能不存在！`);\r\n                return;\r\n            }\r\n            var closef = () => {\r\n                func && func();\r\n                LwgClick._switch = true;\r\n                SceneAdmin._SceneControl[closeName].close();\r\n            };\r\n            if (!SceneAniAdmin._closeSwitch.value) {\r\n                closef();\r\n                return;\r\n            }\r\n            _SceneServe._closeZOderUP(LwgScene._SceneControl[closeName]);\r\n            const script = SceneAdmin._SceneControl[closeName][SceneAdmin._SceneControl[closeName].name];\r\n            if (script) {\r\n                if (script) {\r\n                    LwgClick._switch = false;\r\n                    let time0 = script.lwgCloseAni();\r\n                    if (time0 !== null) {\r\n                        SceneAniAdmin._closeAniDelay = time0;\r\n                        script.lwgBeforeCloseAni();\r\n                        Laya.timer.once(time0, this, () => {\r\n                            closef();\r\n                            LwgClick._switch = true;\r\n                        });\r\n                    }\r\n                    else {\r\n                        const delay = SceneAniAdmin._commonCloseAni(SceneAdmin._SceneControl[closeName]);\r\n                        Laya.timer.once(delay, this, () => {\r\n                            script.lwgBeforeCloseAni();\r\n                            closef();\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        SceneAdmin._closeScene = _closeScene;\r\n        class _ScriptBase extends Laya.Script {\r\n            constructor() {\r\n                super(...arguments);\r\n                this.ownerSceneName = '';\r\n            }\r\n            getFind(name, type) {\r\n                if (!this[`_Scene${type}${name}`]) {\r\n                    let Node = ToolsAdmin._Node.findChild2D(this.owner.scene, name);\r\n                    if (Node) {\r\n                        return this[`_Scene${type}${name}`] = Node;\r\n                    }\r\n                    else {\r\n                        console.log(`场景内不存在节点${name}`);\r\n                    }\r\n                }\r\n                else {\r\n                    return this[`_Scene${type}${name}`];\r\n                }\r\n            }\r\n            _FindImg(name) {\r\n                return this.getFind(name, '_FindImg');\r\n            }\r\n            _FindSp(name) {\r\n                return this.getFind(name, '_FindSp');\r\n            }\r\n            _FindBox(name) {\r\n                return this.getFind(name, '_FindBox');\r\n            }\r\n            _FindTap(name) {\r\n                return this.getFind(name, '_FindTap');\r\n            }\r\n            _FindLabel(name) {\r\n                return this.getFind(name, '_FindLabel');\r\n            }\r\n            _FindList(name) {\r\n                return this.getFind(name, '_FindList');\r\n            }\r\n            _storeNum(name, _func, initial) {\r\n                return StorageAdmin._num(`${this.owner.name}/${name}`, _func, initial);\r\n            }\r\n            _storeStr(name, _func, initial) {\r\n                return StorageAdmin._str(`${this.owner.name}/${name}`, _func, initial);\r\n            }\r\n            _storeBool(name, _func, initial) {\r\n                return StorageAdmin._bool(`${this.owner.name}/${name}`, _func, initial);\r\n            }\r\n            _storeArray(name, _func, initial) {\r\n                return StorageAdmin._array(`${this.owner.name}/${name}`, _func, initial);\r\n            }\r\n            lwgOnAwake() { }\r\n            ;\r\n            lwgAdaptive() { }\r\n            ;\r\n            lwgEvent() { }\r\n            ;\r\n            _evReg(name, func) {\r\n                EventAdmin._register(name, this, func);\r\n            }\r\n            _evRegOne(name, func) {\r\n                EventAdmin._registerOnce(name, this, func);\r\n            }\r\n            _evNotify(name, args) {\r\n                EventAdmin._notify(name, args);\r\n            }\r\n            lwgOnEnable() { }\r\n            lwgOnStart() { }\r\n            lwgButton() { }\r\n            ;\r\n            _btnDown(target, down, effect) {\r\n                LwgClick._on(effect == undefined ? LwgClick._Use.value : effect, target, this, (e) => {\r\n                    var func = () => {\r\n                        ClickAdmin._absoluteSwitch && LwgClick._switch && down && down(e);\r\n                    };\r\n                    if (ClickAdmin._assign.length > 0) {\r\n                        ClickAdmin._checkAssign(target.name) && func();\r\n                    }\r\n                    else {\r\n                        func();\r\n                    }\r\n                }, null, null, null);\r\n            }\r\n            _btnMove(target, move, effect) {\r\n                LwgClick._on(effect == undefined ? LwgClick._Use.value : effect, target, this, null, (e) => {\r\n                    var func = () => {\r\n                        ClickAdmin._absoluteSwitch && LwgClick._switch && move && move(e);\r\n                    };\r\n                    if (ClickAdmin._assign.length > 0) {\r\n                        ClickAdmin._checkAssign(target.name) && func();\r\n                    }\r\n                    else {\r\n                        func();\r\n                    }\r\n                }, null, null);\r\n            }\r\n            _btnUp(target, up, effect) {\r\n                LwgClick._on(effect == undefined ? LwgClick._Use.value : effect, target, this, null, null, (e) => {\r\n                    var func = () => {\r\n                        ClickAdmin._absoluteSwitch && LwgClick._switch && up && up(e);\r\n                    };\r\n                    if (ClickAdmin._assign.length > 0) {\r\n                        ClickAdmin._checkAssign(target.name) && func();\r\n                    }\r\n                    else {\r\n                        func();\r\n                    }\r\n                }, null);\r\n            }\r\n            _btnOut(target, out, effect) {\r\n                LwgClick._on(effect == undefined ? LwgClick._Use.value : effect, target, this, null, null, null, (e) => {\r\n                    var func = () => {\r\n                        ClickAdmin._absoluteSwitch && LwgClick._switch && out && out(e);\r\n                    };\r\n                    if (ClickAdmin._assign.length > 0) {\r\n                        ClickAdmin._checkAssign(target.name) && func();\r\n                    }\r\n                    else {\r\n                        func();\r\n                    }\r\n                });\r\n            }\r\n            _btnFour(target, down, move, up, out, effect) {\r\n                LwgClick._on(effect == null ? effect : LwgClick._Use.value, target, this, (e) => {\r\n                    var func = () => {\r\n                        ClickAdmin._absoluteSwitch && LwgClick._switch && down && down(e);\r\n                    };\r\n                    if (ClickAdmin._assign.length > 0) {\r\n                        ClickAdmin._checkAssign(target.name) && func();\r\n                    }\r\n                    else {\r\n                        func();\r\n                    }\r\n                }, (e) => {\r\n                    var func = () => {\r\n                        ClickAdmin._absoluteSwitch && LwgClick._switch && move && move(e);\r\n                    };\r\n                    if (ClickAdmin._assign.length > 0) {\r\n                        ClickAdmin._checkAssign(target.name) && func();\r\n                    }\r\n                    else {\r\n                        func();\r\n                    }\r\n                }, (e) => {\r\n                    var func = () => {\r\n                        ClickAdmin._absoluteSwitch && LwgClick._switch && up && up(e);\r\n                    };\r\n                    if (ClickAdmin._assign.length > 0) {\r\n                        ClickAdmin._checkAssign(target.name) && func();\r\n                    }\r\n                    else {\r\n                        func();\r\n                    }\r\n                }, (e) => {\r\n                    var func = () => {\r\n                        ClickAdmin._absoluteSwitch && LwgClick._switch && out && out(e);\r\n                    };\r\n                    if (ClickAdmin._assign.length > 0) {\r\n                        ClickAdmin._checkAssign(target.name) && func();\r\n                    }\r\n                    else {\r\n                        func();\r\n                    }\r\n                });\r\n            }\r\n            _openScene(openName, closeSelf, preLoadCutIn, func, zOrder) {\r\n                let closeName;\r\n                if (closeSelf == undefined || closeSelf == true) {\r\n                    closeName = this.ownerSceneName;\r\n                }\r\n                if (!preLoadCutIn) {\r\n                    LwgScene._openScene(openName, closeName, func, zOrder);\r\n                }\r\n                else {\r\n                    LwgScene._preLoadOpenScene(openName, closeName, func, zOrder);\r\n                }\r\n            }\r\n            _closeScene(sceneName, func) {\r\n                LwgScene._closeScene(sceneName ? sceneName : this.ownerSceneName, func);\r\n            }\r\n            lwgOnUpdate() { }\r\n            ;\r\n            lwgOnDisable() { }\r\n            ;\r\n            onStageMouseDown(e) { ClickAdmin._assign.length === 0 && LwgClick._switch && this.lwgOnStageDown(e); }\r\n            ;\r\n            onStageMouseMove(e) { ClickAdmin._assign.length === 0 && LwgClick._switch && this.lwgOnStageMove(e); }\r\n            ;\r\n            onStageMouseUp(e) { ClickAdmin._assign.length === 0 && LwgClick._switch && this.lwgOnStageUp(e); }\r\n            ;\r\n            lwgOnStageDown(e) { }\r\n            ;\r\n            lwgOnStageMove(e) { }\r\n            ;\r\n            lwgOnStageUp(e) { }\r\n            ;\r\n        }\r\n        SceneAdmin._ScriptBase = _ScriptBase;\r\n        class _SceneBase extends _ScriptBase {\r\n            constructor() {\r\n                super();\r\n            }\r\n            get _Owner() {\r\n                return this.owner;\r\n            }\r\n            getVar(name, type) {\r\n                if (!this[`_Scene${type}${name}`]) {\r\n                    if (this._Owner[name]) {\r\n                        _LwgNode._addProperty(this._Owner[name]);\r\n                        return this[`_Scene${type}${name}`] = this._Owner[name];\r\n                    }\r\n                    else {\r\n                        console.log('场景内不存在var节点：', name);\r\n                        return undefined;\r\n                    }\r\n                }\r\n                else {\r\n                    return this[`_Scene${type}${name}`];\r\n                }\r\n            }\r\n            _SpriteVar(name) {\r\n                return this.getVar(name, '_SpriteVar');\r\n            }\r\n            _AniVar(name) {\r\n                return this.getVar(name, '_AniVar');\r\n            }\r\n            _BtnVar(name) {\r\n                return this.getVar(name, '_BtnVar');\r\n            }\r\n            _BoxVar(name) {\r\n                return this.getVar(name, '_BoxVar');\r\n            }\r\n            _ImgVar(name) {\r\n                return this.getVar(name, '_ImgVar');\r\n            }\r\n            _LabelVar(name) {\r\n                return this.getVar(name, '_LabelVar');\r\n            }\r\n            _ListVar(name) {\r\n                return this.getVar(name, '_ListVar');\r\n            }\r\n            _TapVar(name) {\r\n                return this.getVar(name, '_TapVar');\r\n            }\r\n            _TextVar(name) {\r\n                return this.getVar(name, '_TextVar');\r\n            }\r\n            _TextInputVar(name) {\r\n                return this.getVar(name, '_TextInputVar');\r\n            }\r\n            _FontClipVar(name) {\r\n                return this.getVar(name, '_FontClipVar');\r\n            }\r\n            _FontBox(name) {\r\n                return this.getVar(name, '_FontBox');\r\n            }\r\n            _FontTextInput(name) {\r\n                return this.getVar(name, '_FontInput');\r\n            }\r\n            onAwake() {\r\n                this._Owner.width = Laya.stage.width;\r\n                this._Owner.height = Laya.stage.height;\r\n                if (this._Owner.getChildByName('Background')) {\r\n                    this._Owner.getChildByName('Background')['width'] = Laya.stage.width;\r\n                    this._Owner.getChildByName('Background')['height'] = Laya.stage.height;\r\n                }\r\n                if (!this._Owner.name) {\r\n                    console.log('场景名称失效，脚本赋值失败');\r\n                }\r\n                else {\r\n                    this.ownerSceneName = this._Owner.name;\r\n                    this._Owner[this._Owner.name] = this;\r\n                }\r\n                this.moduleOnAwake();\r\n                this.lwgOnAwake();\r\n                this.lwgAdaptive();\r\n            }\r\n            moduleOnAwake() { }\r\n            onEnable() {\r\n                this.moduleEvent();\r\n                this.lwgEvent();\r\n                this.moduleOnEnable();\r\n                this.lwgOnEnable();\r\n            }\r\n            moduleOnEnable() { }\r\n            ;\r\n            moduleEvent() { }\r\n            ;\r\n            onStart() {\r\n                this.moduleOnStart();\r\n                this.lwgOnStart();\r\n                this.btnAndOpenAni();\r\n            }\r\n            moduleOnStart() { }\r\n            btnAndOpenAni() {\r\n                let time = this.lwgOpenAni();\r\n                if (time !== null) {\r\n                    Laya.timer.once(time, this, () => {\r\n                        LwgClick._switch = true;\r\n                        this.lwgOpenAniAfter();\r\n                        this.lwgButton();\r\n                        _SceneServe._close();\r\n                    });\r\n                }\r\n                else {\r\n                    SceneAniAdmin._commonOpenAni(this._Owner);\r\n                }\r\n            }\r\n            lwgOpenAni() { return null; }\r\n            ;\r\n            lwgOpenAniAfter() { }\r\n            ;\r\n            _adaHeight(arr) {\r\n                LwgAdaptive._stageHeight(arr);\r\n            }\r\n            ;\r\n            _adaWidth(arr) {\r\n                LwgAdaptive._stageWidth(arr);\r\n            }\r\n            ;\r\n            _adaptiveCenter(arr) {\r\n                LwgAdaptive._center(arr, Laya.stage);\r\n            }\r\n            ;\r\n            onUpdate() { this.lwgOnUpdate(); }\r\n            ;\r\n            lwgBeforeCloseAni() { }\r\n            lwgCloseAni() { return null; }\r\n            ;\r\n            onDisable() {\r\n                Laya.Tween.clearAll(this);\r\n                Laya.Tween.clearAll(this._Owner);\r\n                Laya.timer.clearAll(this);\r\n                Laya.timer.clearAll(this._Owner);\r\n                EventAdmin._offCaller(this);\r\n                EventAdmin._offCaller(this._Owner);\r\n                this.lwgOnDisable();\r\n            }\r\n        }\r\n        SceneAdmin._SceneBase = _SceneBase;\r\n        class _ObjectBase extends _ScriptBase {\r\n            constructor() {\r\n                super();\r\n            }\r\n            _ownerDestroy() {\r\n                this._Owner.destroy();\r\n                this.clear();\r\n            }\r\n            get _Owner() {\r\n                return this.owner;\r\n            }\r\n            get _point() {\r\n                return new Laya.Point(this._Owner.x, this._Owner.y);\r\n            }\r\n            get _Scene() {\r\n                return this.owner.scene;\r\n            }\r\n            get _Parent() {\r\n                if (this._Owner.parent) {\r\n                    return this.owner.parent;\r\n                }\r\n            }\r\n            get _gPoint() {\r\n                return this._Parent.localToGlobal(new Laya.Point(this._Owner.x, this._Owner.y));\r\n            }\r\n            get _RigidBody() {\r\n                if (!this._Owner['_OwnerRigidBody']) {\r\n                    this._Owner['_OwnerRigidBody'] = this._Owner.getComponent(Laya.RigidBody);\r\n                }\r\n                return this._Owner['_OwnerRigidBody'];\r\n            }\r\n            get _BoxCollier() {\r\n                if (!this._Owner['_OwnerBoxCollier']) {\r\n                    this._Owner['_OwnerBoxCollier'] = this._Owner.getComponent(Laya.BoxCollider);\r\n                }\r\n                return this._Owner['_OwnerBoxCollier'];\r\n            }\r\n            get _CilrcleCollier() {\r\n                if (!this._Owner['_OwnerCilrcleCollier']) {\r\n                    return this._Owner['_OwnerCilrcleCollier'] = this._Owner.getComponent(Laya.BoxCollider);\r\n                }\r\n                return this._Owner['_OwnerCilrcleCollier'];\r\n            }\r\n            get _PolygonCollier() {\r\n                if (!this._Owner['_OwnerPolygonCollier']) {\r\n                    return this._Owner['_OwnerPolygonCollier'] = this._Owner.getComponent(Laya.BoxCollider);\r\n                }\r\n                return this._Owner['_OwnerPolygonCollier'];\r\n            }\r\n            getSceneVar(name, type) {\r\n                if (!this[`_Scene${type}${name}`]) {\r\n                    if (this._Scene[name]) {\r\n                        _LwgNode._addProperty(this._Scene[name]);\r\n                        return this[`_Scene${type}${name}`] = this._Scene[name];\r\n                    }\r\n                    else {\r\n                        console.log(`场景内不存在var节点${name}`);\r\n                    }\r\n                }\r\n                else {\r\n                    return this[`_Scene${type}${name}`];\r\n                }\r\n            }\r\n            _SceneSprite(name) {\r\n                return this.getSceneVar(name, '_SceneSprite');\r\n            }\r\n            _SceneAni(name) {\r\n                return this.getSceneVar(name, '_SceneAni');\r\n            }\r\n            _SceneImg(name) {\r\n                return this.getSceneVar(name, '_SceneImg');\r\n            }\r\n            _SceneLabel(name) {\r\n                return this.getSceneVar(name, '_SceneLabel');\r\n            }\r\n            _SceneList(name) {\r\n                return this.getSceneVar(name, '_SceneList');\r\n            }\r\n            _SceneTap(name) {\r\n                return this.getSceneVar(name, '_SceneTap');\r\n            }\r\n            _SceneText(name) {\r\n                return this.getSceneVar(name, '_SceneText');\r\n            }\r\n            _SceneFontClip(name) {\r\n                return this.getSceneVar(name, '_SceneFontClip');\r\n            }\r\n            _SceneBox(name) {\r\n                return this.getSceneVar(name, '_SceneBox');\r\n            }\r\n            getChild(name, type) {\r\n                if (!this[`${type}${name}`]) {\r\n                    if (this._Owner.getChildByName(name)) {\r\n                        return this[`${type}${name}`] = this._Owner.getChildByName(name);\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return this[`${type}${name}`];\r\n                }\r\n            }\r\n            _ImgChild(name) {\r\n                return this.getChild(name, '_ImgChild');\r\n            }\r\n            _BoxChild(name) {\r\n                return this.getChild(name, '_ImgBox');\r\n            }\r\n            _SpriteChild(name) {\r\n                return this.getChild(name, '_SpriteChild');\r\n            }\r\n            _LableChild(name) {\r\n                return this.getChild(name, '_LableChild');\r\n            }\r\n            _ListChild(name) {\r\n                return this.getChild(name, '_ListChild');\r\n            }\r\n            _TapChild(name) {\r\n                return this.getChild(name, '_TapChild');\r\n            }\r\n            _TapBox(name) {\r\n                return this.getChild(name, '_TapBox');\r\n            }\r\n            _TapFontClip(name) {\r\n                return this.getChild(name, '_TapFontClip');\r\n            }\r\n            onAwake() {\r\n                this._Owner[this._Owner.name] = this;\r\n                this.ownerSceneName = this._Scene.name;\r\n                this._fPoint = new Laya.Point(this._Owner.x, this._Owner.y);\r\n                this._fGPoint = this._Parent.localToGlobal(new Laya.Point(this._Owner.x, this._Owner.y));\r\n                this._fRotation = this._Owner.rotation;\r\n                this.lwgOnAwake();\r\n                this.lwgAdaptive();\r\n            }\r\n            onEnable() {\r\n                this.lwgButton();\r\n                this.lwgEvent();\r\n                this.lwgOnEnable();\r\n            }\r\n            onStart() {\r\n                this.lwgOnStart();\r\n            }\r\n            onUpdate() {\r\n                this.lwgOnUpdate();\r\n            }\r\n            clear() {\r\n                Laya.Tween.clearAll(this);\r\n                Laya.Tween.clearAll(this._Owner);\r\n                Laya.timer.clearAll(this);\r\n                Laya.timer.clearAll(this._Owner);\r\n                EventAdmin._offCaller(this);\r\n                EventAdmin._offCaller(this._Owner);\r\n            }\r\n            onDisable() {\r\n                this.clear();\r\n                this.lwgOnDisable();\r\n            }\r\n        }\r\n        SceneAdmin._ObjectBase = _ObjectBase;\r\n    })(SceneAdmin = Lwg.SceneAdmin || (Lwg.SceneAdmin = {}));\r\n    let _LwgNode;\r\n    (function (_LwgNode) {\r\n        class _Sprite extends Laya.Sprite {\r\n        }\r\n        _LwgNode._Sprite = _Sprite;\r\n        class _Image extends Laya.Image {\r\n        }\r\n        _LwgNode._Image = _Image;\r\n        class _Box extends Laya.Box {\r\n        }\r\n        _LwgNode._Box = _Box;\r\n        function _addProperty(node, nodeType) {\r\n            let _proType;\r\n            switch (nodeType) {\r\n                case 'Img':\r\n                    _proType;\r\n                    break;\r\n                case 'box':\r\n                    _proType;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            _proType = {\r\n                get gPoint() {\r\n                    if (node.parent) {\r\n                        return node.parent.localToGlobal(new Laya.Point(node.x, node.y));\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n            };\r\n            node['_lwg'] = _proType;\r\n        }\r\n        _LwgNode._addProperty = _addProperty;\r\n    })(_LwgNode = Lwg._LwgNode || (Lwg._LwgNode = {}));\r\n    let Dialogue;\r\n    (function (Dialogue) {\r\n        let Skin;\r\n        (function (Skin) {\r\n            Skin[\"blackBord\"] = \"Lwg/UI/ui_orthogon_black_0.7.png\";\r\n        })(Skin || (Skin = {}));\r\n        function createHint_Middle(describe) {\r\n            const Hint_M = Laya.Pool.getItemByClass('Hint_M', Laya.Sprite);\r\n            Hint_M.name = 'Hint_M';\r\n            Laya.stage.addChild(Hint_M);\r\n            Hint_M.width = Laya.stage.width;\r\n            Hint_M.height = 100;\r\n            Hint_M.pivotY = Hint_M.height / 2;\r\n            Hint_M.pivotX = Laya.stage.width / 2;\r\n            Hint_M.x = Laya.stage.width / 2;\r\n            Hint_M.y = Laya.stage.height / 2;\r\n            Hint_M.zOrder = 100;\r\n            const Pic = new Laya.Image();\r\n            Hint_M.addChild(Pic);\r\n            Pic.skin = Skin.blackBord;\r\n            Pic.width = Laya.stage.width;\r\n            Pic.pivotX = Laya.stage.width / 2;\r\n            Pic.height = 100;\r\n            Pic.pivotY = Pic.height / 2;\r\n            Pic.y = Hint_M.height / 2;\r\n            Pic.x = Laya.stage.width / 2;\r\n            Pic.alpha = 0.6;\r\n            const Dec = new Laya.Label();\r\n            Hint_M.addChild(Dec);\r\n            Dec.width = Laya.stage.width;\r\n            Dec.text = describe;\r\n            Dec.pivotX = Laya.stage.width / 2;\r\n            Dec.x = Laya.stage.width / 2;\r\n            Dec.height = 100;\r\n            Dec.pivotY = 50;\r\n            Dec.y = Hint_M.height / 2;\r\n            Dec.bold = true;\r\n            Dec.fontSize = 35;\r\n            Dec.color = '#ffffff';\r\n            Dec.align = 'center';\r\n            Dec.valign = 'middle';\r\n            Dec.alpha = 0;\r\n            Ani2DAdmin.scale_Alpha(Hint_M, 0, 1, 0, 1, 1, 1, 200, 0, f => {\r\n                Ani2DAdmin.fadeOut(Dec, 0, 1, 150, 0, f => {\r\n                    Ani2DAdmin.fadeOut(Dec, 1, 0, 200, 800, f => {\r\n                        Ani2DAdmin.scale_Alpha(Hint_M, 1, 1, 1, 1, 0, 0, 200, 0, f => {\r\n                            Hint_M.removeSelf();\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        }\r\n        Dialogue.createHint_Middle = createHint_Middle;\r\n        Dialogue._dialogContent = {\r\n            get Array() {\r\n                return Laya.loader.getRes(\"GameData/Dialogue/Dialogue.json\")['RECORDS'] !== null ? Laya.loader.getRes(\"GameData/Dialogue/Dialogue.json\")['RECORDS'] : [];\r\n            },\r\n        };\r\n        function getDialogContent(useWhere, name) {\r\n            let dia;\r\n            for (let index = 0; index < Dialogue._dialogContent.Array.length; index++) {\r\n                const element = Dialogue._dialogContent.Array[index];\r\n                if (element['useWhere'] == useWhere && element['name'] == name) {\r\n                    dia = element;\r\n                    break;\r\n                }\r\n            }\r\n            const arr = [];\r\n            for (const key in dia) {\r\n                if (dia.hasOwnProperty(key)) {\r\n                    const value = dia[key];\r\n                    if (key.substring(0, 7) == 'content' || value !== -1) {\r\n                        arr.push(value);\r\n                    }\r\n                }\r\n            }\r\n            return arr;\r\n        }\r\n        Dialogue.getDialogContent = getDialogContent;\r\n        function getDialogContent_Random(useWhere) {\r\n            let contentArr = [];\r\n            let whereArr = getUseWhere(useWhere);\r\n            let index = Math.floor(Math.random() * whereArr.length);\r\n            for (const key in whereArr[index]) {\r\n                if (whereArr[index].hasOwnProperty(key)) {\r\n                    const value = whereArr[index][key];\r\n                    if (key.substring(0, 7) == 'content' && value !== \"-1\") {\r\n                        contentArr.push(value);\r\n                    }\r\n                }\r\n            }\r\n            return contentArr;\r\n        }\r\n        Dialogue.getDialogContent_Random = getDialogContent_Random;\r\n        function getUseWhere(useWhere) {\r\n            let arr = [];\r\n            for (let index = 0; index < Dialogue._dialogContent.Array.length; index++) {\r\n                const element = Dialogue._dialogContent.Array[index];\r\n                if (element['useWhere'] == useWhere) {\r\n                    arr.push(element);\r\n                }\r\n            }\r\n            return arr;\r\n        }\r\n        Dialogue.getUseWhere = getUseWhere;\r\n        let UseWhere;\r\n        (function (UseWhere) {\r\n            UseWhere[\"scene1\"] = \"scene1\";\r\n            UseWhere[\"scene2\"] = \"scene2\";\r\n            UseWhere[\"scene3\"] = \"scene3\";\r\n        })(UseWhere = Dialogue.UseWhere || (Dialogue.UseWhere = {}));\r\n        let DialogProperty;\r\n        (function (DialogProperty) {\r\n            DialogProperty[\"name\"] = \"name\";\r\n            DialogProperty[\"useWhere\"] = \"useWhere\";\r\n            DialogProperty[\"content\"] = \"content\";\r\n            DialogProperty[\"max\"] = \"max\";\r\n        })(DialogProperty = Dialogue.DialogProperty || (Dialogue.DialogProperty = {}));\r\n        let PlayMode;\r\n        (function (PlayMode) {\r\n            PlayMode[\"voluntarily\"] = \"voluntarily\";\r\n            PlayMode[\"manual\"] = \"manual\";\r\n            PlayMode[\"clickContent\"] = \"clickContent\";\r\n        })(PlayMode = Dialogue.PlayMode || (Dialogue.PlayMode = {}));\r\n        function createVoluntarilyDialogue(x, y, useWhere, startDelayed, delayed, parent, content) {\r\n            if (startDelayed == undefined) {\r\n                startDelayed = 0;\r\n            }\r\n            Laya.timer.once(startDelayed, this, () => {\r\n                let Pre_Dialogue;\r\n                Laya.loader.load('Prefab/Dialogue_Common.json', Laya.Handler.create(this, function (prefab) {\r\n                    let _prefab = new Laya.Prefab();\r\n                    _prefab.json = prefab;\r\n                    Pre_Dialogue = Laya.Pool.getItemByCreateFun('Pre_Dialogue', _prefab.create, _prefab);\r\n                    if (parent) {\r\n                        parent.addChild(Pre_Dialogue);\r\n                    }\r\n                    else {\r\n                        Laya.stage.addChild(Pre_Dialogue);\r\n                    }\r\n                    Pre_Dialogue.x = x;\r\n                    Pre_Dialogue.y = y;\r\n                    let ContentLabel = Pre_Dialogue.getChildByName('Content');\r\n                    let contentArr;\r\n                    if (content !== undefined) {\r\n                        ContentLabel.text = content[0];\r\n                    }\r\n                    else {\r\n                        contentArr = getDialogContent_Random(useWhere);\r\n                        ContentLabel.text = contentArr[0];\r\n                    }\r\n                    Pre_Dialogue.zOrder = 100;\r\n                    if (delayed == undefined) {\r\n                        delayed = 1000;\r\n                    }\r\n                    Ani2DAdmin.scale_Alpha(Pre_Dialogue, 0, 0, 0, 1, 1, 1, 150, 1000, () => {\r\n                        for (let index = 0; index < contentArr.length; index++) {\r\n                            Laya.timer.once(index * delayed, this, () => {\r\n                                ContentLabel.text = contentArr[index];\r\n                                if (index == contentArr.length - 1) {\r\n                                    Laya.timer.once(delayed, this, () => {\r\n                                        Ani2DAdmin.scale_Alpha(Pre_Dialogue, 1, 1, 1, 0, 0, 0, 150, 1000, () => {\r\n                                            Pre_Dialogue.removeSelf();\r\n                                        });\r\n                                    });\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                    Dialogue.DialogueNode = Pre_Dialogue;\r\n                }));\r\n            });\r\n        }\r\n        Dialogue.createVoluntarilyDialogue = createVoluntarilyDialogue;\r\n        function createCommonDialog(parent, x, y, content) {\r\n            let Dialogue_Common;\r\n            Laya.loader.load('Prefab/Dialogue_Common.json', Laya.Handler.create(this, function (prefab) {\r\n                let _prefab = new Laya.Prefab();\r\n                _prefab.json = prefab;\r\n                Dialogue_Common = Laya.Pool.getItemByCreateFun('Dialogue_Common', _prefab.create, _prefab);\r\n                parent.addChild(Dialogue_Common);\r\n                Dialogue_Common.pos(x, y);\r\n                let Content = Dialogue_Common.getChildByName('Dialogue_Common');\r\n                Content.text = content;\r\n            }));\r\n        }\r\n        Dialogue.createCommonDialog = createCommonDialog;\r\n    })(Dialogue = Lwg.Dialogue || (Lwg.Dialogue = {}));\r\n    let GoldAdmin;\r\n    (function (GoldAdmin) {\r\n        GoldAdmin._num = {\r\n            get value() {\r\n                return Laya.LocalStorage.getItem('GoldNum') ? Number(Laya.LocalStorage.getItem('GoldNum')) : 0;\r\n            },\r\n            set value(val) {\r\n                Laya.LocalStorage.setItem('GoldNum', val.toString());\r\n            }\r\n        };\r\n        function _createGoldNode(x, y, parent) {\r\n            if (!parent) {\r\n                parent = Laya.stage;\r\n            }\r\n            if (GoldAdmin.GoldNode) {\r\n                GoldAdmin.GoldNode.removeSelf();\r\n            }\r\n            let sp;\r\n            Laya.loader.load('Prefab/LwgGold.json', Laya.Handler.create(this, function (prefab) {\r\n                let _prefab = new Laya.Prefab();\r\n                _prefab.json = prefab;\r\n                sp = Laya.Pool.getItemByCreateFun('gold', _prefab.create, _prefab);\r\n                let Num = sp.getChildByName('Num');\r\n                Num.text = ToolsAdmin._Format.formatNumber(GoldAdmin._num.value);\r\n                parent.addChild(sp);\r\n                sp.pos(x, y);\r\n                sp.zOrder = 100;\r\n                GoldAdmin.GoldNode = sp;\r\n            }));\r\n        }\r\n        GoldAdmin._createGoldNode = _createGoldNode;\r\n        function _add(number) {\r\n            GoldAdmin._num.value += Number(number);\r\n            let Num = GoldAdmin.GoldNode.getChildByName('Num');\r\n            Num.text = ToolsAdmin._Format.formatNumber(GoldAdmin._num.value);\r\n        }\r\n        GoldAdmin._add = _add;\r\n        function _addDisPlay(number) {\r\n            let Num = GoldAdmin.GoldNode.getChildByName('Num');\r\n            Num.value = (Number(Num.value) + Number(number)).toString();\r\n        }\r\n        GoldAdmin._addDisPlay = _addDisPlay;\r\n        function _addNoDisPlay(number) {\r\n            GoldAdmin._num.value += Number(number);\r\n        }\r\n        GoldAdmin._addNoDisPlay = _addNoDisPlay;\r\n        function _nodeAppear(delayed, x, y) {\r\n            if (!GoldAdmin.GoldNode) {\r\n                return;\r\n            }\r\n            if (delayed) {\r\n                Ani2DAdmin.scale_Alpha(GoldAdmin.GoldNode, 0, 1, 1, 1, 1, 1, delayed, 0, f => {\r\n                    GoldAdmin.GoldNode.visible = true;\r\n                });\r\n            }\r\n            else {\r\n                GoldAdmin.GoldNode.visible = true;\r\n            }\r\n            if (x) {\r\n                GoldAdmin.GoldNode.x = x;\r\n            }\r\n            if (y) {\r\n                GoldAdmin.GoldNode.y = y;\r\n            }\r\n        }\r\n        GoldAdmin._nodeAppear = _nodeAppear;\r\n        function _nodeVinish(delayed) {\r\n            if (!GoldAdmin.GoldNode) {\r\n                return;\r\n            }\r\n            if (delayed) {\r\n                Ani2DAdmin.scale_Alpha(GoldAdmin.GoldNode, 1, 1, 1, 1, 1, 0, delayed, 0, f => {\r\n                    GoldAdmin.GoldNode.visible = false;\r\n                });\r\n            }\r\n            else {\r\n                GoldAdmin.GoldNode.visible = false;\r\n            }\r\n        }\r\n        GoldAdmin._nodeVinish = _nodeVinish;\r\n        let SkinUrl;\r\n        (function (SkinUrl) {\r\n            SkinUrl[SkinUrl[\"Frame/Effects/iconGold.png\"] = 0] = \"Frame/Effects/iconGold.png\";\r\n        })(SkinUrl || (SkinUrl = {}));\r\n        function _createOne(width, height, url) {\r\n            const Gold = Laya.Pool.getItemByClass('addGold', Laya.Image);\r\n            Gold.name = 'addGold';\r\n            let num = Math.floor(Math.random() * 12);\r\n            Gold.alpha = 1;\r\n            Gold.zOrder = 60;\r\n            Gold.width = width;\r\n            Gold.height = height;\r\n            Gold.pivotX = width / 2;\r\n            Gold.pivotY = height / 2;\r\n            if (!url) {\r\n                Gold.skin = SkinUrl[0];\r\n            }\r\n            else {\r\n                Gold.skin = url;\r\n            }\r\n            if (GoldAdmin.GoldNode) {\r\n                Gold.zOrder = GoldAdmin.GoldNode.zOrder + 10;\r\n            }\r\n            return Gold;\r\n        }\r\n        GoldAdmin._createOne = _createOne;\r\n        function _getAni_Single(parent, number, width, height, url, firstPoint, targetPoint, func1, func2) {\r\n            for (let index = 0; index < number; index++) {\r\n                Laya.timer.once(index * 30, this, () => {\r\n                    let Gold = _createOne(width, height, url);\r\n                    parent.addChild(Gold);\r\n                    Ani2DAdmin.move_Scale(Gold, 1, firstPoint.x, firstPoint.y, targetPoint.x, targetPoint.y, 1, 350, 0, null, () => {\r\n                        AudioAdmin._playSound(AudioAdmin._voiceUrl.huodejinbi);\r\n                        if (index === number - 1) {\r\n                            Laya.timer.once(200, this, () => {\r\n                                if (func2) {\r\n                                    func2();\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            if (func1) {\r\n                                func1();\r\n                            }\r\n                        }\r\n                        Gold.removeSelf();\r\n                    });\r\n                });\r\n            }\r\n        }\r\n        GoldAdmin._getAni_Single = _getAni_Single;\r\n        function _getAni_Heap(parent, number, width, height, url, firstPoint, targetPoint, func1, func2) {\r\n            for (let index = 0; index < number; index++) {\r\n                let Gold = _createOne(width ? width : 100, height ? height : 100, url ? url : SkinUrl[0]);\r\n                parent = parent ? parent : Laya.stage;\r\n                parent.addChild(Gold);\r\n                firstPoint = firstPoint ? firstPoint : new Laya.Point(Laya.stage.width / 2, Laya.stage.height / 2);\r\n                targetPoint = targetPoint ? targetPoint : new Laya.Point(GoldAdmin.GoldNode.x, GoldAdmin.GoldNode.y);\r\n                let x = Math.floor(Math.random() * 2) == 1 ? firstPoint.x + Math.random() * 100 : firstPoint.x - Math.random() * 100;\r\n                let y = Math.floor(Math.random() * 2) == 1 ? firstPoint.y + Math.random() * 100 : firstPoint.y - Math.random() * 100;\r\n                Ani2DAdmin.move_Scale(Gold, 0.5, firstPoint.x, firstPoint.y, x, y, 1, 300, Math.random() * 100 + 100, Laya.Ease.expoIn, () => {\r\n                    Ani2DAdmin.move_Scale(Gold, 1, Gold.x, Gold.y, targetPoint.x, targetPoint.y, 1, 400, Math.random() * 200 + 100, Laya.Ease.cubicOut, () => {\r\n                        AudioAdmin._playSound(AudioAdmin._voiceUrl.huodejinbi);\r\n                        if (index === number - 1) {\r\n                            Laya.timer.once(200, this, () => {\r\n                                if (func2) {\r\n                                    func2();\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            if (func1) {\r\n                                func1();\r\n                            }\r\n                        }\r\n                        Gold.removeSelf();\r\n                    });\r\n                });\r\n            }\r\n        }\r\n        GoldAdmin._getAni_Heap = _getAni_Heap;\r\n    })(GoldAdmin = Lwg.GoldAdmin || (Lwg.GoldAdmin = {}));\r\n    let EventAdmin;\r\n    (function (EventAdmin) {\r\n        EventAdmin.dispatcher = new Laya.EventDispatcher();\r\n        function _register(type, caller, listener) {\r\n            if (!caller) {\r\n                console.error(\"事件的执行域必须存在!\");\r\n            }\r\n            EventAdmin.dispatcher.on(type.toString(), caller, listener);\r\n        }\r\n        EventAdmin._register = _register;\r\n        function _registerOnce(type, caller, listener) {\r\n            if (!caller) {\r\n                console.error(\"事件的执行域必须存在!\");\r\n            }\r\n            EventAdmin.dispatcher.once(type.toString(), caller, listener);\r\n        }\r\n        EventAdmin._registerOnce = _registerOnce;\r\n        function _notify(type, args) {\r\n            EventAdmin.dispatcher.event(type.toString(), args);\r\n        }\r\n        EventAdmin._notify = _notify;\r\n        function _off(type, caller, listener) {\r\n            EventAdmin.dispatcher.off(type.toString(), caller, listener);\r\n        }\r\n        EventAdmin._off = _off;\r\n        function _offAll(type) {\r\n            EventAdmin.dispatcher.offAll(type.toString());\r\n        }\r\n        EventAdmin._offAll = _offAll;\r\n        function _offCaller(caller) {\r\n            EventAdmin.dispatcher.offAllCaller(caller);\r\n        }\r\n        EventAdmin._offCaller = _offCaller;\r\n    })(EventAdmin = Lwg.EventAdmin || (Lwg.EventAdmin = {}));\r\n    let DateAdmin;\r\n    (function (DateAdmin) {\r\n        DateAdmin._date = {\r\n            get year() {\r\n                return (new Date()).getFullYear();\r\n            },\r\n            get month() {\r\n                return (new Date()).getMonth();\r\n            },\r\n            get date() {\r\n                return (new Date()).getDate();\r\n            },\r\n            get day() {\r\n                return (new Date()).getDay();\r\n            },\r\n            get hours() {\r\n                return (new Date()).getHours();\r\n            },\r\n            get minutes() {\r\n                return (new Date()).getMinutes();\r\n            },\r\n            get seconds() {\r\n                return (new Date()).getSeconds();\r\n            },\r\n            get milliseconds() {\r\n                return (new Date()).getMilliseconds();\r\n            },\r\n            get toLocaleDateString() {\r\n                return (new Date()).toLocaleDateString();\r\n            },\r\n            get toLocaleTimeString() {\r\n                return (new Date()).toLocaleTimeString();\r\n            }\r\n        };\r\n        function _init() {\r\n            const d = new Date;\r\n            DateAdmin._loginInfo = StorageAdmin._arrayArr('DateAdmin/loginInfo');\r\n            DateAdmin._loginInfo.value.push([d.getFullYear(), d.getMonth() + 1, d.getDate(), d.getDay(), d.getHours(), d.getMinutes(), d.getSeconds()]);\r\n            let arr = [];\r\n            if (DateAdmin._loginInfo.value.length > 0) {\r\n                for (let index = 0; index < DateAdmin._loginInfo.value.length; index++) {\r\n                    arr.push(DateAdmin._loginInfo.value[index]);\r\n                }\r\n            }\r\n            arr.push([d.getFullYear(), d.getMonth() + 1, d.getDate(), d.getDay(), d.getHours(), d.getMinutes(), d.getSeconds()]);\r\n            DateAdmin._loginInfo.value = arr;\r\n            DateAdmin._loginCount = StorageAdmin._num('DateAdmin/_loginCount');\r\n            DateAdmin._loginCount.value++;\r\n            DateAdmin._loginToday.num++;\r\n        }\r\n        DateAdmin._init = _init;\r\n        DateAdmin._loginToday = {\r\n            get num() {\r\n                return Laya.LocalStorage.getItem('DateAdmin/loginToday') ? Number(Laya.LocalStorage.getItem('DateAdmin/loginToday')) : 0;\r\n            },\r\n            set num(val) {\r\n                if (DateAdmin._date.date == DateAdmin._loginInfo.value[DateAdmin._loginInfo.value.length - 1][2]) {\r\n                    Laya.LocalStorage.setItem('DateAdmin/loginToday', val.toString());\r\n                }\r\n            }\r\n        };\r\n        DateAdmin._last = {\r\n            get date() {\r\n                if (DateAdmin._loginInfo.value.length > 1) {\r\n                    return DateAdmin._loginInfo.value[DateAdmin._loginInfo.value.length - 2][2];\r\n                }\r\n                else {\r\n                    return DateAdmin._loginInfo.value[DateAdmin._loginInfo.value.length - 1][2];\r\n                }\r\n            },\r\n        };\r\n        DateAdmin._front = {\r\n            get date() {\r\n                return DateAdmin._loginInfo.value[DateAdmin._loginInfo.value.length - 1][2];\r\n            },\r\n        };\r\n    })(DateAdmin = Lwg.DateAdmin || (Lwg.DateAdmin = {}));\r\n    let TimerAdmin;\r\n    (function (TimerAdmin) {\r\n        TimerAdmin._switch = true;\r\n        function _frameLoop(delay, caller, method, immediately, args, coverBefore) {\r\n            if (immediately) {\r\n                if (TimerAdmin._switch) {\r\n                    method();\r\n                }\r\n            }\r\n            Laya.timer.frameLoop(delay, caller, () => {\r\n                if (TimerAdmin._switch) {\r\n                    method();\r\n                }\r\n            }, args, coverBefore);\r\n        }\r\n        TimerAdmin._frameLoop = _frameLoop;\r\n        function _frameRandomLoop(delay1, delay2, caller, method, immediately, args, coverBefore) {\r\n            if (immediately) {\r\n                if (TimerAdmin._switch) {\r\n                    method();\r\n                }\r\n            }\r\n            var func = () => {\r\n                let delay = ToolsAdmin._Number.randomOneInt(delay1, delay2);\r\n                Laya.timer.frameOnce(delay, caller, () => {\r\n                    if (TimerAdmin._switch) {\r\n                        method();\r\n                        func();\r\n                    }\r\n                }, args, coverBefore);\r\n            };\r\n            func();\r\n        }\r\n        TimerAdmin._frameRandomLoop = _frameRandomLoop;\r\n        function _frameNumLoop(delay, num, caller, method, compeletMethod, immediately, args, coverBefore) {\r\n            if (immediately) {\r\n                if (TimerAdmin._switch) {\r\n                    method();\r\n                }\r\n            }\r\n            let num0 = 0;\r\n            var func = () => {\r\n                if (TimerAdmin._switch) {\r\n                    num0++;\r\n                    if (num0 >= num) {\r\n                        method();\r\n                        if (compeletMethod) {\r\n                            compeletMethod();\r\n                        }\r\n                        Laya.timer.clear(caller, func);\r\n                    }\r\n                    else {\r\n                        method();\r\n                    }\r\n                }\r\n            };\r\n            Laya.timer.frameLoop(delay, caller, func, args, coverBefore);\r\n        }\r\n        TimerAdmin._frameNumLoop = _frameNumLoop;\r\n        function _numRandomLoop(delay1, delay2, num, caller, method, compeletMethod, immediately, args, coverBefore) {\r\n            immediately && TimerAdmin._switch && method();\r\n            let num0 = 0;\r\n            var func = () => {\r\n                let delay = ToolsAdmin._Number.randomOneInt(delay1, delay2);\r\n                Laya.timer.frameOnce(delay, caller, () => {\r\n                    if (TimerAdmin._switch) {\r\n                        num0++;\r\n                        if (num0 >= num) {\r\n                            method();\r\n                            compeletMethod();\r\n                        }\r\n                        else {\r\n                            method();\r\n                            func();\r\n                        }\r\n                    }\r\n                }, args, coverBefore);\r\n            };\r\n            func();\r\n        }\r\n        TimerAdmin._numRandomLoop = _numRandomLoop;\r\n        function _frameNumRandomLoop(delay1, delay2, num, caller, method, compeletMethod, immediately, args, coverBefore) {\r\n            immediately && TimerAdmin._switch && method();\r\n            let num0 = 0;\r\n            var func = () => {\r\n                let delay = ToolsAdmin._Number.randomOneInt(delay1, delay2);\r\n                Laya.timer.frameOnce(delay, caller, () => {\r\n                    if (TimerAdmin._switch) {\r\n                        num0++;\r\n                        if (num0 >= num) {\r\n                            method();\r\n                            compeletMethod && compeletMethod();\r\n                        }\r\n                        else {\r\n                            method();\r\n                            func();\r\n                        }\r\n                    }\r\n                }, args, coverBefore);\r\n            };\r\n            func();\r\n        }\r\n        TimerAdmin._frameNumRandomLoop = _frameNumRandomLoop;\r\n        function _frameOnce(delay, caller, afterMethod, beforeMethod, args, coverBefore) {\r\n            beforeMethod && beforeMethod();\r\n            Laya.timer.frameOnce(delay, caller, () => {\r\n                afterMethod();\r\n            }, args, coverBefore);\r\n        }\r\n        TimerAdmin._frameOnce = _frameOnce;\r\n        function _frameNumOnce(delay, num, caller, afterMethod, beforeMethod, args, coverBefore) {\r\n            for (let index = 0; index < num; index++) {\r\n                if (beforeMethod) {\r\n                    beforeMethod();\r\n                }\r\n                Laya.timer.frameOnce(delay, caller, () => {\r\n                    afterMethod();\r\n                }, args, coverBefore);\r\n            }\r\n        }\r\n        TimerAdmin._frameNumOnce = _frameNumOnce;\r\n        function _loop(delay, caller, method, immediately, args, coverBefore) {\r\n            if (immediately) {\r\n                if (TimerAdmin._switch) {\r\n                    method();\r\n                }\r\n            }\r\n            Laya.timer.loop(delay, caller, () => {\r\n                if (TimerAdmin._switch) {\r\n                    method();\r\n                }\r\n            }, args, coverBefore);\r\n        }\r\n        TimerAdmin._loop = _loop;\r\n        function _randomLoop(delay1, delay2, caller, method, immediately, args, coverBefore) {\r\n            if (immediately) {\r\n                if (TimerAdmin._switch) {\r\n                    method();\r\n                }\r\n            }\r\n            var func = () => {\r\n                let delay = ToolsAdmin._Number.randomOneInt(delay1, delay2);\r\n                Laya.timer.once(delay, caller, () => {\r\n                    if (TimerAdmin._switch) {\r\n                        method();\r\n                        func();\r\n                    }\r\n                }, args, coverBefore);\r\n            };\r\n            func();\r\n        }\r\n        TimerAdmin._randomLoop = _randomLoop;\r\n        function _numLoop(delay, num, caller, method, compeletMethod, immediately, args, coverBefore) {\r\n            if (immediately) {\r\n                method();\r\n            }\r\n            let num0 = 0;\r\n            var func = () => {\r\n                if (TimerAdmin._switch) {\r\n                    num0++;\r\n                    if (num0 > num) {\r\n                        method();\r\n                        if (compeletMethod) {\r\n                            compeletMethod();\r\n                        }\r\n                        Laya.timer.clear(caller, func);\r\n                    }\r\n                    else {\r\n                        method();\r\n                    }\r\n                }\r\n            };\r\n            Laya.timer.loop(delay, caller, func, args, coverBefore);\r\n        }\r\n        TimerAdmin._numLoop = _numLoop;\r\n        function _once(delay, caller, afterMethod, beforeMethod, args, coverBefore) {\r\n            if (beforeMethod) {\r\n                beforeMethod();\r\n            }\r\n            Laya.timer.once(delay, caller, () => {\r\n                afterMethod();\r\n            }, args, coverBefore);\r\n        }\r\n        TimerAdmin._once = _once;\r\n        function _clearAll(arr) {\r\n            for (let index = 0; index < arr.length; index++) {\r\n                Laya.timer.clearAll(arr[index]);\r\n            }\r\n        }\r\n        TimerAdmin._clearAll = _clearAll;\r\n        function _clear(arr) {\r\n            for (let index = 0; index < arr.length; index++) {\r\n                Laya.timer.clear(arr[index][0], arr[index][1]);\r\n            }\r\n        }\r\n        TimerAdmin._clear = _clear;\r\n    })(TimerAdmin = Lwg.TimerAdmin || (Lwg.TimerAdmin = {}));\r\n    let AdaptiveAdmin;\r\n    (function (AdaptiveAdmin) {\r\n        AdaptiveAdmin._Use = {\r\n            get value() {\r\n                return this['Adaptive/value'] ? this['Adaptive/value'] : null;\r\n            },\r\n            set value(val) {\r\n                this['Adaptive/value'] = val;\r\n            }\r\n        };\r\n        function _stageWidth(arr) {\r\n            for (let index = 0; index < arr.length; index++) {\r\n                const element = arr[index];\r\n                if (element.pivotX == 0 && element.width) {\r\n                    element.x = element.x / AdaptiveAdmin._Use.value[0] * Laya.stage.width + element.width / 2;\r\n                }\r\n                else {\r\n                    element.x = element.x / AdaptiveAdmin._Use.value[0] * Laya.stage.width;\r\n                }\r\n            }\r\n        }\r\n        AdaptiveAdmin._stageWidth = _stageWidth;\r\n        function _stageHeight(arr) {\r\n            for (let index = 0; index < arr.length; index++) {\r\n                const element = arr[index];\r\n                if (element.pivotY == 0 && element.height) {\r\n                    element.y = element.y / AdaptiveAdmin._Use.value[1] * element.scaleX * Laya.stage.height + element.height / 2;\r\n                }\r\n                else {\r\n                    element.y = element.y / AdaptiveAdmin._Use.value[1] * element.scaleX * Laya.stage.height;\r\n                }\r\n            }\r\n        }\r\n        AdaptiveAdmin._stageHeight = _stageHeight;\r\n        function _center(arr, target) {\r\n            for (let index = 0; index < arr.length; index++) {\r\n                const element = arr[index];\r\n                if (element.width > 0) {\r\n                    element.x = target.width / 2 - (element.width / 2 - element.pivotX) * element.scaleX;\r\n                }\r\n                else {\r\n                    element.x = target.width / 2;\r\n                }\r\n                if (element.height > 0) {\r\n                    element.y = target.height / 2 - (element.height / 2 - element.pivotY) * element.scaleY;\r\n                }\r\n                else {\r\n                    element.y = target.height / 2;\r\n                }\r\n            }\r\n        }\r\n        AdaptiveAdmin._center = _center;\r\n    })(AdaptiveAdmin = Lwg.AdaptiveAdmin || (Lwg.AdaptiveAdmin = {}));\r\n    let SceneAniAdmin;\r\n    (function (SceneAniAdmin) {\r\n        SceneAniAdmin._openSwitch = {\r\n            get value() {\r\n                return this['openSwitch'] ? this['openSwitch'] : false;\r\n            },\r\n            set value(val) {\r\n                if (val) {\r\n                    SceneAniAdmin._closeSwitch.value = false;\r\n                }\r\n                this['openSwitch'] = val;\r\n            }\r\n        };\r\n        SceneAniAdmin._closeSwitch = {\r\n            get value() {\r\n                return this['closeSwitch'] ? this['closeSwitch'] : false;\r\n            },\r\n            set value(val) {\r\n                if (val) {\r\n                    SceneAniAdmin._openSwitch.value = false;\r\n                }\r\n                this['closeSwitch'] = val;\r\n            }\r\n        };\r\n        SceneAniAdmin._Use = {\r\n            get value() {\r\n                return this['SceneAnimation/name'] ? this['SceneAnimation/name'] : null;\r\n            },\r\n            set value(val) {\r\n                this['SceneAnimation/name'] = val;\r\n            }\r\n        };\r\n        SceneAniAdmin._closeAniDelay = 0;\r\n        SceneAniAdmin._closeAniTime = 0;\r\n        function _commonOpenAni(Scene) {\r\n            var afterAni = () => {\r\n                LwgClick._switch = true;\r\n                if (Scene[Scene.name]) {\r\n                    Scene[Scene.name].lwgOpenAniAfter();\r\n                    Scene[Scene.name].lwgButton();\r\n                }\r\n            };\r\n            if (!SceneAniAdmin._openSwitch.value) {\r\n                LwgScene._SceneServe._close();\r\n                Laya.timer.once(SceneAniAdmin._closeAniDelay + SceneAniAdmin._closeAniTime, this, () => {\r\n                    afterAni();\r\n                });\r\n                return 0;\r\n            }\r\n            let sumDelay = 0;\r\n            sumDelay = SceneAniAdmin._Use.value.class['_paly'](SceneAniAdmin._Use.value.type, Scene);\r\n            Laya.timer.once(sumDelay, this, () => {\r\n                afterAni();\r\n            });\r\n            return sumDelay;\r\n        }\r\n        SceneAniAdmin._commonOpenAni = _commonOpenAni;\r\n        function _commonCloseAni(CloseScene) {\r\n            return SceneAniAdmin._Use.value.class['_paly'](SceneAniAdmin._Use.value.type, CloseScene);\r\n        }\r\n        SceneAniAdmin._commonCloseAni = _commonCloseAni;\r\n        let _fadeOut;\r\n        (function (_fadeOut) {\r\n            let _time = 700;\r\n            let _delay = 150;\r\n            class Close {\r\n                static _paly(type, Scene) {\r\n                    _fadeOut_Close(Scene);\r\n                    SceneAniAdmin._closeAniDelay = _delay;\r\n                    SceneAniAdmin._closeAniTime = _time;\r\n                    return _time + _delay;\r\n                }\r\n                ;\r\n            }\r\n            _fadeOut.Close = Close;\r\n            class Open {\r\n                static _paly(type, Scene) {\r\n                    _fadeOut_Open(Scene);\r\n                    return _time + _delay;\r\n                }\r\n                ;\r\n            }\r\n            _fadeOut.Open = Open;\r\n            function _fadeOut_Open(Scene) {\r\n                let time = 400;\r\n                let delay = 300;\r\n                if (Scene['Background']) {\r\n                    Ani2DAdmin.fadeOut(Scene, 0, 1, time / 2, delay);\r\n                }\r\n                Ani2DAdmin.fadeOut(Scene, 0, 1, time, 0);\r\n                return time + delay;\r\n            }\r\n            function _fadeOut_Close(Scene) {\r\n                let time = 150;\r\n                let delay = 50;\r\n                if (Scene['Background']) {\r\n                    Ani2DAdmin.fadeOut(Scene, 1, 0, time / 2);\r\n                }\r\n                Ani2DAdmin.fadeOut(Scene, 1, 0, time, delay);\r\n                return time + delay;\r\n            }\r\n        })(_fadeOut = SceneAniAdmin._fadeOut || (SceneAniAdmin._fadeOut = {}));\r\n        let _shutters;\r\n        (function (_shutters) {\r\n            let _num = 10;\r\n            let _time = 700;\r\n            let _delay = 150;\r\n            function _moveClose(sp, tex, scaleX, scealeY) {\r\n                Ani2DAdmin.scale(sp, 1, 1, scaleX, scealeY, _time, 0, () => {\r\n                    tex.disposeBitmap();\r\n                    tex.destroy();\r\n                    sp.destroy();\r\n                });\r\n            }\r\n            function _moveOpen(sp, tex, scaleX, scealeY) {\r\n                Ani2DAdmin.scale(sp, scaleX, scealeY, 1, 1, _time, 0, () => {\r\n                    tex.disposeBitmap();\r\n                    tex.destroy();\r\n                    sp.destroy();\r\n                });\r\n            }\r\n            function _moveRule(sp, tex, scaleModul, open) {\r\n                if (open) {\r\n                    if (scaleModul === 'x') {\r\n                        _moveOpen(sp, tex, 0, 1);\r\n                    }\r\n                    else {\r\n                        _moveOpen(sp, tex, 1, 0);\r\n                    }\r\n                }\r\n                else {\r\n                    if (scaleModul === 'x') {\r\n                        _moveClose(sp, tex, 0, 1);\r\n                    }\r\n                    else {\r\n                        _moveClose(sp, tex, 1, 0);\r\n                    }\r\n                }\r\n            }\r\n            function _createNoMaskSp(x, y, width, height, tex, scaleModul, open) {\r\n                const sp = new Laya.Sprite;\r\n                Laya.stage.addChild(sp);\r\n                sp.name = 'shutters';\r\n                sp.zOrder = 1000;\r\n                sp.pos(x, y);\r\n                sp.size(width, height);\r\n                ToolsAdmin._Node.changePivot(sp, width / 2, height / 2);\r\n                sp.texture = tex;\r\n                _moveRule(sp, tex, scaleModul, open);\r\n                return sp;\r\n            }\r\n            function _createMaskSp(Scene, scaleModul, open) {\r\n                const sp = new Laya.Sprite;\r\n                Laya.stage.addChild(sp);\r\n                const _width = Laya.stage.width;\r\n                const _height = Laya.stage.height;\r\n                sp.size(_width, _height);\r\n                sp.pos(0, 0);\r\n                sp.zOrder = 1000;\r\n                sp.name = 'shutters';\r\n                const tex = Scene.drawToTexture(_width, _height, 0, 0);\r\n                sp.texture = tex;\r\n                _moveRule(sp, tex, scaleModul, open);\r\n                return sp;\r\n            }\r\n            function _createMask(sp) {\r\n                const Mask = new Laya.Image;\r\n                Mask.skin = `Lwg/UI/ui_orthogon_cycn.png`;\r\n                Mask.sizeGrid = '12,12,12,12';\r\n                sp.mask = Mask;\r\n                Mask.anchorX = Mask.anchorY = 0.5;\r\n                return Mask;\r\n            }\r\n            function _crosswise(Scene, open) {\r\n                for (let index = 0; index < _num; index++) {\r\n                    const _width = Scene.width / _num;\r\n                    const _height = Laya.stage.height;\r\n                    const tex = Scene.drawToTexture(_width, _height, -_width * index, 0);\r\n                    _createNoMaskSp(_width * index, 0, _width, _height, tex, 'x', open);\r\n                }\r\n            }\r\n            _shutters._crosswise = _crosswise;\r\n            function _vertical(Scene, open) {\r\n                for (let index = 0; index < _num; index++) {\r\n                    const _width = Scene.width;\r\n                    const _height = Laya.stage.height / _num;\r\n                    const tex = Scene.drawToTexture(_width, _height, 0, -_height * index);\r\n                    _createNoMaskSp(0, _height * index, _width, _height, tex, 'y', false);\r\n                }\r\n            }\r\n            _shutters._vertical = _vertical;\r\n            function _croAndVer(Scene, open) {\r\n                const num = _num - 2;\r\n                for (let index = 0; index < num; index++) {\r\n                    const _width = Scene.width / num;\r\n                    const _height = Laya.stage.height;\r\n                    const tex = Scene.drawToTexture(_width, _height, -_width * index, 0);\r\n                    _createNoMaskSp(_width * index, 0, _width, _height, tex, 'x', false);\r\n                }\r\n                for (let index = 0; index < num; index++) {\r\n                    const _width = Scene.width;\r\n                    const _height = Laya.stage.height / num;\r\n                    const tex = Scene.drawToTexture(_width, _height, 0, -_height * index);\r\n                    _createNoMaskSp(0, _height * index, _width, _height, tex, 'y', open);\r\n                }\r\n            }\r\n            _shutters._croAndVer = _croAndVer;\r\n            function _rSideling(Scene, open) {\r\n                for (let index = 0; index < _num; index++) {\r\n                    let addLen = 1000;\r\n                    const sp = _createMaskSp(Scene, 'x', open);\r\n                    const Mask = _createMask(sp);\r\n                    Mask.size(Math.round(Laya.stage.width / _num), Math.round(Laya.stage.height + addLen));\r\n                    Mask.pos(Math.round(Laya.stage.width / _num * index), Math.round(-addLen / 2));\r\n                    ToolsAdmin._Node.changePivot(Mask, Math.round(Mask.width / 2), Math.round(Mask.height / 2));\r\n                    ToolsAdmin._Node.changePivot(sp, Math.round(index * sp.width / _num + sp.width / _num / 2), Math.round(sp.height / 2));\r\n                    Mask.rotation = -10;\r\n                }\r\n            }\r\n            _shutters._rSideling = _rSideling;\r\n            function _lSideling(Scene, open) {\r\n                for (let index = 0; index < _num; index++) {\r\n                    const sp = _createMaskSp(Scene, 'x', open);\r\n                    const Mask = _createMask(sp);\r\n                    Mask.size(Math.round(Laya.stage.width / _num), Math.round(Laya.stage.height + 1000));\r\n                    Mask.pos(Math.round(Laya.stage.width / _num * index), -1000 / 2);\r\n                    ToolsAdmin._Node.changePivot(Mask, Math.round(Mask.width / 2), Math.round(Mask.height / 2));\r\n                    ToolsAdmin._Node.changePivot(sp, Math.round(index * sp.width / _num + sp.width / _num / 2), Math.round(sp.height / 2));\r\n                    Mask.rotation = 10;\r\n                }\r\n            }\r\n            _shutters._lSideling = _lSideling;\r\n            function _sidelingIntersection(Scene, open) {\r\n                for (let index = 0; index < _num; index++) {\r\n                    let addLen = 1000;\r\n                    const sp1 = _createMaskSp(Scene, 'x', open);\r\n                    const Mask1 = _createMask(sp1);\r\n                    Mask1.width = Math.round(Laya.stage.width / _num);\r\n                    Mask1.height = Math.round(Laya.stage.height + addLen);\r\n                    Mask1.pos(Math.round(Laya.stage.width / _num * index), Math.round(-addLen / 2));\r\n                    ToolsAdmin._Node.changePivot(Mask1, Math.round(Mask1.width / 2), Math.round(Mask1.height / 2));\r\n                    ToolsAdmin._Node.changePivot(sp1, Math.round(index * sp1.width / _num + sp1.width / _num / 2), Math.round(sp1.height / 2));\r\n                    Mask1.rotation = -15;\r\n                    const sp2 = _createMaskSp(Scene, 'x', open);\r\n                    const Mask2 = _createMask(sp2);\r\n                    Mask2.width = Laya.stage.width / _num;\r\n                    Mask2.height = Laya.stage.height + addLen;\r\n                    Mask2.pos(Laya.stage.width / _num * index, -addLen / 2);\r\n                    ToolsAdmin._Node.changePivot(Mask2, Mask2.width / 2, Mask2.height / 2);\r\n                    ToolsAdmin._Node.changePivot(sp2, index * sp2.width / _num + sp2.width / _num / 2, sp2.height / 2);\r\n                    Mask2.rotation = 15;\r\n                }\r\n            }\r\n            _shutters._sidelingIntersection = _sidelingIntersection;\r\n            function _randomCroAndVer(Scene, open) {\r\n                const index = ToolsAdmin._Array.randomGetOne([0, 1, 2]);\r\n                switch (index) {\r\n                    case 0:\r\n                        _crosswise(Scene, open);\r\n                        break;\r\n                    case 1:\r\n                        _vertical(Scene, open);\r\n                        break;\r\n                    case 2:\r\n                        _croAndVer(Scene, open);\r\n                        break;\r\n                    default:\r\n                        _crosswise(Scene, open);\r\n                        break;\r\n                }\r\n            }\r\n            _shutters._randomCroAndVer = _randomCroAndVer;\r\n            function _random(Scene, open) {\r\n                const index = ToolsAdmin._Array.randomGetOne([0, 1, 2, 3, 4, 5]);\r\n                switch (index) {\r\n                    case 0:\r\n                        _crosswise(Scene, open);\r\n                        break;\r\n                    case 1:\r\n                        _vertical(Scene, open);\r\n                        break;\r\n                    case 2:\r\n                        _croAndVer(Scene, open);\r\n                        break;\r\n                    case 3:\r\n                        _sidelingIntersection(Scene, open);\r\n                        break;\r\n                    case 4:\r\n                        _lSideling(Scene, open);\r\n                        break;\r\n                    case 5:\r\n                        _rSideling(Scene, open);\r\n                        break;\r\n                    default:\r\n                        _crosswise(Scene, open);\r\n                        break;\r\n                }\r\n            }\r\n            _shutters._random = _random;\r\n            class Close {\r\n                static _paly(type, Scene) {\r\n                    TimerAdmin._once(_delay, this, () => {\r\n                        _shutters[`_${type}`](Scene, false);\r\n                        Scene.visible = false;\r\n                    });\r\n                    SceneAniAdmin._closeAniDelay = _delay;\r\n                    SceneAniAdmin._closeAniTime = _time;\r\n                    return _time + _delay;\r\n                }\r\n                ;\r\n            }\r\n            Close._type = {\r\n                crosswise: 'crosswise',\r\n                vertical: 'vertical',\r\n                croAndVer: 'croAndVer',\r\n                rSideling: 'rSideling',\r\n                sidelingIntersection: 'sidelingIntersection',\r\n                randomCroAndVer: 'randomCroAndVer',\r\n                random: 'random',\r\n            };\r\n            _shutters.Close = Close;\r\n            class Open {\r\n                static _paly(type, Scene) {\r\n                    TimerAdmin._once(_delay, this, () => {\r\n                        _shutters[`_${type}`](Scene, true);\r\n                        Scene.visible = false;\r\n                        TimerAdmin._once(_time, this, () => {\r\n                            Scene.visible = true;\r\n                        });\r\n                    });\r\n                    return _time + _delay;\r\n                }\r\n                ;\r\n            }\r\n            Open._type = {\r\n                crosswise: 'crosswise',\r\n                vertical: 'vertical',\r\n                croAndVer: 'croAndVer',\r\n                _sidelingIntersection: '_sidelingIntersection',\r\n                randomCroAndVer: 'randomCroAndVer',\r\n                random: 'random',\r\n            };\r\n            _shutters.Open = Open;\r\n        })(_shutters = SceneAniAdmin._shutters || (SceneAniAdmin._shutters = {}));\r\n        let _stickIn;\r\n        (function (_stickIn_1) {\r\n            function _stickIn(Scene, type) {\r\n                let sumDelay = 0;\r\n                let time = 700;\r\n                let delay = 100;\r\n                if (Scene.getChildByName('Background')) {\r\n                    Ani2DAdmin.fadeOut(Scene.getChildByName('Background'), 0, 1, time);\r\n                }\r\n                let stickInLeftArr = ToolsAdmin._Node.childZOrderByY(Scene, false);\r\n                for (let index = 0; index < stickInLeftArr.length; index++) {\r\n                    const element = stickInLeftArr[index];\r\n                    if (element.name !== 'Background' && element.name.substr(0, 5) !== 'NoAni') {\r\n                        let originalPovitX = element.pivotX;\r\n                        let originalPovitY = element.pivotY;\r\n                        let originalX = element.x;\r\n                        let originalY = element.y;\r\n                        element.x = element.pivotX > element.width / 2 ? 800 + element.width : -800 - element.width;\r\n                        element.y = element.rotation > 0 ? element.y + 200 : element.y - 200;\r\n                        Ani2DAdmin.rotate(element, 0, time, delay * index);\r\n                        Ani2DAdmin.move(element, originalX, originalY, time, () => {\r\n                            ToolsAdmin._Node.changePivot(element, originalPovitX, originalPovitY);\r\n                        }, delay * index);\r\n                    }\r\n                }\r\n                sumDelay = Scene.numChildren * delay + time + 200;\r\n                return sumDelay;\r\n            }\r\n        })(_stickIn = SceneAniAdmin._stickIn || (SceneAniAdmin._stickIn = {}));\r\n    })(SceneAniAdmin = Lwg.SceneAniAdmin || (Lwg.SceneAniAdmin = {}));\r\n    let StorageAdmin;\r\n    (function (StorageAdmin) {\r\n        class admin {\r\n            removeSelf() { }\r\n            func() { }\r\n        }\r\n        class _NumVariable extends admin {\r\n            get value() { return; }\r\n            ;\r\n            set value(val) { }\r\n        }\r\n        StorageAdmin._NumVariable = _NumVariable;\r\n        class _StrVariable extends admin {\r\n            get value() { return; }\r\n            set value(val) { }\r\n        }\r\n        StorageAdmin._StrVariable = _StrVariable;\r\n        class _BoolVariable extends admin {\r\n            get value() { return; }\r\n            set value(val) { }\r\n        }\r\n        StorageAdmin._BoolVariable = _BoolVariable;\r\n        class _ArrayVariable extends admin {\r\n            get value() { return; }\r\n            set value(val) { }\r\n        }\r\n        StorageAdmin._ArrayVariable = _ArrayVariable;\r\n        class _ArrayArrVariable extends admin {\r\n            get value() { return; }\r\n            set value(val) { }\r\n        }\r\n        StorageAdmin._ArrayArrVariable = _ArrayArrVariable;\r\n        class _Object extends admin {\r\n            get value() { return; }\r\n            set value(val) { }\r\n        }\r\n        StorageAdmin._Object = _Object;\r\n        function _num(name, _func, initial) {\r\n            if (!this[`_num${name}`]) {\r\n                this[`_num${name}`] = {\r\n                    get value() {\r\n                        if (Laya.LocalStorage.getItem(name)) {\r\n                            return Number(Laya.LocalStorage.getItem(name));\r\n                        }\r\n                        else {\r\n                            initial = initial ? initial : 0;\r\n                            Laya.LocalStorage.setItem(name, initial.toString());\r\n                            return initial;\r\n                        }\r\n                    },\r\n                    set value(data) {\r\n                        Laya.LocalStorage.setItem(name, data.toString());\r\n                        this['func']();\r\n                    },\r\n                    removeSelf() {\r\n                        Laya.LocalStorage.removeItem(name);\r\n                    },\r\n                    func() {\r\n                        this['_func'] && this['_func']();\r\n                    }\r\n                };\r\n            }\r\n            if (_func) {\r\n                this[`_num${name}`]['_func'] = _func;\r\n            }\r\n            return this[`_num${name}`];\r\n        }\r\n        StorageAdmin._num = _num;\r\n        function _str(name, _func, initial) {\r\n            if (!this[`_str${name}`]) {\r\n                this[`_str${name}`] = {\r\n                    get value() {\r\n                        if (Laya.LocalStorage.getItem(name)) {\r\n                            return Laya.LocalStorage.getItem(name);\r\n                        }\r\n                        else {\r\n                            initial = initial ? initial : null;\r\n                            Laya.LocalStorage.setItem(name, initial.toString());\r\n                            return initial;\r\n                        }\r\n                    },\r\n                    set value(data) {\r\n                        Laya.LocalStorage.setItem(name, data.toString());\r\n                        this['func']();\r\n                    },\r\n                    removeSelf() {\r\n                        Laya.LocalStorage.removeItem(name);\r\n                    },\r\n                    func() {\r\n                        _func && _func();\r\n                    }\r\n                };\r\n            }\r\n            if (_func) {\r\n                this[`_str${name}`]['_func'] = _func;\r\n            }\r\n            return this[`_str${name}`];\r\n        }\r\n        StorageAdmin._str = _str;\r\n        function _bool(name, _func, initial) {\r\n            if (!this[`_bool${name}`]) {\r\n                this[`_bool${name}`] = {\r\n                    get value() {\r\n                        if (Laya.LocalStorage.getItem(name)) {\r\n                            if (Laya.LocalStorage.getItem(name) === \"false\") {\r\n                                return false;\r\n                            }\r\n                            else if (Laya.LocalStorage.getItem(name) === \"true\") {\r\n                                return true;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (initial) {\r\n                                Laya.LocalStorage.setItem(name, \"true\");\r\n                            }\r\n                            else {\r\n                                Laya.LocalStorage.setItem(name, \"false\");\r\n                            }\r\n                            this['func']();\r\n                            return initial;\r\n                        }\r\n                    },\r\n                    set value(bool) {\r\n                        bool = bool ? \"true\" : \"false\";\r\n                        Laya.LocalStorage.setItem(name, bool.toString());\r\n                    },\r\n                    removeSelf() {\r\n                        Laya.LocalStorage.removeItem(name);\r\n                    },\r\n                    func() {\r\n                        _func && _func();\r\n                    }\r\n                };\r\n            }\r\n            if (_func) {\r\n                this[`_bool${name}`]['_func'] = _func;\r\n            }\r\n            return this[`_bool${name}`];\r\n        }\r\n        StorageAdmin._bool = _bool;\r\n        function _array(name, _func, initial) {\r\n            if (!this[`_array${name}`]) {\r\n                this[`_array${name}`] = {\r\n                    get value() {\r\n                        try {\r\n                            let data = Laya.LocalStorage.getJSON(name);\r\n                            if (data) {\r\n                                return JSON.parse(data);\r\n                            }\r\n                            else {\r\n                                initial = initial ? initial : [];\r\n                                Laya.LocalStorage.setJSON(name, JSON.stringify(initial));\r\n                                this['func']();\r\n                                return initial;\r\n                            }\r\n                        }\r\n                        catch (error) {\r\n                            return [];\r\n                        }\r\n                    },\r\n                    set value(array) {\r\n                        Laya.LocalStorage.setJSON(name, JSON.stringify(array));\r\n                    },\r\n                    removeSelf() {\r\n                        Laya.LocalStorage.removeItem(name);\r\n                    },\r\n                    func() {\r\n                        _func && _func();\r\n                    }\r\n                };\r\n            }\r\n            if (_func) {\r\n                this[`_array${name}`]['_func'] = _func;\r\n            }\r\n            return this[`_array${name}`];\r\n        }\r\n        StorageAdmin._array = _array;\r\n        function _obj(name, _func, initial) {\r\n            if (!this[`_obj${name}`]) {\r\n                this[`_obj${name}`] = {\r\n                    get value() {\r\n                        try {\r\n                            let data = Laya.LocalStorage.getJSON(name);\r\n                            if (data) {\r\n                                return JSON.parse(data);\r\n                            }\r\n                            else {\r\n                                initial = initial ? initial : {};\r\n                                Laya.LocalStorage.setJSON(name, JSON.stringify(initial));\r\n                                this['func']();\r\n                                return initial;\r\n                            }\r\n                        }\r\n                        catch (error) {\r\n                            return {};\r\n                        }\r\n                    },\r\n                    set value(array) {\r\n                        Laya.LocalStorage.setJSON(name, JSON.stringify(array));\r\n                    },\r\n                    removeSelf() {\r\n                        Laya.LocalStorage.removeItem(name);\r\n                    },\r\n                    func() {\r\n                        _func && _func();\r\n                    }\r\n                };\r\n            }\r\n            if (_func) {\r\n                this[`_obj${name}`]['_func'] = _func;\r\n            }\r\n            return this[`_obj${name}`];\r\n        }\r\n        StorageAdmin._obj = _obj;\r\n        function _arrayArr(name, _func, initial) {\r\n            if (!this[`_arrayArr${name}`]) {\r\n                this[`_arrayArr${name}`] = {\r\n                    get value() {\r\n                        try {\r\n                            let data = Laya.LocalStorage.getJSON(name);\r\n                            if (data) {\r\n                                return JSON.parse(data);\r\n                                ;\r\n                            }\r\n                            else {\r\n                                initial = initial ? initial : [];\r\n                                Laya.LocalStorage.setItem(name, initial.toString());\r\n                                return initial;\r\n                            }\r\n                        }\r\n                        catch (error) {\r\n                            return [];\r\n                        }\r\n                    },\r\n                    set value(array) {\r\n                        Laya.LocalStorage.setJSON(name, JSON.stringify(array));\r\n                        this['func']();\r\n                    },\r\n                    removeSelf() {\r\n                        Laya.LocalStorage.removeItem(name);\r\n                    },\r\n                    func() {\r\n                        _func && _func();\r\n                    }\r\n                };\r\n            }\r\n            if (_func) {\r\n                this[`_arrayArr${name}`]['_func'] = _func;\r\n            }\r\n            return this[`_arrayArr${name}`];\r\n        }\r\n        StorageAdmin._arrayArr = _arrayArr;\r\n    })(StorageAdmin = Lwg.StorageAdmin || (Lwg.StorageAdmin = {}));\r\n    let DataAdmin;\r\n    (function (DataAdmin) {\r\n        class _Item extends SceneAdmin._ObjectBase {\r\n            constructor() {\r\n                super(...arguments);\r\n                this.$unlockWayType = {\r\n                    $ads: 'ads',\r\n                    $gold: 'gold',\r\n                    $diamond: 'diamond',\r\n                    $customs: 'customs',\r\n                    $check: 'check',\r\n                    $free: 'free',\r\n                };\r\n            }\r\n            get $name() { return this.$data['name']; }\r\n            ;\r\n            get $serial() { return this.$data['serial']; }\r\n            ;\r\n            get $sort() { return this.$data['sort']; }\r\n            ;\r\n            get $chName() { return this.$data['chName']; }\r\n            ;\r\n            get $classify() { return this.$data['classify']; }\r\n            ;\r\n            get $unlockWay() { return this.$data['unlockWay']; }\r\n            ;\r\n            get $otherUnlockWay() { return this.$data['otherUnlockWay']; }\r\n            ;\r\n            get $conditionNum() { return this.$data['conditionNum']; }\r\n            ;\r\n            get $otherConditionNum() { return this.$data['otherConditionNum']; }\r\n            ;\r\n            get $degreeNum() { return this.$data['degreeNum']; }\r\n            ;\r\n            get $otherDegreeNum() { return this.$data['otherDegreeNum']; }\r\n            ;\r\n            get $rewardType() { return this.$data['rewardType']; }\r\n            ;\r\n            get $otherRewardType() { return this.$data['otherRewardType']; }\r\n            ;\r\n            get $complete() { return this.$data['complete']; }\r\n            ;\r\n            get $otherComplete() { return this.$data['otherComplete']; }\r\n            ;\r\n            get $getAward() { return this.$data['getAward']; }\r\n            ;\r\n            get $otherGetAward() { return this.$data['otherGetAward']; }\r\n            ;\r\n            get $pitch() { return this.$data['pitch']; }\r\n            ;\r\n            get $data() {\r\n                if (!this['item/dataSource']) {\r\n                    console.log('data没有赋值！也可能是数据延时！');\r\n                }\r\n                return this['item/dataSource'] ? this['item/dataSource'] : {};\r\n            }\r\n            set $data(data) { this['item/dataSource'] = data; }\r\n            get $dataIndex() { return this['item/dataIndex']; }\r\n            set $dataIndex(_dataIndex) { this['item/dataIndex'] = _dataIndex; }\r\n            get $dataArrName() { return this['item/dataArrName']; }\r\n            set $dataArrName(name) {\r\n                this['item/dataArrName'] = name;\r\n            }\r\n            $render() { }\r\n            ;\r\n            $button() { }\r\n            ;\r\n            $awake() { }\r\n            ;\r\n            lwgOnAwake() {\r\n                this.$awake();\r\n                this.$button();\r\n            }\r\n        }\r\n        DataAdmin._Item = _Item;\r\n        class _Table {\r\n            constructor(tableName, _tableArr, localStorage, lastVtableName, lastProArr) {\r\n                this._property = {\r\n                    $name: 'name',\r\n                    $serial: 'serial',\r\n                    $sort: 'sort',\r\n                    $chName: 'chName',\r\n                    $classify: 'classify',\r\n                    $unlockWay: 'unlockWay',\r\n                    $otherUnlockWay: 'otherUnlockWay',\r\n                    $conditionNum: 'conditionNum',\r\n                    $otherConditionNum: 'otherConditionNum',\r\n                    $degreeNum: 'degreeNum',\r\n                    $otherDegreeNum: 'otherDegreeNum',\r\n                    $rewardType: 'otherGetAward',\r\n                    $otherRewardType: 'otherRewardType',\r\n                    $complete: 'complete',\r\n                    $otherComplete: 'otherComplete',\r\n                    $getAward: 'getAward',\r\n                    $otherGetAward: 'otherGetAward',\r\n                    $pitch: 'pitch',\r\n                };\r\n                this._unlockWay = {\r\n                    $free: 'free',\r\n                    $gold: 'gold',\r\n                    $diamond: 'diamond',\r\n                    $ads: 'ads',\r\n                    $customs: 'customs',\r\n                    $check: 'check',\r\n                };\r\n                this._tableName = 'name';\r\n                this._lastArr = [];\r\n                this._localStorage = false;\r\n                if (tableName) {\r\n                    this._tableName = tableName;\r\n                    if (localStorage) {\r\n                        this._localStorage = localStorage;\r\n                        this._arr = addCompare(_tableArr, tableName, this._property.$name);\r\n                        if (lastVtableName) {\r\n                            if (lastProArr) {\r\n                                this._compareLastInforByPro(lastVtableName, lastProArr);\r\n                            }\r\n                            else {\r\n                                this._compareLastDefaultPro(lastVtableName);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        this._arr = _tableArr;\r\n                    }\r\n                }\r\n            }\r\n            get _arr() {\r\n                return this[`_${this._tableName}arr`];\r\n            }\r\n            set _arr(arr) {\r\n                this[`_${this._tableName}arr`] = arr;\r\n                Laya.LocalStorage.setJSON(this._tableName, JSON.stringify(this[`_${this._tableName}arr`]));\r\n            }\r\n            get _List() {\r\n                return this[`${this._tableName}_List`];\r\n            }\r\n            set _List(list) {\r\n                this[`${this._tableName}_List`] = list;\r\n                list.array = this._arr;\r\n                list.selectEnable = false;\r\n                list.vScrollBarSkin = \"\";\r\n                list.renderHandler = new Laya.Handler(this, (cell, index) => {\r\n                    if (this._listRenderScript) {\r\n                        let _item = cell.getComponent(this._listRenderScript);\r\n                        if (!_item) {\r\n                            _item = cell.addComponent(this._listRenderScript);\r\n                        }\r\n                        _item.$dataArrName = this._tableName;\r\n                        _item.$dataIndex = index;\r\n                        _item.$data = this._listArray[index];\r\n                        _item.$render();\r\n                    }\r\n                    this._listRender && this._listRender(cell, index);\r\n                });\r\n                list.selectHandler = new Laya.Handler(this, (index) => {\r\n                    this._listSelect && this._listSelect(index);\r\n                });\r\n            }\r\n            get _listArray() {\r\n                return this._List.array;\r\n            }\r\n            set _listArray(arr) {\r\n                this._List.array = arr;\r\n                this._List.scrollTo(0);\r\n                this._refreshAndStorage();\r\n            }\r\n            _refreshAndStorage() {\r\n                if (this._localStorage) {\r\n                    Laya.LocalStorage.setJSON(this._tableName, JSON.stringify(this._arr));\r\n                }\r\n                if (this._List) {\r\n                    this._List.refresh();\r\n                }\r\n            }\r\n            _compareLastInforByPro(lastVtableName, proArr) {\r\n                this._lastArr = this._getlastVersion(lastVtableName);\r\n                for (let index = 0; index < this._lastArr.length; index++) {\r\n                    const elementLast = this._lastArr[index];\r\n                    for (let index = 0; index < this._arr.length; index++) {\r\n                        const element = this._arr[index];\r\n                        if (elementLast[this._property.$name] === element[this._property.$name]) {\r\n                            for (let index = 0; index < proArr.length; index++) {\r\n                                const proName = proArr[index];\r\n                                element[proName] = elementLast[proName];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                this._refreshAndStorage();\r\n            }\r\n            _compareLastDefaultPro(lastVtableName) {\r\n                this._lastArr = this._getlastVersion(lastVtableName);\r\n                if (this._lastArr.length > 0) {\r\n                    for (let i = 0; i < this._lastArr.length; i++) {\r\n                        const _lastelement = this._lastArr[i];\r\n                        for (let j = 0; j < this._arr.length; j++) {\r\n                            const element = this._arr[j];\r\n                            if (_lastelement[this._property.$complete]) {\r\n                                element[this._property.$complete] = true;\r\n                            }\r\n                            if (_lastelement[this._property.$getAward]) {\r\n                                element[this._property.$getAward] = true;\r\n                            }\r\n                            if (_lastelement[this._property.$degreeNum] > element[this._property.$degreeNum]) {\r\n                                element[this._property.$getAward] = _lastelement[this._property.$degreeNum];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                this._refreshAndStorage();\r\n            }\r\n            _getlastVersion(lastVtableName) {\r\n                let dataArr = [];\r\n                try {\r\n                    if (Laya.LocalStorage.getJSON(lastVtableName)) {\r\n                        dataArr = JSON.parse(Laya.LocalStorage.getJSON(lastVtableName));\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    console.log(lastVtableName + '前版本不存在！');\r\n                }\r\n                return dataArr;\r\n            }\r\n            _getProperty(name, pro) {\r\n                let value;\r\n                for (const key in this._arr) {\r\n                    if (Object.prototype.hasOwnProperty.call(this._arr, key)) {\r\n                        const element = this._arr[key];\r\n                        if (element[this._property.$name] == name) {\r\n                            value = element[pro];\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return value;\r\n            }\r\n            ;\r\n            _geConditionNumByName(name, pro) {\r\n                let value;\r\n                for (const key in this._arr) {\r\n                    if (Object.prototype.hasOwnProperty.call(this._arr, key)) {\r\n                        const element = this._arr[key];\r\n                        if (element[this._property.$name] == name) {\r\n                            value = element[this._property.$conditionNum];\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return value;\r\n            }\r\n            ;\r\n            _getPitchIndexArr() {\r\n                for (let index = 0; index < this._arr.length; index++) {\r\n                    const element = this._arr[index];\r\n                    if (element[this._property.$name] === this._pitchName) {\r\n                        return index;\r\n                    }\r\n                }\r\n            }\r\n            _getPitchIndexByList() {\r\n                if (this._List) {\r\n                    for (let index = 0; index < this._List.array.length; index++) {\r\n                        const element = this._List.array[index];\r\n                        if (element[this._property.$name] === this._pitchName) {\r\n                            return index;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            _listTweenToPitch(time, func) {\r\n                const index = this._getPitchIndexByList();\r\n                index && this._List.tweenTo(index, time, Laya.Handler.create(this, () => {\r\n                    func && func();\r\n                }));\r\n            }\r\n            _listTweenToPitchChoose(diffIndex, time, func) {\r\n                const index = this._getPitchIndexByList();\r\n                index && this._List.tweenTo(index + diffIndex, time, Laya.Handler.create(this, () => {\r\n                    func && func();\r\n                }));\r\n            }\r\n            _listScrollToLast() {\r\n                const index = this._List.array.length - 1;\r\n                index && this._List.scrollTo(index);\r\n            }\r\n            _setProperty(name, pro, value) {\r\n                for (const key in this._arr) {\r\n                    if (Object.prototype.hasOwnProperty.call(this._arr, key)) {\r\n                        const element = this._arr[key];\r\n                        if (element[this._property.$name] == name) {\r\n                            element[pro] = value;\r\n                            this._refreshAndStorage();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return value;\r\n            }\r\n            ;\r\n            _setCompleteByName(name) {\r\n                for (const key in this._arr) {\r\n                    if (Object.prototype.hasOwnProperty.call(this._arr, key)) {\r\n                        const element = this._arr[key];\r\n                        if (element[this._property.$name] == name) {\r\n                            element[this._property.$complete] = true;\r\n                            this._refreshAndStorage();\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            ;\r\n            _setCompleteByNameArr(nameArr) {\r\n                for (let index = 0; index < this._arr.length; index++) {\r\n                    const element = this._arr[index];\r\n                    for (let index = 0; index < nameArr.length; index++) {\r\n                        const name = nameArr[index];\r\n                        if (element[this._property.$name] === name) {\r\n                            element[this._property.$complete] = true;\r\n                        }\r\n                    }\r\n                }\r\n                this._refreshAndStorage();\r\n            }\r\n            ;\r\n            _getObjByName(name) {\r\n                let obj = null;\r\n                for (const key in this._arr) {\r\n                    if (Object.prototype.hasOwnProperty.call(this._arr, key)) {\r\n                        const element = this._arr[key];\r\n                        if (element[this._property.$name] == name) {\r\n                            obj = element;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return obj;\r\n            }\r\n            _setProSoleByClassify(name, pro, value) {\r\n                const obj = this._getObjByName(name);\r\n                const objArr = this._getArrByClassify(obj[this._property.$classify]);\r\n                for (const key in objArr) {\r\n                    if (Object.prototype.hasOwnProperty.call(objArr, key)) {\r\n                        const element = objArr[key];\r\n                        if (element[this._property.$name] == name) {\r\n                            element[pro] = value;\r\n                        }\r\n                        else {\r\n                            element[pro] = !value;\r\n                        }\r\n                    }\r\n                }\r\n                this._refreshAndStorage();\r\n            }\r\n            _setAllProPerty(pro, value) {\r\n                for (let index = 0; index < this._arr.length; index++) {\r\n                    const element = this._arr[index];\r\n                    element[pro] = value;\r\n                }\r\n                this._refreshAndStorage();\r\n            }\r\n            _setAllComplete() {\r\n                this._setAllProPerty(this._property.$complete, true);\r\n                this._refreshAndStorage();\r\n            }\r\n            _setCompleteName(name) {\r\n                this._setProperty(name, this._property.$complete, true);\r\n                this._refreshAndStorage();\r\n            }\r\n            _setOtherCompleteName(name) {\r\n                this._setProperty(name, this._property.$otherComplete, true);\r\n                this._refreshAndStorage();\r\n            }\r\n            _setAllCompleteDelay(delay, eachFrontFunc, eachEndFunc, comFunc) {\r\n                for (let index = 0; index < this._arr.length; index++) {\r\n                    TimerAdmin._once(delay * index, this, () => {\r\n                        const element = this._arr[index];\r\n                        eachFrontFunc && eachFrontFunc(element[this._property.$complete]);\r\n                        element[this._property.$complete] = true;\r\n                        eachEndFunc && eachEndFunc();\r\n                        if (index === this._arr.length - 1) {\r\n                            comFunc && comFunc();\r\n                        }\r\n                        this._refreshAndStorage();\r\n                    });\r\n                }\r\n            }\r\n            _setAllOtherComplete() {\r\n                this._setAllProPerty(this._property.$otherComplete, true);\r\n                this._refreshAndStorage();\r\n            }\r\n            _setAllOtherCompleteDelay(delay, eachFrontFunc, eachEndFunc, comFunc) {\r\n                for (let index = 0; index < this._arr.length; index++) {\r\n                    TimerAdmin._once(delay * index, this, () => {\r\n                        const element = this._arr[index];\r\n                        eachFrontFunc && eachFrontFunc(element[this._property.$otherComplete]);\r\n                        element[this._property.$otherComplete] = true;\r\n                        eachEndFunc && eachEndFunc();\r\n                        if (index === this._arr.length - 1) {\r\n                            comFunc && comFunc();\r\n                        }\r\n                        this._refreshAndStorage();\r\n                    });\r\n                }\r\n            }\r\n            _addProValueForAll(pro, valueFunc) {\r\n                for (let index = 0; index < this._arr.length; index++) {\r\n                    const element = this._arr[index];\r\n                    element[pro] += valueFunc();\r\n                }\r\n                this._refreshAndStorage();\r\n            }\r\n            _setPitchProperty(pro, value) {\r\n                const obj = this._getPitchObj();\r\n                obj[pro] = value;\r\n                this._refreshAndStorage();\r\n                return value;\r\n            }\r\n            ;\r\n            _getPitchProperty(pro) {\r\n                const obj = this._getPitchObj();\r\n                return obj[pro];\r\n            }\r\n            ;\r\n            _randomOneObjByPro(proName, value) {\r\n                let arr = [];\r\n                for (const key in this._arr) {\r\n                    if (Object.prototype.hasOwnProperty.call(this._arr, key)) {\r\n                        const element = this._arr[key];\r\n                        if (value) {\r\n                            if (element[proName] && element[proName] == value) {\r\n                                arr.push(element);\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (element[proName]) {\r\n                                arr.push(element);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (arr.length == 0) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    let any = ToolsAdmin._Array.randomGetOne(arr);\r\n                    return any;\r\n                }\r\n            }\r\n            _randomOneObj() {\r\n                const index = ToolsAdmin._Number.randomOneBySection(0, this._arr.length - 1, true);\r\n                return this._arr[index];\r\n            }\r\n            _randomCountObj(count) {\r\n                const indexArr = ToolsAdmin._Number.randomCountBySection(0, this._arr.length - 1, count, true);\r\n                const arr = [];\r\n                for (let i = 0; i < this._arr.length; i++) {\r\n                    for (let j = 0; j < indexArr.length; j++) {\r\n                        if (i === indexArr[j]) {\r\n                            arr.push(this._arr[i]);\r\n                        }\r\n                    }\r\n                }\r\n                return arr;\r\n            }\r\n            _getArrByClassify(classify) {\r\n                let arr = [];\r\n                for (const key in this._arr) {\r\n                    if (Object.prototype.hasOwnProperty.call(this._arr, key)) {\r\n                        const element = this._arr[key];\r\n                        if (element[this._property.$classify] == classify) {\r\n                            arr.push(element);\r\n                        }\r\n                    }\r\n                }\r\n                return arr;\r\n            }\r\n            _getArrByUnlockWay(_unlockWay) {\r\n                let arr = [];\r\n                for (const key in this._arr) {\r\n                    if (Object.prototype.hasOwnProperty.call(this._arr, key)) {\r\n                        const element = this._arr[key];\r\n                        if (element[this._property.$unlockWay] === _unlockWay) {\r\n                            arr.push(element);\r\n                        }\r\n                    }\r\n                }\r\n                return arr;\r\n            }\r\n            _getArrByPitchClassify() {\r\n                let arr = [];\r\n                for (const key in this._arr) {\r\n                    if (Object.prototype.hasOwnProperty.call(this._arr, key)) {\r\n                        const element = this._arr[key];\r\n                        if (element[this._property.$classify] == this._pitchClassify) {\r\n                            arr.push(element);\r\n                        }\r\n                    }\r\n                }\r\n                return arr;\r\n            }\r\n            _getArrByProperty(proName, value) {\r\n                let arr = [];\r\n                for (const key in this._arr) {\r\n                    if (Object.prototype.hasOwnProperty.call(this._arr, key)) {\r\n                        const element = this._arr[key];\r\n                        if (element[proName] && element[proName] == value) {\r\n                            arr.push(element);\r\n                        }\r\n                    }\r\n                }\r\n                return arr;\r\n            }\r\n            _getPitchClassfiyName() {\r\n                const obj = this._getObjByName(this._pitchName);\r\n                return obj[this._property.$classify];\r\n            }\r\n            _getArrByNoProperty(proName, value) {\r\n                let arr = [];\r\n                for (const key in this._arr) {\r\n                    if (Object.prototype.hasOwnProperty.call(this._arr, key)) {\r\n                        const element = this._arr[key];\r\n                        if (element[proName] && element[proName] !== value) {\r\n                            arr.push(element);\r\n                        }\r\n                    }\r\n                }\r\n                return arr;\r\n            }\r\n            _setArrByPropertyName(proName, value) {\r\n                let arr = [];\r\n                for (const key in this._arr) {\r\n                    if (Object.prototype.hasOwnProperty.call(this._arr, key)) {\r\n                        const element = this._arr[key];\r\n                        if (element[proName]) {\r\n                            element[proName] == value;\r\n                            arr.push(element);\r\n                        }\r\n                    }\r\n                }\r\n                this._refreshAndStorage();\r\n                return arr;\r\n            }\r\n            _setPropertyByClassify(classify, pro, value) {\r\n                const arr = this._getArrByClassify(classify);\r\n                for (const key in arr) {\r\n                    if (Object.prototype.hasOwnProperty.call(arr, key)) {\r\n                        const element = arr[key];\r\n                        element[pro] = value;\r\n                    }\r\n                }\r\n                this._refreshAndStorage();\r\n                return arr;\r\n            }\r\n            _setCompleteByClassify(classify) {\r\n                let arr = this._getArrByClassify(classify);\r\n                for (const key in arr) {\r\n                    if (Object.prototype.hasOwnProperty.call(arr, key)) {\r\n                        const element = arr[key];\r\n                        element[this._property.$complete] = true;\r\n                    }\r\n                }\r\n                this._refreshAndStorage();\r\n                return arr;\r\n            }\r\n            _checkCondition(name, number, func) {\r\n                let com = null;\r\n                number = number == undefined ? 1 : number;\r\n                let degreeNum = this._getProperty(name, this._property.$degreeNum);\r\n                let condition = this._getProperty(name, this._property.$conditionNum);\r\n                let complete = this._getProperty(name, this._property.$complete);\r\n                if (!complete) {\r\n                    if (condition <= degreeNum + number) {\r\n                        this._setProperty(name, this._property.$degreeNum, condition);\r\n                        this._setProperty(name, this._property.$complete, true);\r\n                        com = true;\r\n                    }\r\n                    else {\r\n                        this._setProperty(name, this._property.$degreeNum, degreeNum + number);\r\n                        com = false;\r\n                    }\r\n                }\r\n                else {\r\n                    com = -1;\r\n                }\r\n                if (func) {\r\n                    func();\r\n                }\r\n                return com;\r\n            }\r\n            _checkConditionUnlockWay(_unlockWay, num) {\r\n                let arr = [];\r\n                for (const key in this._arr) {\r\n                    if (Object.prototype.hasOwnProperty.call(this._arr, key)) {\r\n                        const element = this._arr[key];\r\n                        if (element[this._property.$unlockWay] === _unlockWay) {\r\n                            this._checkCondition(element[this._property.$name], num ? num : 1);\r\n                        }\r\n                    }\r\n                }\r\n                return arr;\r\n            }\r\n            _checkAllCompelet() {\r\n                let bool = true;\r\n                for (let index = 0; index < this._arr.length; index++) {\r\n                    const element = this._arr[index];\r\n                    if (!element[this._property.$complete]) {\r\n                        bool = false;\r\n                        return bool;\r\n                    }\r\n                }\r\n                return bool;\r\n            }\r\n            get _pitchClassify() {\r\n                if (!this[`${this._tableName}/pitchClassify`]) {\r\n                    if (this._localStorage) {\r\n                        return Laya.LocalStorage.getItem(`${this._tableName}/pitchClassify`) ? Laya.LocalStorage.getItem(`${this._tableName}/pitchClassify`) : null;\r\n                    }\r\n                    else {\r\n                        return this[`${this._tableName}/pitchClassify`] = null;\r\n                    }\r\n                }\r\n                else {\r\n                    return this[`${this._tableName}/pitchClassify`];\r\n                }\r\n            }\r\n            ;\r\n            set _pitchClassify(str) {\r\n                this._lastPitchClassify = this[`${this._tableName}/pitchClassify`] ? this[`${this._tableName}/pitchClassify`] : null;\r\n                this[`${this._tableName}/pitchClassify`] = str;\r\n                if (this._localStorage) {\r\n                    Laya.LocalStorage.setItem(`${this._tableName}/pitchClassify`, str.toString());\r\n                }\r\n                this._refreshAndStorage();\r\n            }\r\n            ;\r\n            get _pitchName() {\r\n                if (!this[`${this._tableName}/_pitchName`]) {\r\n                    if (this._localStorage) {\r\n                        return Laya.LocalStorage.getItem(`${this._tableName}/_pitchName`) ? Laya.LocalStorage.getItem(`${this._tableName}/_pitchName`) : null;\r\n                    }\r\n                    else {\r\n                        return this[`${this._tableName}/_pitchName`] = null;\r\n                    }\r\n                }\r\n                else {\r\n                    return this[`${this._tableName}/_pitchName`];\r\n                }\r\n            }\r\n            ;\r\n            set _pitchName(str) {\r\n                this._lastPitchName = this[`${this._tableName}/_pitchName`];\r\n                this[`${this._tableName}/_pitchName`] = str;\r\n                if (this._localStorage) {\r\n                    Laya.LocalStorage.setItem(`${this._tableName}/_pitchName`, str.toString());\r\n                }\r\n                this._refreshAndStorage();\r\n            }\r\n            ;\r\n            get _lastPitchClassify() {\r\n                if (!this[`${this._tableName}/_lastPitchClassify`]) {\r\n                    if (this._localStorage) {\r\n                        return Laya.LocalStorage.getItem(`${this._tableName}/_lastPitchClassify`) ? Laya.LocalStorage.getItem(`${this._tableName}/_lastPitchClassify`) : null;\r\n                    }\r\n                    else {\r\n                        return this[`${this._tableName}/_lastPitchClassify`] = null;\r\n                    }\r\n                }\r\n                else {\r\n                    return this[`${this._tableName}/_lastPitchClassify`];\r\n                }\r\n            }\r\n            ;\r\n            set _lastPitchClassify(str) {\r\n                this[`${this._tableName}/_lastPitchClassify`] = str;\r\n                if (this._localStorage && str) {\r\n                    Laya.LocalStorage.setItem(`${this._tableName}/_lastPitchClassify`, str.toString());\r\n                }\r\n            }\r\n            ;\r\n            get _lastPitchName() {\r\n                if (!this[`${this._tableName}/_lastPitchName`]) {\r\n                    if (this._localStorage) {\r\n                        return Laya.LocalStorage.getItem(`${this._tableName}/_lastPitchName`) ? Laya.LocalStorage.getItem(`${this._tableName}/_lastPitchName`) : null;\r\n                    }\r\n                    else {\r\n                        return this[`${this._tableName}/_lastPitchName`] = null;\r\n                    }\r\n                }\r\n                else {\r\n                    return this[`${this._tableName}/_lastPitchName`];\r\n                }\r\n            }\r\n            set _lastPitchName(str) {\r\n                this[`${this._tableName}/_lastPitchName`] = str;\r\n                if (this._localStorage && str) {\r\n                    Laya.LocalStorage.setItem(`${this._tableName}/_lastPitchName`, str.toString());\r\n                }\r\n            }\r\n            ;\r\n            _setPitch(name) {\r\n                let _calssify;\r\n                for (let index = 0; index < this._arr.length; index++) {\r\n                    const element = this._arr[index];\r\n                    if (element[this._property.$name] == name) {\r\n                        element[this._property.$pitch] = true;\r\n                        _calssify = element[this._property.$classify];\r\n                    }\r\n                    else {\r\n                        element[this._property.$pitch] = false;\r\n                    }\r\n                }\r\n                this._pitchClassify = _calssify;\r\n                this._pitchName = name;\r\n                this._refreshAndStorage();\r\n            }\r\n            _getPitchObj() {\r\n                for (const key in this._arr) {\r\n                    if (Object.prototype.hasOwnProperty.call(this._arr, key)) {\r\n                        const element = this._arr[key];\r\n                        if (element[this._property.$name] === this._pitchName) {\r\n                            return element;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            _addObject(obj) {\r\n                let _obj = ToolsAdmin._ObjArray.objCopy(obj);\r\n                for (let index = 0; index < this._arr.length; index++) {\r\n                    const element = this._arr[index];\r\n                    if (element[this._property.$name] === _obj[this._property.$name]) {\r\n                        this._arr[index] == _obj;\r\n                    }\r\n                }\r\n                this._refreshAndStorage();\r\n            }\r\n            _addObjectArr(objArr) {\r\n                const _objArr = ToolsAdmin._ObjArray.arrCopy(objArr);\r\n                for (let i = 0; i < _objArr.length; i++) {\r\n                    const obj = _objArr[i];\r\n                    for (let j = 0; j < this._arr.length; j++) {\r\n                        const element = this._arr[j];\r\n                        if (obj && obj[this._property.$name] === element[this._property.$name]) {\r\n                            this._arr[j] = obj;\r\n                            _objArr.splice(i, 1);\r\n                            i--;\r\n                            continue;\r\n                        }\r\n                    }\r\n                }\r\n                for (let k = 0; k < _objArr.length; k++) {\r\n                    const element = _objArr[k];\r\n                    this._arr.push(element);\r\n                }\r\n                this._refreshAndStorage();\r\n            }\r\n            _sortByProperty(pro, indexPro, inverted) {\r\n                ToolsAdmin._ObjArray.sortByProperty(this._arr, pro);\r\n                if (inverted == undefined || inverted) {\r\n                    for (let index = this._arr.length - 1; index >= 0; index--) {\r\n                        const element = this._arr[index];\r\n                        element[indexPro] = this._arr.length - index;\r\n                    }\r\n                    this._arr.reverse();\r\n                }\r\n                else {\r\n                    for (let index = 0; index < this._arr.length; index++) {\r\n                        const element = this._arr[index];\r\n                        element[indexPro] = index + 1;\r\n                    }\r\n                }\r\n                this._refreshAndStorage();\r\n            }\r\n        }\r\n        DataAdmin._Table = _Table;\r\n        function addCompare(tableArr, storageName, propertyName) {\r\n            try {\r\n                Laya.LocalStorage.getJSON(storageName);\r\n            }\r\n            catch (error) {\r\n                Laya.LocalStorage.setJSON(storageName, JSON.stringify(tableArr));\r\n                return tableArr;\r\n            }\r\n            let storeArr;\r\n            if (Laya.LocalStorage.getJSON(storageName)) {\r\n                storeArr = JSON.parse(Laya.LocalStorage.getJSON(storageName));\r\n                let diffArray = ToolsAdmin._ObjArray.diffProByTwo(tableArr, storeArr, propertyName);\r\n                console.log(`${storageName}新添加对象`, diffArray);\r\n                ToolsAdmin._Array.addToarray(storeArr, diffArray);\r\n            }\r\n            else {\r\n                storeArr = tableArr;\r\n            }\r\n            Laya.LocalStorage.setJSON(storageName, JSON.stringify(storeArr));\r\n            return storeArr;\r\n        }\r\n        function _jsonCompare(url, storageName, propertyName) {\r\n            let dataArr;\r\n            try {\r\n                Laya.LocalStorage.getJSON(storageName);\r\n            }\r\n            catch (error) {\r\n                dataArr = Laya.loader.getRes(url)['RECORDS'];\r\n                Laya.LocalStorage.setJSON(storageName, JSON.stringify(dataArr));\r\n                return dataArr;\r\n            }\r\n            if (Laya.LocalStorage.getJSON(storageName)) {\r\n                dataArr = JSON.parse(Laya.LocalStorage.getJSON(storageName));\r\n                console.log(storageName + '从本地缓存中获取到数据,将和文件夹的json文件进行对比');\r\n                try {\r\n                    let dataArr_0 = Laya.loader.getRes(url)['RECORDS'];\r\n                    if (dataArr_0.length >= dataArr.length) {\r\n                        let diffArray = ToolsAdmin._ObjArray.diffProByTwo(dataArr_0, dataArr, propertyName);\r\n                        console.log('两个数据的差值为：', diffArray);\r\n                        ToolsAdmin._Array.addToarray(dataArr, diffArray);\r\n                    }\r\n                    else {\r\n                        console.log(storageName + '数据表填写有误，长度不能小于之前的长度');\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    console.log(storageName, '数据赋值失败！请检查数据表或者手动赋值！');\r\n                }\r\n            }\r\n            else {\r\n                try {\r\n                    dataArr = Laya.loader.getRes(url)['RECORDS'];\r\n                }\r\n                catch (error) {\r\n                    console.log(storageName + '数据赋值失败！请检查数据表或者手动赋值！');\r\n                }\r\n            }\r\n            Laya.LocalStorage.setJSON(storageName, JSON.stringify(dataArr));\r\n            return dataArr;\r\n        }\r\n    })(DataAdmin = Lwg.DataAdmin || (Lwg.DataAdmin = {}));\r\n    let ColorAdmin;\r\n    (function (ColorAdmin) {\r\n        function RGBToHexString(r, g, b) {\r\n            return '#' + (\"00000\" + (r << 16 | g << 8 | b).toString(16)).slice(-6);\r\n        }\r\n        ColorAdmin.RGBToHexString = RGBToHexString;\r\n        function HexStringToRGB(str) {\r\n            let r, g, b;\r\n            r = (0xff << 16 & str) >> 16;\r\n            g = (0xff << 8 & str) >> 8;\r\n            b = 0xff & str;\r\n            return [r, g, b];\r\n        }\r\n        ColorAdmin.HexStringToRGB = HexStringToRGB;\r\n        function _colour(node, RGBA, vanishtime) {\r\n            let cf = new Laya.ColorFilter();\r\n            node.blendMode = 'null';\r\n            if (!RGBA) {\r\n                cf.color(ToolsAdmin._Number.randomOneBySection(255, 100, true), ToolsAdmin._Number.randomOneBySection(255, 100, true), ToolsAdmin._Number.randomOneBySection(255, 100, true), 1);\r\n            }\r\n            else {\r\n                cf.color(RGBA[0], RGBA[1], RGBA[2], RGBA[3]);\r\n            }\r\n            node.filters = [cf];\r\n            if (vanishtime) {\r\n                Laya.timer.once(vanishtime, this, () => {\r\n                    for (let index = 0; index < node.filters.length; index++) {\r\n                        if (node.filters[index] == cf) {\r\n                            node.filters = [];\r\n                            break;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            return cf;\r\n        }\r\n        ColorAdmin._colour = _colour;\r\n        function _changeOnce(node, RGBA, time, func) {\r\n            if (!node) {\r\n                return;\r\n            }\r\n            let cf = new Laya.ColorFilter();\r\n            cf.color(0, 0, 0, 0);\r\n            let speedR = RGBA[0] / time;\r\n            let speedG = RGBA[1] / time;\r\n            let speedB = RGBA[2] / time;\r\n            let speedA = 0;\r\n            if (RGBA[3]) {\r\n                speedA = RGBA[3] / time;\r\n            }\r\n            let caller = {\r\n                add: true,\r\n            };\r\n            let R = 0, G = 0, B = 0, A = 0;\r\n            TimerAdmin._frameLoop(1, caller, () => {\r\n                if (R < RGBA[0] && caller.add) {\r\n                    R += speedR;\r\n                    G += speedG;\r\n                    B += speedB;\r\n                    if (speedA !== 0)\r\n                        A += speedA;\r\n                    if (R >= RGBA[0]) {\r\n                        caller.add = false;\r\n                    }\r\n                }\r\n                else {\r\n                    R -= speedR;\r\n                    G -= speedG;\r\n                    B -= speedB;\r\n                    if (speedA !== 0)\r\n                        A -= speedA;\r\n                    if (R <= 0) {\r\n                        if (func) {\r\n                            func();\r\n                        }\r\n                        Laya.timer.clearAll(caller);\r\n                    }\r\n                }\r\n                cf.color(R, G, B, A);\r\n                node.filters = [cf];\r\n            });\r\n        }\r\n        ColorAdmin._changeOnce = _changeOnce;\r\n        function _changeConstant(node, RGBA1, RGBA2, frameTime) {\r\n            let cf;\r\n            let RGBA0 = [];\r\n            if (!node.filters) {\r\n                cf = new Laya.ColorFilter();\r\n                cf.color(RGBA1[0], RGBA1[1], RGBA1[2], RGBA1[3] ? RGBA1[3] : 1);\r\n                RGBA0 = [RGBA1[0], RGBA1[1], RGBA1[2], RGBA1[3] ? RGBA1[3] : 1];\r\n                node.filters = [cf];\r\n            }\r\n            else {\r\n                cf = node.filters[0];\r\n                RGBA0 = [node.filters[0]['_alpha'][0], node.filters[0]['_alpha'][1], node.filters[0]['_alpha'][2], node.filters[0]['_alpha'][3] ? node.filters[0]['_alpha'][3] : 1];\r\n            }\r\n            let RGBA = [ToolsAdmin._Number.randomCountBySection(RGBA1[0], RGBA2[0])[0], ToolsAdmin._Number.randomCountBySection(RGBA1[1], RGBA2[1])[0], ToolsAdmin._Number.randomCountBySection(RGBA1[2], RGBA2[2])[0], ToolsAdmin._Number.randomCountBySection(RGBA1[3] ? RGBA1[3] : 1, RGBA2[3] ? RGBA2[3] : 1)[0]];\r\n            let speedR = (RGBA[0] - RGBA0[0]) / frameTime;\r\n            let speedG = (RGBA[1] - RGBA0[1]) / frameTime;\r\n            let speedB = (RGBA[2] - RGBA0[2]) / frameTime;\r\n            let speedA = 0;\r\n            if (RGBA[3]) {\r\n                speedA = (RGBA[3] - RGBA0[3]) / frameTime;\r\n            }\r\n            if (node['changeCaller']) {\r\n                Laya.timer.clearAll(node['changeCaller']);\r\n            }\r\n            let changeCaller = {};\r\n            node['changeCaller'] = changeCaller;\r\n            let _time = 0;\r\n            TimerAdmin._frameLoop(1, changeCaller, () => {\r\n                _time++;\r\n                if (_time <= frameTime) {\r\n                    RGBA0[0] += speedR;\r\n                    RGBA0[1] += speedG;\r\n                    RGBA0[2] += speedB;\r\n                }\r\n                else {\r\n                    Laya.timer.clearAll(changeCaller);\r\n                }\r\n                cf.color(RGBA0[0], RGBA0[1], RGBA0[2], RGBA0[3]);\r\n                node.filters = [cf];\r\n            });\r\n        }\r\n        ColorAdmin._changeConstant = _changeConstant;\r\n    })(ColorAdmin = Lwg.ColorAdmin || (Lwg.ColorAdmin = {}));\r\n    let Eff3DAdmin;\r\n    (function (Eff3DAdmin) {\r\n        Eff3DAdmin._tex2D = {\r\n            爱心2: {\r\n                url: 'Lwg/Effects/3D/aixin2.png',\r\n                texture2D: null,\r\n                name: '爱心2',\r\n            },\r\n            星星8: {\r\n                url: 'Lwg/Effects/3D/star8.png',\r\n                texture2D: null,\r\n                name: '星星8',\r\n            },\r\n            星星5: {\r\n                url: 'Lwg/Effects/3D/star5.png',\r\n                texture2D: null,\r\n                name: '星星5',\r\n            },\r\n            圆形发光: {\r\n                url: 'Lwg/Effects/3D/yuanfaguang.png',\r\n                texture2D: null,\r\n                name: '圆形发光',\r\n            }\r\n        };\r\n        let _Particle;\r\n        (function (_Particle) {\r\n            class _Caller {\r\n                constructor(_time, _appear, _move, _vinish, _frameFuncInterval, _frameFunc, _endFunc) {\r\n                    this.time = 0;\r\n                    this.appear = true;\r\n                    this.move = false;\r\n                    this.vinish = false;\r\n                    this.frame = {\r\n                        interval: 1,\r\n                        func: null,\r\n                    };\r\n                    this.end = false;\r\n                    this.stateType = {\r\n                        appear: 'appear',\r\n                        move: 'move',\r\n                        vinish: 'vinish',\r\n                        end: 'end',\r\n                    };\r\n                    this._positionByARY_FA = 0;\r\n                    this._positionARXY_FR = 0;\r\n                    this._positionByTimeRecord = 0;\r\n                    this.frame.interval = _frameFuncInterval ? _frameFuncInterval : 1;\r\n                    this.frame.func = _frameFunc ? _frameFunc : null;\r\n                    this.endFunc = _endFunc ? _endFunc : null;\r\n                    this.time = _time ? _time : 0;\r\n                    this.appear = _appear ? _appear : true;\r\n                    this.move = _move ? _move : false;\r\n                    this.vinish = _vinish ? _vinish : false;\r\n                    TimerAdmin._frameLoop(1, this, () => {\r\n                        this.time++;\r\n                        if (this.box) {\r\n                            if (!this.box.parent) {\r\n                                this.clear();\r\n                                return;\r\n                            }\r\n                        }\r\n                        this.time % this.frame.interval == 0 && this.frame.func && this.frame.func();\r\n                        this.appear && this.appearFunc && this.appearFunc();\r\n                        this.move && this.moveFunc && this.moveFunc();\r\n                        this.vinish && this.vinishFunc && this.vinishFunc();\r\n                        this.end && this.endFunc && this.endFunc();\r\n                        this.everyFrameFunc && this.everyFrameFunc();\r\n                        this.clear();\r\n                    });\r\n                }\r\n                get box() {\r\n                    if (!this['_box']) {\r\n                        console.log('粒子没有初始化！');\r\n                    }\r\n                    return this['_box'];\r\n                }\r\n                set box(_box) {\r\n                    this['_box'] = _box;\r\n                }\r\n                stateSwitch(str) {\r\n                    if (str == 'a' || str == 'appear') {\r\n                        this.appear = true;\r\n                        this.move = false;\r\n                        this.vinish = false;\r\n                        this.end = false;\r\n                    }\r\n                    if (str == 'm' || str == 'move') {\r\n                        this.appear = false;\r\n                        this.move = true;\r\n                    }\r\n                    else if (str == 'v' || str == 'vinish') {\r\n                        this.move = false;\r\n                        this.vinish = true;\r\n                    }\r\n                    else if (str == 'e' || str == 'end') {\r\n                        this.vinish = false;\r\n                        this.end = true;\r\n                    }\r\n                }\r\n                clear() {\r\n                    if (this.end) {\r\n                        this.mat.destroy();\r\n                        this.box.meshFilter.destroy();\r\n                        this.box.destroy();\r\n                        Laya.timer.clearAll(this);\r\n                    }\r\n                }\r\n                _boxInit(parent, position, sectionSize, sectionRotation, texArr, colorRGBA) {\r\n                    const _scaleX = sectionSize ? ToolsAdmin._Number.randomOneBySection(sectionSize[0][0], sectionSize[1][0]) : ToolsAdmin._Number.randomOneBySection(0.06, 0.08);\r\n                    const _scaleY = sectionSize ? ToolsAdmin._Number.randomOneBySection(sectionSize[0][1], sectionSize[1][1]) : ToolsAdmin._Number.randomOneBySection(0.06, 0.08);\r\n                    const _scaleZ = sectionSize ? ToolsAdmin._Number.randomOneBySection(sectionSize[0][2], sectionSize[1][2]) : ToolsAdmin._Number.randomOneBySection(0.06, 0.08);\r\n                    this.box = parent.addChild(new Laya.MeshSprite3D(Laya.PrimitiveMesh.createBox(_scaleX, _scaleY, _scaleZ)));\r\n                    if (position) {\r\n                        this.box.transform.position = new Laya.Vector3(position[0], position[1], position[2]);\r\n                    }\r\n                    else {\r\n                        this.box.transform.position = new Laya.Vector3(0, 0, 0);\r\n                    }\r\n                    this.fPosition = new Laya.Vector3(this.box.transform.position.x, this.box.transform.position.y, this.box.transform.position.z);\r\n                    this.box.transform.localRotationEulerX = sectionRotation ? ToolsAdmin._Number.randomOneBySection(sectionRotation[0][0], sectionRotation[1][0]) : ToolsAdmin._Number.randomOneBySection(0, 360);\r\n                    this.box.transform.localRotationEulerX = sectionRotation ? ToolsAdmin._Number.randomOneBySection(sectionRotation[0][1], sectionRotation[1][1]) : ToolsAdmin._Number.randomOneBySection(0, 360);\r\n                    this.box.transform.localRotationEulerX = sectionRotation ? ToolsAdmin._Number.randomOneBySection(sectionRotation[0][2], sectionRotation[1][2]) : ToolsAdmin._Number.randomOneBySection(0, 360);\r\n                    this.fEuler = new Laya.Vector3(this.box.transform.localRotationEulerX, this.box.transform.localRotationEulerY, this.box.transform.localRotationEulerZ);\r\n                    const mat = this.box.meshRenderer.material = new Laya.BlinnPhongMaterial();\r\n                    mat.albedoTexture = texArr ? ToolsAdmin._Array.randomGetOne(texArr) : Eff3DAdmin._tex2D.圆形发光.texture2D;\r\n                    mat.renderMode = 2;\r\n                    const R = colorRGBA ? ToolsAdmin._Number.randomOneBySection(colorRGBA[0][0], colorRGBA[1][0]) : ToolsAdmin._Number.randomOneBySection(10, 25);\r\n                    const G = colorRGBA ? ToolsAdmin._Number.randomOneBySection(colorRGBA[0][1], colorRGBA[1][1]) : ToolsAdmin._Number.randomOneBySection(5, 15);\r\n                    const B = colorRGBA ? ToolsAdmin._Number.randomOneBySection(colorRGBA[0][2], colorRGBA[1][2]) : ToolsAdmin._Number.randomOneBySection(5, 10);\r\n                    const A = colorRGBA ? ToolsAdmin._Number.randomOneBySection(colorRGBA[0][3], colorRGBA[1][3]) : ToolsAdmin._Number.randomOneBySection(1, 1);\r\n                    mat.albedoColor = new Laya.Vector4(R, G, B, A);\r\n                    this.mat = mat;\r\n                }\r\n                get fPosition() {\r\n                    return this['_fPosition'];\r\n                }\r\n                ;\r\n                set fPosition(fP) {\r\n                    this['_fPosition'] = fP;\r\n                }\r\n                get fEuler() {\r\n                    return this['_fEuler'];\r\n                }\r\n                set fEuler(fE) {\r\n                    this['_fEuler'] = fE;\r\n                }\r\n                get mat() {\r\n                    return this.box.meshRenderer.material;\r\n                }\r\n                set mat(m) {\r\n                    this.box.meshRenderer.material = m;\r\n                }\r\n                _positionByARY(angleSpeed, radius, speedY, distance, stateSwitch) {\r\n                    const pXZ = ToolsAdmin._Point.getRoundPos(this._positionByARY_FA += angleSpeed, radius, new Laya.Point(this.fPosition.x, this.fPosition.z));\r\n                    this.box.transform.position = new Laya.Vector3(pXZ.x, this.box.transform.position.y += speedY, pXZ.y);\r\n                    if (this.box.transform.position.y - this.fPosition.y > distance) {\r\n                        stateSwitch && stateSwitch();\r\n                    }\r\n                }\r\n                _positionARXY_R(angle, speedR, distance, stateSwitch) {\r\n                    this._positionARXY_FR += speedR;\r\n                    const point = ToolsAdmin._Point.getRoundPos(angle, this._positionARXY_FR, new Laya.Point(0, 0));\r\n                    this.box.transform.position = new Laya.Vector3(this.fPosition.x + point.x, this.fPosition.y + point.y, this.fPosition.z);\r\n                    if (this._positionARXY_FR >= distance) {\r\n                        stateSwitch && stateSwitch();\r\n                    }\r\n                }\r\n                _fadeAway(albedoColorASpeed, endNum = 0, stateSwitch) {\r\n                    this.mat.albedoColorA -= albedoColorASpeed;\r\n                    if (this.mat.albedoColorA <= endNum) {\r\n                        this.mat.albedoColorA = endNum;\r\n                        stateSwitch && stateSwitch();\r\n                    }\r\n                }\r\n                _fadeIn(albedoColorASpeed, endNum = 1, stateSwitch) {\r\n                    this.mat.albedoColorA += albedoColorASpeed;\r\n                    if (this.mat.albedoColorA >= endNum) {\r\n                        this.mat.albedoColorA = endNum;\r\n                        stateSwitch && stateSwitch();\r\n                    }\r\n                }\r\n                _positionByTime(posSpeed, time, stateSwitch) {\r\n                    this._positionByTimeRecord++;\r\n                    this.box.transform.position = new Laya.Vector3(this.box.transform.position.x += posSpeed[0], this.box.transform.position.y += posSpeed[1], this.box.transform.position.z += posSpeed[2]);\r\n                    if (time && this._positionByTimeRecord > time) {\r\n                        stateSwitch && stateSwitch();\r\n                    }\r\n                }\r\n                _scaleX(scaleSpeedX, endNum, stateSwitch) {\r\n                    this.box.transform.localScaleX += scaleSpeedX;\r\n                    if (endNum) {\r\n                        if (scaleSpeedX >= 0) {\r\n                            if (this.box.transform.localScaleX >= endNum) {\r\n                                this.box.transform.localScaleX = endNum;\r\n                                stateSwitch && stateSwitch();\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (this.box.transform.localScaleX <= endNum) {\r\n                                this.box.transform.localScaleX = endNum;\r\n                                stateSwitch && stateSwitch();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                _scaleY(scaleSpeedY, endNum, stateSwitch) {\r\n                    this.box.transform.localScaleY += scaleSpeedY;\r\n                    if (endNum) {\r\n                        if (scaleSpeedY >= 0) {\r\n                            if (this.box.transform.localScaleY >= endNum) {\r\n                                this.box.transform.localScaleY = endNum;\r\n                                stateSwitch && stateSwitch();\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (this.box.transform.localScaleY <= endNum) {\r\n                                this.box.transform.localScaleY = endNum;\r\n                                stateSwitch && stateSwitch();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                _scaleZ(scaleSpeedZ, endNum, stateSwitch) {\r\n                    this.box.transform.localScaleZ += scaleSpeedZ;\r\n                    if (endNum) {\r\n                        if (scaleSpeedZ >= 0) {\r\n                            if (this.box.transform.localScaleZ >= endNum) {\r\n                                this.box.transform.localScaleZ = endNum;\r\n                                stateSwitch && stateSwitch();\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (this.box.transform.localScaleZ <= endNum) {\r\n                                this.box.transform.localScaleZ = endNum;\r\n                                stateSwitch && stateSwitch();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                _rotateX(rotateSpeedX, endNum, stateSwitch) {\r\n                    this.box.transform.localRotationEulerX += rotateSpeedX;\r\n                    if (endNum) {\r\n                        if (rotateSpeedX >= 0) {\r\n                            if (this.box.transform.localRotationEulerX >= endNum) {\r\n                                this.box.transform.localRotationEulerX = endNum;\r\n                                stateSwitch && stateSwitch();\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (this.box.transform.localRotationEulerX <= endNum) {\r\n                                this.box.transform.localRotationEulerX = endNum;\r\n                                stateSwitch && stateSwitch();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                _rotateY(rotateSpeedY, endNum, stateSwitch) {\r\n                    this.box.transform.localRotationEulerY += rotateSpeedY;\r\n                    if (endNum) {\r\n                        if (rotateSpeedY >= 0) {\r\n                            if (this.box.transform.localRotationEulerY >= endNum) {\r\n                                this.box.transform.localRotationEulerY = endNum;\r\n                                stateSwitch && stateSwitch();\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (this.box.transform.localRotationEulerY <= endNum) {\r\n                                this.box.transform.localRotationEulerY = endNum;\r\n                                stateSwitch && stateSwitch();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                _rotateZ(rotateSpeedZ, endNum, stateSwitch) {\r\n                    this.box.transform.localRotationEulerZ += rotateSpeedZ;\r\n                    if (endNum) {\r\n                        if (rotateSpeedZ >= 0) {\r\n                            if (this.box.transform.localRotationEulerZ >= endNum) {\r\n                                this.box.transform.localRotationEulerZ = endNum;\r\n                                stateSwitch && stateSwitch();\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (this.box.transform.localRotationEulerZ <= endNum) {\r\n                                this.box.transform.localRotationEulerZ = endNum;\r\n                                stateSwitch && stateSwitch();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                _randomScopeByPosition(scopeSize) {\r\n                    scopeSize = scopeSize ? scopeSize : [[0.1, 0.1, 0.1], [0.3, 0.3, 0.3]];\r\n                    ToolsAdmin._3D.randomScopeByPosition(this.box, scopeSize);\r\n                }\r\n                _excludeZ() {\r\n                    this.box.transform.localScaleZ = 0;\r\n                }\r\n                _rotateTheZero() {\r\n                    this.box.transform.localRotationEulerZ = 0;\r\n                    this.box.transform.localRotationEulerX = 0;\r\n                    this.box.transform.localRotationEulerY = 0;\r\n                }\r\n                _scaleTheZero() {\r\n                    this.box.transform.localRotationEulerZ = 0;\r\n                    this.box.transform.localRotationEulerX = 0;\r\n                    this.box.transform.localRotationEulerY = 0;\r\n                }\r\n            }\r\n            _Particle._Caller = _Caller;\r\n            function _spiral(parent, position, sectionSize, sectionRotation, texArr, colorRGBA, distance, speedY, angleSpeed, radius) {\r\n                const caller = new _Caller();\r\n                caller._boxInit(parent, position, sectionSize, sectionRotation, texArr, colorRGBA);\r\n                caller._excludeZ();\r\n                caller._rotateTheZero();\r\n                const _distance = ToolsAdmin._Number.randomNumerical(distance, [1.5, 1.5]);\r\n                const _speedY = ToolsAdmin._Number.randomNumerical(speedY, [0.02, 0.02]);\r\n                const _angleSpeed = ToolsAdmin._Number.randomNumerical(angleSpeed, [6, 6]);\r\n                const _radius = ToolsAdmin._Number.randomNumerical(radius, [0.5, 0.5]);\r\n                caller.mat.albedoColorA = 0;\r\n                caller.stateSwitch('m');\r\n                caller.moveFunc = () => {\r\n                    caller._fadeIn(0.2);\r\n                    caller._positionByARY(_angleSpeed, _radius, _speedY, _distance, () => {\r\n                        caller.stateSwitch('v');\r\n                    });\r\n                };\r\n                caller.vinishFunc = () => {\r\n                    caller._fadeAway(0.15, 0, () => {\r\n                        caller.stateSwitch('e');\r\n                    });\r\n                    caller._positionByTime([0, 0.002, 0]);\r\n                };\r\n                return caller;\r\n            }\r\n            _Particle._spiral = _spiral;\r\n            function _explode(parent, position, sectionSize, sectionRotation, texArr, colorRGBA, distance, speedR) {\r\n                const caller = new _Caller();\r\n                caller._boxInit(parent, position, sectionSize, sectionRotation, texArr, colorRGBA);\r\n                caller._excludeZ();\r\n                caller._rotateTheZero();\r\n                const _distance = ToolsAdmin._Number.randomNumerical(distance, [0.3, 0.6]);\r\n                const _speedR = ToolsAdmin._Number.randomNumerical(speedR, [0.008, 0.012]);\r\n                const _angle = ToolsAdmin._Number.randomNumerical([0, 360]);\r\n                caller.mat.albedoColorA = 0;\r\n                caller.stateSwitch('m');\r\n                caller.moveFunc = () => {\r\n                    caller._fadeIn(0.15);\r\n                    caller._positionARXY_R(_angle, _speedR, _distance, () => {\r\n                        caller.stateSwitch('v');\r\n                    });\r\n                };\r\n                caller.vinishFunc = () => {\r\n                    caller._fadeAway(0.15, 0, () => {\r\n                        caller.stateSwitch('e');\r\n                    });\r\n                };\r\n                return;\r\n            }\r\n            _Particle._explode = _explode;\r\n            function _fade(parent, position, sectionSize, staytime, vainshASpeed, vainshSSpeed, sectionRotation, texArr, colorRGBA) {\r\n                const caller = new _Caller();\r\n                caller._boxInit(parent, position, sectionSize ? sectionSize : [[0.04, 0.04, 0], [0.04, 0.04, 0]], sectionRotation, texArr, colorRGBA);\r\n                caller._excludeZ();\r\n                const _staytime = staytime ? staytime : 20;\r\n                const _vainshASpeed = vainshASpeed ? vainshASpeed : 0.02;\r\n                const _vainshSSpeed = vainshSSpeed ? vainshSSpeed : 0.02;\r\n                caller._rotateTheZero();\r\n                caller.stateSwitch('m');\r\n                caller.moveFunc = () => {\r\n                    if (caller.time > _staytime) {\r\n                        caller.stateSwitch('v');\r\n                    }\r\n                };\r\n                caller.vinishFunc = () => {\r\n                    caller._scaleX(_vainshSSpeed);\r\n                    caller._fadeAway(_vainshASpeed, 0, () => {\r\n                        caller.stateSwitch('e');\r\n                    });\r\n                };\r\n                caller.everyFrameFunc = () => {\r\n                    caller.box.transform.localScaleY = caller.box.transform.localScaleX;\r\n                };\r\n                return caller;\r\n            }\r\n            _Particle._fade = _fade;\r\n            function _starsShine(parent, position, scopeSize, scaleSpeed, maxScale, angelspeed, ASpeed, texArr, colorRGBA) {\r\n                const caller = new _Caller();\r\n                caller._boxInit(parent, position, null, null, texArr ? texArr : [Eff3DAdmin._tex2D.星星5.texture2D], colorRGBA ? colorRGBA : [[15, 15, 15, 1], [30, 30, 30, 1]]);\r\n                caller._excludeZ();\r\n                caller._rotateTheZero();\r\n                caller._scaleTheZero();\r\n                caller._randomScopeByPosition(scopeSize);\r\n                caller.mat.albedoColorA = 0;\r\n                const _maxScale = ToolsAdmin._Number.randomNumerical(maxScale, [1, 2]);\r\n                const _scaleSpeed = ToolsAdmin._Number.randomNumerical(scaleSpeed, [0.01, 0.05]);\r\n                const _angelspeed = ToolsAdmin._Number.randomNumerical(angelspeed, [2, 6], true);\r\n                const _ASpeed = ToolsAdmin._Number.randomNumerical(ASpeed, [0.01, 0.05]);\r\n                caller.appearFunc = () => {\r\n                    caller._fadeIn(_ASpeed, 1, () => {\r\n                        caller.stateSwitch('m');\r\n                    });\r\n                    caller._scaleX(_scaleSpeed, 1);\r\n                    caller._rotateZ(_angelspeed);\r\n                };\r\n                caller.moveFunc = () => {\r\n                    caller._scaleX(_scaleSpeed, _maxScale, () => {\r\n                        caller.stateSwitch('v');\r\n                    });\r\n                    caller._rotateZ(_angelspeed);\r\n                };\r\n                caller.vinishFunc = () => {\r\n                    caller._fadeAway(_ASpeed, 0, () => {\r\n                        caller.stateSwitch('e');\r\n                    });\r\n                    caller._scaleX(-_scaleSpeed);\r\n                    caller._rotateZ(-_angelspeed);\r\n                };\r\n                caller.everyFrameFunc = () => {\r\n                    caller.box.transform.localScaleY = caller.box.transform.localScaleX;\r\n                };\r\n                return caller;\r\n            }\r\n            _Particle._starsShine = _starsShine;\r\n        })(_Particle = Eff3DAdmin._Particle || (Eff3DAdmin._Particle = {}));\r\n    })(Eff3DAdmin = Lwg.Eff3DAdmin || (Lwg.Eff3DAdmin = {}));\r\n    let Eff2DAdmin;\r\n    (function (Eff2DAdmin) {\r\n        let _SkinUrl;\r\n        (function (_SkinUrl) {\r\n            _SkinUrl[\"\\u7231\\u5FC31\"] = \"Lwg/Effects/aixin1.png\";\r\n            _SkinUrl[\"\\u7231\\u5FC32\"] = \"Lwg/Effects/aixin2.png\";\r\n            _SkinUrl[\"\\u7231\\u5FC33\"] = \"Lwg/Effects/aixin3.png\";\r\n            _SkinUrl[\"\\u82B11\"] = \"Lwg/Effects/hua1.png\";\r\n            _SkinUrl[\"\\u82B12\"] = \"Lwg/Effects/hua2.png\";\r\n            _SkinUrl[\"\\u82B13\"] = \"Lwg/Effects/hua3.png\";\r\n            _SkinUrl[\"\\u82B14\"] = \"Lwg/Effects/hua4.png\";\r\n            _SkinUrl[\"\\u661F\\u661F1\"] = \"Lwg/Effects/star1.png\";\r\n            _SkinUrl[\"\\u661F\\u661F2\"] = \"Lwg/Effects/star2.png\";\r\n            _SkinUrl[\"\\u661F\\u661F3\"] = \"Lwg/Effects/star3.png\";\r\n            _SkinUrl[\"\\u661F\\u661F4\"] = \"Lwg/Effects/star4.png\";\r\n            _SkinUrl[\"\\u661F\\u661F5\"] = \"Lwg/Effects/star5.png\";\r\n            _SkinUrl[\"\\u661F\\u661F6\"] = \"Lwg/Effects/star6.png\";\r\n            _SkinUrl[\"\\u661F\\u661F7\"] = \"Lwg/Effects/star7.png\";\r\n            _SkinUrl[\"\\u661F\\u661F8\"] = \"Lwg/Effects/star8.png\";\r\n            _SkinUrl[\"\\u83F1\\u5F621\"] = \"Lwg/Effects/rhombus1.png\";\r\n            _SkinUrl[\"\\u83F1\\u5F622\"] = \"Lwg/Effects/rhombus1.png\";\r\n            _SkinUrl[\"\\u83F1\\u5F623\"] = \"Lwg/Effects/rhombus1.png\";\r\n            _SkinUrl[\"\\u77E9\\u5F621\"] = \"Lwg/Effects/rectangle1.png\";\r\n            _SkinUrl[\"\\u77E9\\u5F622\"] = \"Lwg/Effects/rectangle2.png\";\r\n            _SkinUrl[\"\\u77E9\\u5F623\"] = \"Lwg/Effects/rectangle3.png\";\r\n            _SkinUrl[\"\\u96EA\\u82B11\"] = \"Lwg/Effects/xuehua1.png\";\r\n            _SkinUrl[\"\\u53F6\\u5B501\"] = \"Lwg/Effects/yezi1.png\";\r\n            _SkinUrl[\"\\u5706\\u5F62\\u53D1\\u51491\"] = \"Lwg/Effects/yuanfaguang.png\";\r\n            _SkinUrl[\"\\u5706\\u5F621\"] = \"Lwg/Effects/yuan1.png\";\r\n            _SkinUrl[\"\\u65B9\\u5F62\\u5149\\u57081\"] = \"Lwg/Effects/ui_square_guang1.png\";\r\n            _SkinUrl[\"\\u65B9\\u5F62\\u5706\\u89D2\\u5149\\u57081\"] = \"Lwg/Effects/ui_square_guang2.png\";\r\n            _SkinUrl[\"\\u5706\\u5F62\\u5C0F\\u5149\\u73AF\"] = \"Lwg/Effects/xiaoguanghuan.png\";\r\n            _SkinUrl[\"\\u5149\\u57082\"] = \"Lwg/Effects/guangquan2.png\";\r\n            _SkinUrl[\"\\u4E09\\u89D2\\u5F621\"] = \"Lwg/Effects/triangle1.png\";\r\n            _SkinUrl[\"\\u4E09\\u89D2\\u5F622\"] = \"Lwg/Effects/triangle2.png\";\r\n        })(_SkinUrl = Eff2DAdmin._SkinUrl || (Eff2DAdmin._SkinUrl = {}));\r\n        let _Aperture;\r\n        (function (_Aperture) {\r\n            class _ApertureImage extends Laya.Image {\r\n                constructor(parent, centerPoint, size, rotation, urlArr, colorRGBA, zOrder) {\r\n                    super();\r\n                    if (!parent.parent) {\r\n                        return;\r\n                    }\r\n                    parent.addChild(this);\r\n                    centerPoint ? this.pos(centerPoint[0], centerPoint[1]) : this.pos(0, 0);\r\n                    this.width = size ? size[0] : 100;\r\n                    this.height = size ? size[1] : 100;\r\n                    this.pivotX = this.width / 2;\r\n                    this.pivotY = this.height / 2;\r\n                    this.rotation = rotation ? ToolsAdmin._Number.randomOneBySection(rotation[0], rotation[1]) : ToolsAdmin._Number.randomOneBySection(360);\r\n                    this.skin = urlArr ? ToolsAdmin._Array.randomGetOne(urlArr) : _SkinUrl.花3;\r\n                    this.zOrder = zOrder ? zOrder : 0;\r\n                    this.alpha = 0;\r\n                    let RGBA = [];\r\n                    RGBA[0] = colorRGBA ? ToolsAdmin._Number.randomOneBySection(colorRGBA[0][0], colorRGBA[1][0]) : ToolsAdmin._Number.randomOneBySection(180, 255);\r\n                    RGBA[1] = colorRGBA ? ToolsAdmin._Number.randomOneBySection(colorRGBA[0][1], colorRGBA[1][1]) : ToolsAdmin._Number.randomOneBySection(10, 180);\r\n                    RGBA[2] = colorRGBA ? ToolsAdmin._Number.randomOneBySection(colorRGBA[0][2], colorRGBA[1][2]) : ToolsAdmin._Number.randomOneBySection(10, 180);\r\n                    RGBA[3] = colorRGBA ? ToolsAdmin._Number.randomOneBySection(colorRGBA[0][3], colorRGBA[1][3]) : ToolsAdmin._Number.randomOneBySection(1, 1);\r\n                    ColorAdmin._colour(this, RGBA);\r\n                }\r\n            }\r\n            _Aperture._ApertureImage = _ApertureImage;\r\n            function _continuous(parent, centerPoint, size, minScale, rotation, urlArr, colorRGBA, zOrder, maxScale, speed, accelerated) {\r\n                const Img = new _ApertureImage(parent, centerPoint, size, rotation, urlArr, colorRGBA, zOrder);\r\n                let _speed = speed ? ToolsAdmin._Number.randomOneBySection(speed[0], speed[1]) : 0.025;\r\n                let _accelerated = accelerated ? ToolsAdmin._Number.randomOneBySection(accelerated[0], accelerated[1]) : 0.0005;\r\n                if (minScale) {\r\n                    Img.scale(minScale[0], minScale[1]);\r\n                }\r\n                else {\r\n                    Img.scale(0, 0);\r\n                }\r\n                const _maxScale = maxScale ? ToolsAdmin._Number.randomOneBySection(maxScale[0], maxScale[1]) : 2;\r\n                let moveCaller = {\r\n                    alpha: true,\r\n                    scale: false,\r\n                    vanish: false\r\n                };\r\n                Img['moveCaller'] = moveCaller;\r\n                let acc = 0;\r\n                TimerAdmin._frameLoop(1, moveCaller, () => {\r\n                    if (moveCaller.alpha) {\r\n                        Img.alpha += 0.05;\r\n                        acc = 0;\r\n                        if (Img.alpha >= 1) {\r\n                            moveCaller.alpha = false;\r\n                            moveCaller.scale = true;\r\n                        }\r\n                    }\r\n                    if (moveCaller.scale) {\r\n                        acc += _accelerated;\r\n                        if (Img.scaleX >= _maxScale) {\r\n                            moveCaller.scale = false;\r\n                            moveCaller.vanish = true;\r\n                        }\r\n                    }\r\n                    if (moveCaller.vanish) {\r\n                        Img.alpha -= 0.015;\r\n                        if (Img.alpha <= 0) {\r\n                            Img.removeSelf();\r\n                            Laya.timer.clearAll(moveCaller);\r\n                        }\r\n                    }\r\n                    Img.scaleX = Img.scaleY += (_speed + acc);\r\n                });\r\n            }\r\n            _Aperture._continuous = _continuous;\r\n            function _continuousByDs(parent, centerPoint, size, minScale, rotation, urlArr, colorRGBA, zOrder, maxScale, speed, accelerated) {\r\n                const Img = new _ApertureImage(parent, centerPoint, size, rotation, urlArr, colorRGBA, zOrder);\r\n                let _speed = speed ? ToolsAdmin._Number.randomOneBySection(speed[0], speed[1]) : 0.025;\r\n                let _accelerated = accelerated ? ToolsAdmin._Number.randomOneBySection(accelerated[0], accelerated[1]) : 0.0005;\r\n                if (minScale) {\r\n                    Img.scale(minScale[0], minScale[1]);\r\n                }\r\n                else {\r\n                    Img.scale(0, 0);\r\n                }\r\n                const _maxScale = maxScale ? ToolsAdmin._Number.randomOneBySection(maxScale[0], maxScale[1]) : 2;\r\n                let moveCaller = {\r\n                    alpha: true,\r\n                    scale: false,\r\n                    vanish: false\r\n                };\r\n                Img['moveCaller'] = moveCaller;\r\n                let acc = 0;\r\n                TimerAdmin._frameLoop(1, moveCaller, () => {\r\n                    if (moveCaller.alpha) {\r\n                        Img.alpha += 0.05;\r\n                        acc = 0;\r\n                        if (Img.alpha >= 1) {\r\n                            moveCaller.alpha = false;\r\n                            moveCaller.scale = true;\r\n                        }\r\n                    }\r\n                    if (moveCaller.scale) {\r\n                        acc += _accelerated;\r\n                        if (Img.scaleX > _maxScale) {\r\n                            moveCaller.scale = false;\r\n                            moveCaller.vanish = true;\r\n                        }\r\n                    }\r\n                    if (moveCaller.vanish) {\r\n                        acc -= _accelerated;\r\n                        if (acc <= 0) {\r\n                            acc = 0;\r\n                            Img.alpha -= 0.015;\r\n                            if (Img.alpha <= 0) {\r\n                                Img.removeSelf();\r\n                                Laya.timer.clearAll(moveCaller);\r\n                            }\r\n                        }\r\n                    }\r\n                    Img.scaleX = Img.scaleY += (_speed + acc);\r\n                });\r\n            }\r\n            _Aperture._continuousByDs = _continuousByDs;\r\n        })(_Aperture = Eff2DAdmin._Aperture || (Eff2DAdmin._Aperture = {}));\r\n        let _Particle;\r\n        (function (_Particle) {\r\n            class _ParticleImgBase extends Laya.Image {\r\n                constructor(parent, centerPoint, sectionWH, width, height, rotation, urlArr, colorRGBA, zOrder) {\r\n                    super();\r\n                    parent.addChild(this);\r\n                    let sectionWidth = sectionWH ? ToolsAdmin._Number.randomOneBySection(sectionWH[0]) : ToolsAdmin._Number.randomOneBySection(200);\r\n                    let sectionHeight = sectionWH ? ToolsAdmin._Number.randomOneBySection(sectionWH[1]) : ToolsAdmin._Number.randomOneBySection(50);\r\n                    sectionWidth = ToolsAdmin._Number.randomOneHalf() == 0 ? sectionWidth : -sectionWidth;\r\n                    sectionHeight = ToolsAdmin._Number.randomOneHalf() == 0 ? sectionHeight : -sectionHeight;\r\n                    this.x = centerPoint ? centerPoint.x + sectionWidth : sectionWidth;\r\n                    this.y = centerPoint ? centerPoint.y + sectionHeight : sectionHeight;\r\n                    this.width = width ? ToolsAdmin._Number.randomOneBySection(width[0], width[1]) : ToolsAdmin._Number.randomOneBySection(20, 50);\r\n                    this.height = height ? ToolsAdmin._Number.randomOneBySection(height[0], height[1]) : this.width;\r\n                    this.pivotX = this.width / 2;\r\n                    this.pivotY = this.height / 2;\r\n                    this.skin = urlArr ? ToolsAdmin._Array.randomGetOne(urlArr) : _SkinUrl.圆形1;\r\n                    this.rotation = rotation ? ToolsAdmin._Number.randomOneBySection(rotation[0], rotation[1]) : 0;\r\n                    this.alpha = 0;\r\n                    this.zOrder = zOrder ? zOrder : 1000;\r\n                    let RGBA = [];\r\n                    RGBA[0] = colorRGBA ? ToolsAdmin._Number.randomOneBySection(colorRGBA[0][0], colorRGBA[1][0]) : ToolsAdmin._Number.randomOneBySection(180, 255);\r\n                    RGBA[1] = colorRGBA ? ToolsAdmin._Number.randomOneBySection(colorRGBA[0][1], colorRGBA[1][1]) : ToolsAdmin._Number.randomOneBySection(10, 180);\r\n                    RGBA[2] = colorRGBA ? ToolsAdmin._Number.randomOneBySection(colorRGBA[0][2], colorRGBA[1][2]) : ToolsAdmin._Number.randomOneBySection(10, 180);\r\n                    RGBA[3] = colorRGBA ? ToolsAdmin._Number.randomOneBySection(colorRGBA[0][3], colorRGBA[1][3]) : ToolsAdmin._Number.randomOneBySection(1, 1);\r\n                    ColorAdmin._colour(this, RGBA);\r\n                }\r\n            }\r\n            _Particle._ParticleImgBase = _ParticleImgBase;\r\n            function _snow(parent, centerPoint, sectionWH, width, height, rotation, urlArr, colorRGBA, zOrder, distance, rotationSpeed, speed, windX) {\r\n                let Img = new _ParticleImgBase(parent, centerPoint, sectionWH, width, height, rotation, urlArr, colorRGBA, zOrder);\r\n                let _rotationSpeed = rotationSpeed ? ToolsAdmin._Number.randomOneBySection(rotationSpeed[0], rotationSpeed[1]) : ToolsAdmin._Number.randomOneBySection(0, 1);\r\n                _rotationSpeed = ToolsAdmin._Number.randomOneHalf() == 0 ? _rotationSpeed : -_rotationSpeed;\r\n                let speed0 = speed ? ToolsAdmin._Number.randomOneBySection(speed[0], speed[1]) : ToolsAdmin._Number.randomOneBySection(1, 2.5);\r\n                let _windX = windX ? ToolsAdmin._Number.randomOneBySection(windX[0], windX[1]) : 0;\r\n                let moveCaller = {\r\n                    alpha: true,\r\n                    move: false,\r\n                    vinish: false,\r\n                };\r\n                Img['moveCaller'] = moveCaller;\r\n                let distance0 = 0;\r\n                let distance1 = distance ? ToolsAdmin._Number.randomOneBySection(distance[0], distance[1]) : ToolsAdmin._Number.randomOneBySection(100, 300);\r\n                TimerAdmin._frameLoop(1, moveCaller, () => {\r\n                    Img.x += _windX;\r\n                    Img.rotation += _rotationSpeed;\r\n                    if (Img.alpha < 1 && moveCaller.alpha) {\r\n                        Img.alpha += 0.05;\r\n                        distance0 = Img.y++;\r\n                        if (Img.alpha >= 1) {\r\n                            moveCaller.alpha = false;\r\n                            moveCaller.move = true;\r\n                        }\r\n                    }\r\n                    if (distance0 < distance1 && moveCaller.move) {\r\n                        distance0 = Img.y += speed0;\r\n                        if (distance0 >= distance1) {\r\n                            moveCaller.move = false;\r\n                            moveCaller.vinish = true;\r\n                        }\r\n                    }\r\n                    if (moveCaller.vinish) {\r\n                        Img.alpha -= 0.03;\r\n                        Img.y += speed0;\r\n                        if (Img.alpha <= 0 || speed0 <= 0) {\r\n                            Img.removeSelf();\r\n                            Laya.timer.clearAll(moveCaller);\r\n                        }\r\n                    }\r\n                });\r\n                return Img;\r\n            }\r\n            _Particle._snow = _snow;\r\n            function _downwardSpray(parent, point, width, height, angle, urlArr, colorRGBA, vanishDistance, moveSpeed, gravity, accelerated, rotationSpeed, scaleRotationSpeed, skewSpeed, zOrder) {\r\n                const Img = new _ParticleImgBase(parent, point, [0, 0], width, height, null, urlArr, colorRGBA, zOrder);\r\n                const _angle = angle ? ToolsAdmin._Number.randomOneBySection(angle[0], angle[1]) : ToolsAdmin._Number.randomOneBySection(0, 90);\r\n                const p = ToolsAdmin._Point.angleByPoint(_angle);\r\n                const _vanishDistance = vanishDistance ? ToolsAdmin._Number.randomOneBySection(vanishDistance[0], vanishDistance[1]) : ToolsAdmin._Number.randomOneBySection(200, 800);\r\n                let _speed = moveSpeed ? ToolsAdmin._Number.randomOneBySection(moveSpeed[0], moveSpeed[1]) : ToolsAdmin._Number.randomOneBySection(10, 30);\r\n                let accelerated0 = accelerated ? ToolsAdmin._Number.randomOneBySection(accelerated[0], accelerated[1]) : ToolsAdmin._Number.randomOneBySection(0.3, 1.5);\r\n                const _gravity = gravity ? ToolsAdmin._Number.randomOneBySection(gravity[0], gravity[1]) : ToolsAdmin._Number.randomOneBySection(1, 5);\r\n                let acc = 0;\r\n                const moveCaller = {\r\n                    appear: true,\r\n                    move: false,\r\n                    dropFp: null,\r\n                    drop: false,\r\n                    vinish: false,\r\n                    scaleSub: true,\r\n                    scaleAdd: false,\r\n                    rotateFunc: null,\r\n                };\r\n                moveCaller.rotateFunc = rotatingWay(Img, rotationSpeed, scaleRotationSpeed, skewSpeed);\r\n                Img['moveCaller'] = moveCaller;\r\n                TimerAdmin._frameLoop(1, moveCaller, () => {\r\n                    moveCaller.rotateFunc();\r\n                    if (moveCaller.appear) {\r\n                        Img.alpha += 0.5;\r\n                        if (Img.alpha >= 1) {\r\n                            moveCaller.appear = false;\r\n                            moveCaller.move = true;\r\n                        }\r\n                        Img.x += p.x * _speed;\r\n                        Img.y += p.y * _speed;\r\n                    }\r\n                    if (moveCaller.move) {\r\n                        acc -= accelerated0;\r\n                        const speed0 = _speed + acc;\r\n                        Img.x += p.x * speed0;\r\n                        Img.y += p.y * speed0;\r\n                        if (speed0 <= 1) {\r\n                            _speed = 1;\r\n                            moveCaller.dropFp = new Laya.Point(Img.x, Img.y);\r\n                            moveCaller.move = false;\r\n                            moveCaller.drop = true;\r\n                        }\r\n                    }\r\n                    if (moveCaller.drop) {\r\n                        Img.x += p.x * _speed;\r\n                        Img.y += p.y * _speed;\r\n                        if (moveCaller.dropFp.distance(Img.x, Img.y) > _vanishDistance) {\r\n                            moveCaller.drop = false;\r\n                            moveCaller.vinish = true;\r\n                        }\r\n                    }\r\n                    if (moveCaller.vinish) {\r\n                        Img.alpha -= 0.05;\r\n                        if (Img.alpha <= 0.3) {\r\n                            Img.removeSelf();\r\n                            Laya.timer.clearAll(moveCaller);\r\n                        }\r\n                    }\r\n                    Img.y += _gravity;\r\n                });\r\n                return Img;\r\n            }\r\n            _Particle._downwardSpray = _downwardSpray;\r\n            function rotatingWay(Img, rotationSpeed, scaleRotationSpeed, skewSpeed) {\r\n                let _rotationSpeed = rotationSpeed ? ToolsAdmin._Number.randomOneBySection(rotationSpeed[0], rotationSpeed[1]) : ToolsAdmin._Number.randomOneBySection(0, 1);\r\n                _rotationSpeed = ToolsAdmin._Number.randomOneHalf() == 0 ? _rotationSpeed : -_rotationSpeed;\r\n                const _scaleSpeed = scaleRotationSpeed ? ToolsAdmin._Number.randomOneBySection(scaleRotationSpeed[0], scaleRotationSpeed[1]) : ToolsAdmin._Number.randomOneBySection(0, 0.25);\r\n                const _scaleDir = ToolsAdmin._Number.randomOneHalf();\r\n                let _skewSpeed = skewSpeed ? ToolsAdmin._Number.randomOneBySection(skewSpeed[0], skewSpeed[1]) : ToolsAdmin._Number.randomOneBySection(1, 10);\r\n                _skewSpeed = ToolsAdmin._Number.randomOneHalf() === 1 ? _skewSpeed : -_skewSpeed;\r\n                const _skewDir = ToolsAdmin._Number.randomOneHalf();\r\n                const _scaleOrSkew = ToolsAdmin._Number.randomOneHalf();\r\n                var rotateFunc = () => {\r\n                    Img.rotation += _rotationSpeed;\r\n                    if (_scaleOrSkew === 1) {\r\n                        if (_skewDir === 1) {\r\n                            Img.skewX += _skewSpeed;\r\n                        }\r\n                        else {\r\n                            Img.skewY += _skewSpeed;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (_scaleDir === 1) {\r\n                            if (Img['moveCaller']['scaleSub']) {\r\n                                Img.scaleX -= _scaleSpeed;\r\n                                if (Img.scaleX <= 0) {\r\n                                    Img['moveCaller']['scaleSub'] = false;\r\n                                }\r\n                            }\r\n                            else {\r\n                                Img.scaleX += _scaleSpeed;\r\n                                if (Img.scaleX >= 1) {\r\n                                    Img['moveCaller']['scaleSub'] = true;\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (Img['moveCaller']['scaleSub']) {\r\n                                Img.scaleY -= _scaleSpeed;\r\n                                if (Img.scaleY <= 0) {\r\n                                    Img['moveCaller']['scaleSub'] = false;\r\n                                }\r\n                            }\r\n                            else {\r\n                                Img.scaleY += _scaleSpeed;\r\n                                if (Img.scaleY >= 1) {\r\n                                    Img['moveCaller']['scaleSub'] = true;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n                return rotateFunc;\r\n            }\r\n            function _fallingRotate(parent, centerPoint, sectionWH, width, height, urlArr, colorRGBA, distance, moveSpeed, scaleRotationSpeed, skewSpeed, rotationSpeed, zOrder) {\r\n                const Img = new _ParticleImgBase(parent, centerPoint, sectionWH, width, height, null, urlArr, colorRGBA, zOrder);\r\n                const _moveSpeed = moveSpeed ? ToolsAdmin._Number.randomOneBySection(moveSpeed[0], moveSpeed[1]) : ToolsAdmin._Number.randomOneBySection(1, 2.5);\r\n                let _distance0 = 0;\r\n                const _distance = distance ? ToolsAdmin._Number.randomOneBySection(distance[0], distance[1]) : ToolsAdmin._Number.randomOneBySection(100, 300);\r\n                const moveCaller = {\r\n                    appear: true,\r\n                    move: false,\r\n                    vinish: false,\r\n                    scaleSub: true,\r\n                    scaleAdd: false,\r\n                    rotateFunc: null,\r\n                };\r\n                moveCaller.rotateFunc = rotatingWay(Img, rotationSpeed, scaleRotationSpeed, skewSpeed);\r\n                Img['moveCaller'] = moveCaller;\r\n                TimerAdmin._frameLoop(1, moveCaller, () => {\r\n                    moveCaller.rotateFunc();\r\n                    if (moveCaller.appear) {\r\n                        Img.alpha += 0.05;\r\n                        Img.y += _moveSpeed / 2;\r\n                        if (Img.alpha >= 1) {\r\n                            moveCaller.appear = false;\r\n                            moveCaller.move = true;\r\n                        }\r\n                    }\r\n                    if (moveCaller.move) {\r\n                        Img.y += _moveSpeed;\r\n                        _distance0 += _moveSpeed;\r\n                        if (_distance0 >= _distance) {\r\n                            moveCaller.move = false;\r\n                            moveCaller.vinish = true;\r\n                        }\r\n                    }\r\n                    if (moveCaller.vinish) {\r\n                        Img.alpha -= 0.01;\r\n                        Img.y += _moveSpeed;\r\n                        if (Img.alpha <= 0) {\r\n                            Img.removeSelf();\r\n                            Laya.timer.clearAll(moveCaller);\r\n                        }\r\n                    }\r\n                });\r\n                return Img;\r\n            }\r\n            _Particle._fallingRotate = _fallingRotate;\r\n            function _fallingVertical(parent, centerPoint, sectionWH, width, height, rotation, urlArr, colorRGBA, zOrder, distance, speed, accelerated) {\r\n                let Img = new _ParticleImgBase(parent, centerPoint, sectionWH, width, height, rotation, urlArr, colorRGBA, zOrder);\r\n                let speed0 = speed ? ToolsAdmin._Number.randomOneBySection(speed[0], speed[1]) : ToolsAdmin._Number.randomOneBySection(4, 8);\r\n                let accelerated0 = accelerated ? ToolsAdmin._Number.randomOneBySection(accelerated[0], accelerated[1]) : ToolsAdmin._Number.randomOneBySection(0.25, 0.45);\r\n                let acc = 0;\r\n                let moveCaller = {\r\n                    alpha: true,\r\n                    move: false,\r\n                    vinish: false,\r\n                };\r\n                Img['moveCaller'] = moveCaller;\r\n                let distance1 = distance ? ToolsAdmin._Number.randomOneBySection(distance[0], distance[1]) : ToolsAdmin._Number.randomOneBySection(100, 300);\r\n                let fY = Img.y;\r\n                TimerAdmin._frameLoop(1, moveCaller, () => {\r\n                    if (Img.alpha < 1 && moveCaller.alpha) {\r\n                        Img.alpha += 0.04;\r\n                        if (Img.alpha >= 1) {\r\n                            moveCaller.alpha = false;\r\n                            moveCaller.move = true;\r\n                        }\r\n                    }\r\n                    if (!moveCaller.alpha) {\r\n                        acc += accelerated0;\r\n                        Img.y += (speed0 + acc);\r\n                    }\r\n                    if (!moveCaller.alpha && moveCaller.move) {\r\n                        if (Img.y - fY >= distance1) {\r\n                            moveCaller.move = false;\r\n                            moveCaller.vinish = true;\r\n                        }\r\n                    }\r\n                    if (moveCaller.vinish) {\r\n                        Img.alpha -= 0.03;\r\n                        if (Img.alpha <= 0) {\r\n                            Laya.timer.clearAll(moveCaller);\r\n                            Img.removeSelf();\r\n                        }\r\n                    }\r\n                });\r\n                return Img;\r\n            }\r\n            _Particle._fallingVertical = _fallingVertical;\r\n            function _fallingVertical_Reverse(parent, centerPoint, sectionWH, width, height, rotation, urlArr, colorRGBA, zOrder, distance, speed, accelerated) {\r\n                let Img = new _ParticleImgBase(parent, centerPoint, sectionWH, width, height, rotation, urlArr, colorRGBA, zOrder);\r\n                let speed0 = speed ? ToolsAdmin._Number.randomOneBySection(speed[0], speed[1]) : ToolsAdmin._Number.randomOneBySection(4, 8);\r\n                let accelerated0 = accelerated ? ToolsAdmin._Number.randomOneBySection(accelerated[0], accelerated[1]) : ToolsAdmin._Number.randomOneBySection(0.25, 0.45);\r\n                let acc = 0;\r\n                let moveCaller = {\r\n                    alpha: true,\r\n                    move: false,\r\n                    vinish: false,\r\n                };\r\n                Img['moveCaller'] = moveCaller;\r\n                let distance1 = distance ? ToolsAdmin._Number.randomOneBySection(distance[0], distance[1]) : ToolsAdmin._Number.randomOneBySection(100, 300);\r\n                let fY = Img.y;\r\n                TimerAdmin._frameLoop(1, moveCaller, () => {\r\n                    if (Img.alpha < 1 && moveCaller.alpha) {\r\n                        Img.alpha += 0.04;\r\n                        if (Img.alpha >= 1) {\r\n                            moveCaller.alpha = false;\r\n                            moveCaller.move = true;\r\n                        }\r\n                    }\r\n                    if (!moveCaller.alpha) {\r\n                        acc += accelerated0;\r\n                        Img.y += (speed0 + acc);\r\n                    }\r\n                    if (!moveCaller.alpha && moveCaller.move) {\r\n                        if (Img.y - fY <= distance1) {\r\n                            moveCaller.move = false;\r\n                            moveCaller.vinish = true;\r\n                        }\r\n                    }\r\n                    if (moveCaller.vinish) {\r\n                        Img.alpha -= 0.03;\r\n                        if (Img.alpha <= 0) {\r\n                            Laya.timer.clearAll(moveCaller);\r\n                            Img.removeSelf();\r\n                        }\r\n                    }\r\n                });\r\n                return Img;\r\n            }\r\n            _Particle._fallingVertical_Reverse = _fallingVertical_Reverse;\r\n            function _slowlyUp(parent, centerPoint, sectionWH, width, height, rotation, urlArr, colorRGBA, zOrder, distance, speed, accelerated) {\r\n                let Img = new _ParticleImgBase(parent, centerPoint, sectionWH, width, height, rotation, urlArr, colorRGBA, zOrder);\r\n                let speed0 = speed ? ToolsAdmin._Number.randomOneBySection(speed[0], speed[1]) : ToolsAdmin._Number.randomOneBySection(1.5, 2);\r\n                let accelerated0 = accelerated ? ToolsAdmin._Number.randomOneBySection(accelerated[0], accelerated[1]) : ToolsAdmin._Number.randomOneBySection(0.001, 0.005);\r\n                let acc = 0;\r\n                let moveCaller = {\r\n                    alpha: true,\r\n                    move: false,\r\n                    vinish: false,\r\n                };\r\n                Img['moveCaller'] = moveCaller;\r\n                let fy = Img.y;\r\n                let distance0 = 0;\r\n                let distance1 = distance ? ToolsAdmin._Number.randomOneBySection(distance[0], distance[1]) : ToolsAdmin._Number.randomOneBySection(-250, -600);\r\n                TimerAdmin._frameLoop(1, moveCaller, () => {\r\n                    if (Img.alpha < 1 && moveCaller.alpha) {\r\n                        Img.alpha += 0.03;\r\n                        if (Img.alpha >= 1) {\r\n                            moveCaller.alpha = false;\r\n                            moveCaller.move = true;\r\n                        }\r\n                    }\r\n                    if (distance0 > distance1 && moveCaller.move) {\r\n                    }\r\n                    else {\r\n                        moveCaller.move = false;\r\n                        moveCaller.vinish = true;\r\n                    }\r\n                    if (moveCaller.vinish) {\r\n                        Img.alpha -= 0.02;\r\n                        Img.scaleX -= 0.005;\r\n                        Img.scaleY -= 0.005;\r\n                        if (Img.alpha <= 0) {\r\n                            Img.removeSelf();\r\n                            Laya.timer.clearAll(moveCaller);\r\n                        }\r\n                    }\r\n                    acc += accelerated0;\r\n                    Img.y -= (speed0 + acc);\r\n                    distance0 = fy - Img.y;\r\n                });\r\n                return Img;\r\n            }\r\n            _Particle._slowlyUp = _slowlyUp;\r\n            function _sprayRound(parent, centerPoint, width, height, rotation, urlArr, colorRGBA, distance, time, moveAngle, rotationSpeed, zOrder) {\r\n                let Img = new _ParticleImgBase(parent, centerPoint, [0, 0], width, height, rotation, urlArr, colorRGBA, zOrder);\r\n                let centerPoint0 = centerPoint ? centerPoint : new Laya.Point(0, 0);\r\n                let radius = 0;\r\n                const _time = time ? ToolsAdmin._Number.randomOneBySection(time[0], time[1]) : ToolsAdmin._Number.randomOneBySection(30, 50);\r\n                const _distance = distance ? ToolsAdmin._Number.randomOneBySection(distance[0], distance[1]) : ToolsAdmin._Number.randomOneBySection(100, 200);\r\n                const _speed = _distance / _time;\r\n                const _angle = moveAngle ? ToolsAdmin._Number.randomOneBySection(moveAngle[0], moveAngle[1]) : ToolsAdmin._Number.randomOneBySection(0, 360);\r\n                let rotationSpeed0 = rotationSpeed ? ToolsAdmin._Number.randomOneBySection(rotationSpeed[0], rotationSpeed[1]) : ToolsAdmin._Number.randomOneBySection(0, 20);\r\n                rotationSpeed0 = ToolsAdmin._Number.randomOneHalf() == 0 ? rotationSpeed0 : -rotationSpeed0;\r\n                const vinishTime = ToolsAdmin._Number.randomOneInt(60);\r\n                const subAlpha = 1 / vinishTime;\r\n                let moveCaller = {\r\n                    alpha: true,\r\n                    move: false,\r\n                    vinish: false,\r\n                };\r\n                Img['moveCaller'] = moveCaller;\r\n                TimerAdmin._frameLoop(1, moveCaller, () => {\r\n                    Img.rotation += rotationSpeed0;\r\n                    if (Img.alpha < 1 && moveCaller.alpha) {\r\n                        Img.alpha += 0.5;\r\n                        if (Img.alpha >= 1) {\r\n                            moveCaller.alpha = false;\r\n                            moveCaller.move = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (!moveCaller.vinish) {\r\n                            radius += _speed;\r\n                            let point = ToolsAdmin._Point.getRoundPos(_angle, radius, centerPoint0);\r\n                            Img.pos(point.x, point.y);\r\n                            if (radius > _distance) {\r\n                                moveCaller.move = false;\r\n                                moveCaller.vinish = true;\r\n                            }\r\n                        }\r\n                        else {\r\n                            Img.alpha -= subAlpha;\r\n                            if (Img.alpha <= 0) {\r\n                                Img.removeSelf();\r\n                                Laya.timer.clearAll(moveCaller);\r\n                            }\r\n                            radius += _speed / 2;\r\n                            let point = ToolsAdmin._Point.getRoundPos(_angle, radius, centerPoint0);\r\n                            Img.pos(point.x, point.y);\r\n                        }\r\n                    }\r\n                });\r\n                return Img;\r\n            }\r\n            _Particle._sprayRound = _sprayRound;\r\n            function _spray(parent, centerPoint, width, height, rotation, urlArr, colorRGBA, distance, moveAngle, rotationSpeed, speed, accelerated, zOrder) {\r\n                let Img = new _ParticleImgBase(parent, centerPoint, [0, 0], width, height, rotation, urlArr, colorRGBA, zOrder);\r\n                let centerPoint0 = centerPoint ? centerPoint : new Laya.Point(0, 0);\r\n                let speed0 = speed ? ToolsAdmin._Number.randomOneBySection(speed[0], speed[1]) : ToolsAdmin._Number.randomOneBySection(3, 10);\r\n                let accelerated0 = accelerated ? ToolsAdmin._Number.randomOneBySection(accelerated[0], accelerated[1]) : ToolsAdmin._Number.randomOneBySection(0.25, 0.45);\r\n                let acc = 0;\r\n                let moveCaller = {\r\n                    alpha: true,\r\n                    move: false,\r\n                    vinish: false,\r\n                };\r\n                Img['moveCaller'] = moveCaller;\r\n                let radius = 0;\r\n                let distance1 = distance ? ToolsAdmin._Number.randomOneBySection(distance[0], distance[1]) : ToolsAdmin._Number.randomOneBySection(100, 200);\r\n                let angle0 = moveAngle ? ToolsAdmin._Number.randomOneBySection(moveAngle[0], moveAngle[1]) : ToolsAdmin._Number.randomOneBySection(0, 360);\r\n                let rotationSpeed0 = rotationSpeed ? ToolsAdmin._Number.randomOneBySection(rotationSpeed[0], rotationSpeed[1]) : ToolsAdmin._Number.randomOneBySection(0, 20);\r\n                rotationSpeed0 = ToolsAdmin._Number.randomOneHalf() == 0 ? rotationSpeed0 : -rotationSpeed0;\r\n                TimerAdmin._frameLoop(1, moveCaller, () => {\r\n                    Img.rotation += rotationSpeed0;\r\n                    if (Img.alpha < 1 && moveCaller.alpha) {\r\n                        Img.alpha += 0.5;\r\n                        if (Img.alpha >= 1) {\r\n                            moveCaller.alpha = false;\r\n                            moveCaller.move = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (radius < distance1 && moveCaller.move) {\r\n                        }\r\n                        else {\r\n                            moveCaller.move = false;\r\n                            moveCaller.vinish = true;\r\n                        }\r\n                        if (moveCaller.vinish) {\r\n                            Img.alpha -= 0.05;\r\n                            if (Img.alpha <= 0.3) {\r\n                                Img.removeSelf();\r\n                                Laya.timer.clearAll(moveCaller);\r\n                            }\r\n                        }\r\n                        acc += accelerated0;\r\n                        radius += speed0 + acc;\r\n                        let point = ToolsAdmin._Point.getRoundPos(angle0, radius, centerPoint0);\r\n                        Img.pos(point.x, point.y);\r\n                    }\r\n                });\r\n                return Img;\r\n            }\r\n            _Particle._spray = _spray;\r\n            function _outsideBox(parent, centerPoint, sectionWH, width, height, rotation, urlArr, colorRGBA, zOrder, curtailAngle, distance, rotateSpeed, speed, accelerated) {\r\n                let Img = new _ParticleImgBase(parent, centerPoint, [0, 0], width, height, rotation, urlArr, colorRGBA, zOrder);\r\n                let _angle = 0;\r\n                sectionWH = sectionWH ? sectionWH : [100, 100];\r\n                let fixedXY = ToolsAdmin._Number.randomOneHalf() == 0 ? 'x' : 'y';\r\n                curtailAngle = curtailAngle ? curtailAngle : 60;\r\n                if (fixedXY == 'x') {\r\n                    if (ToolsAdmin._Number.randomOneHalf() == 0) {\r\n                        Img.x += sectionWH[0];\r\n                        _angle = ToolsAdmin._Number.randomOneHalf() == 0 ? ToolsAdmin._Number.randomOneBySection(0, 90 - curtailAngle) : ToolsAdmin._Number.randomOneBySection(0, -90 + curtailAngle);\r\n                    }\r\n                    else {\r\n                        Img.x -= sectionWH[0];\r\n                        _angle = ToolsAdmin._Number.randomOneBySection(90 + curtailAngle, 270 - curtailAngle);\r\n                    }\r\n                    Img.y += ToolsAdmin._Number.randomOneBySection(-sectionWH[1], sectionWH[1]);\r\n                }\r\n                else {\r\n                    if (ToolsAdmin._Number.randomOneHalf() == 0) {\r\n                        Img.y -= sectionWH[1];\r\n                        _angle = ToolsAdmin._Number.randomOneBySection(180 + curtailAngle, 360 - curtailAngle);\r\n                    }\r\n                    else {\r\n                        Img.y += sectionWH[1];\r\n                        _angle = ToolsAdmin._Number.randomOneBySection(0 + curtailAngle, 180 - curtailAngle);\r\n                    }\r\n                    Img.x += ToolsAdmin._Number.randomOneBySection(-sectionWH[0], sectionWH[0]);\r\n                }\r\n                let p = ToolsAdmin._Point.angleByPoint(_angle);\r\n                let _distance = distance ? ToolsAdmin._Number.randomOneBySection(distance[0], distance[1]) : ToolsAdmin._Number.randomOneBySection(20, 50);\r\n                let speed0 = speed ? ToolsAdmin._Number.randomOneBySection(speed[0], speed[1]) : ToolsAdmin._Number.randomOneBySection(0.5, 1);\r\n                let accelerated0 = accelerated ? ToolsAdmin._Number.randomOneBySection(accelerated[0], accelerated[1]) : ToolsAdmin._Number.randomOneBySection(0.25, 0.45);\r\n                let acc = 0;\r\n                let rotationSpeed0 = rotateSpeed ? ToolsAdmin._Number.randomOneBySection(rotateSpeed[0], rotateSpeed[1]) : ToolsAdmin._Number.randomOneBySection(0, 20);\r\n                let firstP = new Laya.Point(Img.x, Img.y);\r\n                let moveCaller = {\r\n                    alpha: true,\r\n                    move: false,\r\n                    vinish: false,\r\n                };\r\n                Img['moveCaller'] = moveCaller;\r\n                TimerAdmin._frameLoop(1, moveCaller, () => {\r\n                    Img.rotation += rotationSpeed0;\r\n                    if (moveCaller.alpha) {\r\n                        Img.alpha += 0.5;\r\n                        if (Img.alpha >= 1) {\r\n                            moveCaller.alpha = false;\r\n                            moveCaller.move = true;\r\n                        }\r\n                    }\r\n                    else if (moveCaller.move) {\r\n                        if (firstP.distance(Img.x, Img.y) >= _distance) {\r\n                            moveCaller.move = false;\r\n                            moveCaller.vinish = true;\r\n                        }\r\n                    }\r\n                    else if (moveCaller.vinish) {\r\n                        Img.alpha -= 0.05;\r\n                        if (Img.alpha <= 0.3) {\r\n                            Img.removeSelf();\r\n                            Laya.timer.clearAll(moveCaller);\r\n                        }\r\n                    }\r\n                    if (!moveCaller.alpha) {\r\n                        acc += accelerated0;\r\n                        Img.x += p.x * (speed0 + acc);\r\n                        Img.y += p.y * (speed0 + acc);\r\n                    }\r\n                });\r\n                return Img;\r\n            }\r\n            _Particle._outsideBox = _outsideBox;\r\n            function _moveToTargetToMove(parent, centerPoint, width, height, rotation, angle, urlArr, colorRGBA, zOrder, distance1, distance2, rotationSpeed, speed, accelerated) {\r\n                let Img = new _ParticleImgBase(parent, centerPoint, [0, 0], width, height, rotation, urlArr, colorRGBA, zOrder);\r\n                let centerPoint0 = centerPoint ? centerPoint : new Laya.Point(0, 0);\r\n                let speed0 = speed ? ToolsAdmin._Number.randomOneBySection(speed[0], speed[1]) : ToolsAdmin._Number.randomOneBySection(5, 6);\r\n                let accelerated0 = accelerated ? ToolsAdmin._Number.randomOneBySection(accelerated[0], accelerated[1]) : ToolsAdmin._Number.randomOneBySection(0.25, 0.45);\r\n                let acc = 0;\r\n                let moveCaller = {\r\n                    alpha: true,\r\n                    move1: false,\r\n                    stop: false,\r\n                    move2: false,\r\n                    vinish: false,\r\n                };\r\n                Img['moveCaller'] = moveCaller;\r\n                let radius = 0;\r\n                let dis1 = distance1 ? ToolsAdmin._Number.randomOneBySection(distance1[0], distance1[1]) : ToolsAdmin._Number.randomOneBySection(100, 200);\r\n                let dis2 = distance2 ? ToolsAdmin._Number.randomOneBySection(distance2[0], distance2[1]) : ToolsAdmin._Number.randomOneBySection(100, 200);\r\n                let angle0 = angle ? ToolsAdmin._Number.randomOneBySection(angle[0], angle[1]) : ToolsAdmin._Number.randomOneBySection(0, 360);\r\n                Img.rotation = angle0 - 90;\r\n                let rotationSpeed0 = rotationSpeed ? ToolsAdmin._Number.randomOneBySection(rotationSpeed[0], rotationSpeed[1]) : ToolsAdmin._Number.randomOneBySection(0, 20);\r\n                TimerAdmin._frameLoop(1, moveCaller, () => {\r\n                    if (moveCaller.alpha) {\r\n                        acc += accelerated0;\r\n                        radius += speed0 + acc;\r\n                        Img.alpha += 0.5;\r\n                        if (Img.alpha >= 1) {\r\n                            moveCaller.alpha = false;\r\n                            moveCaller.move1 = true;\r\n                        }\r\n                    }\r\n                    else if (moveCaller.move1) {\r\n                        acc += accelerated0;\r\n                        radius += speed0 + acc;\r\n                        if (radius >= dis1) {\r\n                            moveCaller.move1 = false;\r\n                            moveCaller.stop = true;\r\n                        }\r\n                    }\r\n                    else if (moveCaller.stop) {\r\n                        acc -= 0.3;\r\n                        radius += 0.1;\r\n                        if (acc <= 0) {\r\n                            moveCaller.stop = false;\r\n                            moveCaller.move2 = true;\r\n                        }\r\n                    }\r\n                    else if (moveCaller.move2) {\r\n                        acc += accelerated0 / 2;\r\n                        radius += speed0 + acc;\r\n                        if (radius >= dis1 + dis2) {\r\n                            moveCaller.move2 = false;\r\n                            moveCaller.vinish = true;\r\n                        }\r\n                    }\r\n                    else if (moveCaller.vinish) {\r\n                        radius += 0.5;\r\n                        Img.alpha -= 0.05;\r\n                        if (Img.alpha <= 0) {\r\n                            Img.removeSelf();\r\n                            Laya.timer.clearAll(moveCaller);\r\n                        }\r\n                    }\r\n                    let point = ToolsAdmin._Point.getRoundPos(angle0, radius, centerPoint0);\r\n                    Img.pos(point.x, point.y);\r\n                });\r\n                return Img;\r\n            }\r\n            _Particle._moveToTargetToMove = _moveToTargetToMove;\r\n            function _AnnularInhalation(parent, centerPoint, radius, rotation, width, height, urlArr, speed, accelerated, zOrder) {\r\n                let Img = new Laya.Image();\r\n                parent.addChild(Img);\r\n                width = width ? width : [25, 50];\r\n                Img.width = ToolsAdmin._Number.randomCountBySection(width[0], width[1])[0];\r\n                Img.height = height ? ToolsAdmin._Number.randomCountBySection(height[0], height[1])[0] : Img.width;\r\n                Img.pivotX = Img.width / 2;\r\n                Img.pivotY = Img.height / 2;\r\n                Img.skin = urlArr ? ToolsAdmin._Array.randomGetOut(urlArr)[0] : _SkinUrl[ToolsAdmin._Number.randomCountBySection(0, 12)[0]];\r\n                let radius0 = ToolsAdmin._Number.randomCountBySection(radius[0], radius[1])[0];\r\n                Img.alpha = 0;\r\n                let speed0 = speed ? ToolsAdmin._Number.randomCountBySection(speed[0], speed[1])[0] : ToolsAdmin._Number.randomCountBySection(5, 10)[0];\r\n                let angle = rotation ? ToolsAdmin._Number.randomCountBySection(rotation[0], rotation[1])[0] : ToolsAdmin._Number.randomCountBySection(0, 360)[0];\r\n                let caller = {};\r\n                let acc = 0;\r\n                accelerated = accelerated ? accelerated : 0.35;\r\n                TimerAdmin._frameLoop(1, caller, () => {\r\n                    if (Img.alpha < 1) {\r\n                        Img.alpha += 0.05;\r\n                        acc += (accelerated / 5);\r\n                        radius0 -= (speed0 / 2 + acc);\r\n                    }\r\n                    else {\r\n                        acc += accelerated;\r\n                        radius0 -= (speed0 + acc);\r\n                    }\r\n                    let point = ToolsAdmin._Point.getRoundPos(angle, radius0, centerPoint);\r\n                    Img.pos(point.x, point.y);\r\n                    if (point.distance(centerPoint.x, centerPoint.y) <= 20 || point.distance(centerPoint.x, centerPoint.y) >= 1000) {\r\n                        Img.removeSelf();\r\n                        Laya.timer.clearAll(caller);\r\n                    }\r\n                });\r\n                return Img;\r\n            }\r\n            _Particle._AnnularInhalation = _AnnularInhalation;\r\n        })(_Particle = Eff2DAdmin._Particle || (Eff2DAdmin._Particle = {}));\r\n        let _Glitter;\r\n        (function (_Glitter) {\r\n            class _GlitterImage extends Laya.Image {\r\n                constructor(parent, centerPos, radiusXY, urlArr, colorRGBA, width, height, zOder) {\r\n                    super();\r\n                    if (!parent.parent) {\r\n                        return;\r\n                    }\r\n                    parent.addChild(this);\r\n                    this.skin = urlArr ? ToolsAdmin._Array.randomGetOne(urlArr) : _SkinUrl.星星1;\r\n                    this.width = width ? ToolsAdmin._Number.randomOneBySection(width[0], width[1]) : 80;\r\n                    this.height = height ? ToolsAdmin._Number.randomOneBySection(height[0], height[1]) : this.width;\r\n                    this.pivotX = this.width / 2;\r\n                    this.pivotY = this.height / 2;\r\n                    let p = radiusXY ? ToolsAdmin._Point.randomPointByCenter(centerPos, radiusXY[0], radiusXY[1], 1) : ToolsAdmin._Point.randomPointByCenter(centerPos, 100, 100, 1);\r\n                    this.pos(p[0].x, p[0].y);\r\n                    let RGBA = [];\r\n                    RGBA[0] = colorRGBA ? ToolsAdmin._Number.randomOneBySection(colorRGBA[0][0], colorRGBA[1][0]) : ToolsAdmin._Number.randomOneBySection(10, 255);\r\n                    RGBA[1] = colorRGBA ? ToolsAdmin._Number.randomOneBySection(colorRGBA[0][1], colorRGBA[1][1]) : ToolsAdmin._Number.randomOneBySection(200, 255);\r\n                    RGBA[2] = colorRGBA ? ToolsAdmin._Number.randomOneBySection(colorRGBA[0][2], colorRGBA[1][2]) : ToolsAdmin._Number.randomOneBySection(10, 255);\r\n                    RGBA[3] = colorRGBA ? ToolsAdmin._Number.randomOneBySection(colorRGBA[0][3], colorRGBA[1][3]) : ToolsAdmin._Number.randomOneBySection(1, 1);\r\n                    ColorAdmin._colour(this, RGBA);\r\n                    this.alpha = 0;\r\n                    this.zOrder = zOder ? zOder : 1000;\r\n                }\r\n            }\r\n            _Glitter._GlitterImage = _GlitterImage;\r\n            function _blinkStar(parent, centerPos, radiusXY, urlArr, colorRGBA, width, height, scale, speed, rotateSpeed, zOder) {\r\n                let Img = new _GlitterImage(parent, centerPos, radiusXY, urlArr, colorRGBA, width, height, zOder);\r\n                Img.scaleX = 0;\r\n                Img.scaleY = 0;\r\n                let _scale = scale ? ToolsAdmin._Number.randomOneBySection(scale[0], scale[1]) : ToolsAdmin._Number.randomOneBySection(0.8, 1.2);\r\n                let _speed = speed ? ToolsAdmin._Number.randomOneBySection(speed[0], speed[1]) : ToolsAdmin._Number.randomOneBySection(0.01, 0.02);\r\n                let _rotateSpeed = rotateSpeed ? ToolsAdmin._Number.randomOneInt(rotateSpeed[0], rotateSpeed[1]) : ToolsAdmin._Number.randomOneInt(0, 5);\r\n                _rotateSpeed = ToolsAdmin._Number.randomOneHalf() == 0 ? -_rotateSpeed : _rotateSpeed;\r\n                let moveCaller = {\r\n                    appear: true,\r\n                    scale: false,\r\n                    vanish: false,\r\n                };\r\n                Img['moveCaller'] = moveCaller;\r\n                var ani = () => {\r\n                    if (moveCaller.appear) {\r\n                        Img.alpha += 0.1;\r\n                        Img.rotation += _rotateSpeed;\r\n                        Img.scaleX = Img.scaleY += _speed;\r\n                        if (Img.alpha >= 1) {\r\n                            moveCaller.appear = false;\r\n                            moveCaller.scale = true;\r\n                        }\r\n                    }\r\n                    else if (moveCaller.scale) {\r\n                        Img.rotation += _rotateSpeed;\r\n                        Img.scaleX = Img.scaleY += _speed;\r\n                        if (Img.scaleX > _scale) {\r\n                            moveCaller.scale = false;\r\n                            moveCaller.vanish = true;\r\n                        }\r\n                    }\r\n                    else if (moveCaller.vanish) {\r\n                        Img.rotation -= _rotateSpeed;\r\n                        Img.alpha -= 0.015;\r\n                        Img.scaleX -= 0.01;\r\n                        Img.scaleY -= 0.01;\r\n                        if (Img.scaleX <= 0) {\r\n                            Img.removeSelf();\r\n                            Laya.timer.clearAll(moveCaller);\r\n                        }\r\n                    }\r\n                };\r\n                Laya.timer.frameLoop(1, moveCaller, ani);\r\n                return Img;\r\n            }\r\n            _Glitter._blinkStar = _blinkStar;\r\n            function _simpleInfinite(parent, x, y, width, height, zOrder, url, speed) {\r\n                let Img = new Laya.Image();\r\n                parent.addChild(Img);\r\n                Img.width = width;\r\n                Img.height = height;\r\n                Img.pos(x, y);\r\n                Img.skin = url ? url : _SkinUrl.方形光圈1;\r\n                Img.alpha = 0;\r\n                Img.zOrder = zOrder ? zOrder : 0;\r\n                let add = true;\r\n                let caller = {};\r\n                let func = () => {\r\n                    if (!add) {\r\n                        Img.alpha -= speed ? speed : 0.01;\r\n                        if (Img.alpha <= 0) {\r\n                            if (caller['end']) {\r\n                                Laya.timer.clearAll(caller);\r\n                                Img.removeSelf();\r\n                            }\r\n                            else {\r\n                                add = true;\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        Img.alpha += speed ? speed * 2 : 0.01 * 2;\r\n                        if (Img.alpha >= 1) {\r\n                            add = false;\r\n                            caller['end'] = true;\r\n                        }\r\n                    }\r\n                };\r\n                Laya.timer.frameLoop(1, caller, func);\r\n                return Img;\r\n            }\r\n            _Glitter._simpleInfinite = _simpleInfinite;\r\n        })(_Glitter = Eff2DAdmin._Glitter || (Eff2DAdmin._Glitter = {}));\r\n        let _circulation;\r\n        (function (_circulation) {\r\n            class _circulationImage extends Laya.Image {\r\n                constructor(parent, urlArr, colorRGBA, width, height, zOrder) {\r\n                    super();\r\n                    parent.addChild(this);\r\n                    this.skin = urlArr ? ToolsAdmin._Array.randomGetOne(urlArr) : _SkinUrl.圆形发光1;\r\n                    this.width = width ? ToolsAdmin._Number.randomOneBySection(width[0], width[1]) : 80;\r\n                    this.height = height ? ToolsAdmin._Number.randomOneBySection(height[0], height[1]) : this.width;\r\n                    this.pivotX = this.width / 2;\r\n                    this.pivotY = this.height / 2;\r\n                    let RGBA = [];\r\n                    RGBA[0] = colorRGBA ? ToolsAdmin._Number.randomOneBySection(colorRGBA[0][0], colorRGBA[1][0]) : ToolsAdmin._Number.randomOneBySection(0, 255);\r\n                    RGBA[1] = colorRGBA ? ToolsAdmin._Number.randomOneBySection(colorRGBA[0][1], colorRGBA[1][1]) : ToolsAdmin._Number.randomOneBySection(0, 255);\r\n                    RGBA[2] = colorRGBA ? ToolsAdmin._Number.randomOneBySection(colorRGBA[0][2], colorRGBA[1][2]) : ToolsAdmin._Number.randomOneBySection(0, 255);\r\n                    RGBA[3] = colorRGBA ? ToolsAdmin._Number.randomOneBySection(colorRGBA[0][3], colorRGBA[1][3]) : ToolsAdmin._Number.randomOneBySection(0, 255);\r\n                    ColorAdmin._colour(this, RGBA);\r\n                    this.zOrder = zOrder ? zOrder : 0;\r\n                    this.alpha = 0;\r\n                    this.scaleX = 0;\r\n                    this.scaleY = 0;\r\n                }\r\n            }\r\n            _circulation._circulationImage = _circulationImage;\r\n            function _corner(parent, posArray, urlArr, colorRGBA, width, height, zOrder, parallel, speed) {\r\n                if (posArray.length <= 1) {\r\n                    return;\r\n                }\r\n                let Img = new _circulationImage(parent, urlArr, colorRGBA, width, height, zOrder);\r\n                let Imgfootprint = new _circulationImage(parent, urlArr, colorRGBA, width, height, zOrder);\r\n                Imgfootprint.filters = Img.filters;\r\n                Img.pos(posArray[0][0], posArray[0][1]);\r\n                Img.alpha = 1;\r\n                let moveCaller = {\r\n                    num: 0,\r\n                    alpha: true,\r\n                    move: false,\r\n                };\r\n                Img['moveCaller'] = moveCaller;\r\n                let _speed = speed ? speed : 3;\r\n                let index = 0;\r\n                Img.scale(1, 1);\r\n                TimerAdmin._frameLoop(1, moveCaller, () => {\r\n                    let Imgfootprint = new _circulationImage(parent, urlArr, colorRGBA, width, height, zOrder);\r\n                    Imgfootprint.filters = Img.filters;\r\n                    Imgfootprint.x = Img.x;\r\n                    Imgfootprint.y = Img.y;\r\n                    Imgfootprint.rotation = Img.rotation;\r\n                    Imgfootprint.alpha = 1;\r\n                    Imgfootprint.zOrder = -1;\r\n                    Imgfootprint.scaleX = Img.scaleX;\r\n                    Imgfootprint.scaleY = Img.scaleY;\r\n                    Ani2DAdmin.fadeOut(Imgfootprint, 1, 0, 200, 0, () => {\r\n                        Imgfootprint.removeSelf();\r\n                    });\r\n                    if (Img.parent == null) {\r\n                        Laya.timer.clearAll(moveCaller);\r\n                    }\r\n                    moveCaller.num++;\r\n                    if (urlArr) {\r\n                        if (moveCaller.num > urlArr.length) {\r\n                            moveCaller.num = 0;\r\n                        }\r\n                        else {\r\n                            Img.skin = urlArr[moveCaller.num];\r\n                        }\r\n                    }\r\n                });\r\n                var func = () => {\r\n                    let targetXY = [posArray[index][0], posArray[index][1]];\r\n                    let distance = (new Laya.Point(Img.x, Img.y)).distance(targetXY[0], targetXY[1]);\r\n                    if (parallel) {\r\n                        Img.rotation = ToolsAdmin._Point.pointByAngle(Img.x - targetXY[0], Img.y - targetXY[1]) + 180;\r\n                    }\r\n                    let time = speed * 100 + distance / 5;\r\n                    if (index == posArray.length + 1) {\r\n                        targetXY = [posArray[0][0], posArray[0][1]];\r\n                    }\r\n                    Ani2DAdmin.move(Img, targetXY[0], targetXY[1], time, () => {\r\n                        index++;\r\n                        if (index == posArray.length) {\r\n                            index = 0;\r\n                        }\r\n                        func();\r\n                    });\r\n                };\r\n                func();\r\n                return Img;\r\n            }\r\n            _circulation._corner = _corner;\r\n        })(_circulation = Eff2DAdmin._circulation || (Eff2DAdmin._circulation = {}));\r\n    })(Eff2DAdmin = Lwg.Eff2DAdmin || (Lwg.Eff2DAdmin = {}));\r\n    let ClickAdmin;\r\n    (function (ClickAdmin) {\r\n        ClickAdmin._switch = true;\r\n        ClickAdmin._absoluteSwitch = true;\r\n        ClickAdmin._assign = [];\r\n        function _checkAssign(name) {\r\n            let assign = false;\r\n            if (LwgClick._assign.length > 0) {\r\n                for (let index = 0; index < LwgClick._assign.length; index++) {\r\n                    const _name = LwgClick._assign[index];\r\n                    if (_name === name) {\r\n                        assign = true;\r\n                    }\r\n                }\r\n            }\r\n            return assign;\r\n        }\r\n        ClickAdmin._checkAssign = _checkAssign;\r\n        function _createButton() {\r\n            let Btn = new Laya.Sprite();\r\n            let img = new Laya.Image();\r\n            let label = new Laya.Label();\r\n        }\r\n        ClickAdmin._createButton = _createButton;\r\n        ClickAdmin._Type = {\r\n            no: 'no',\r\n            largen: 'largen',\r\n            reduce: 'reduce',\r\n        };\r\n        ClickAdmin._Use = {\r\n            get value() {\r\n                return this['Click/name'] ? this['Click/name'] : null;\r\n            },\r\n            set value(val) {\r\n                this['Click/name'] = val;\r\n            }\r\n        };\r\n        function _on(effect, target, caller, down, move, up, out) {\r\n            let btnEffect;\r\n            switch (effect) {\r\n                case ClickAdmin._Type.no:\r\n                    btnEffect = new _NoEffect();\r\n                    break;\r\n                case ClickAdmin._Type.largen:\r\n                    btnEffect = new _Largen();\r\n                    break;\r\n                case ClickAdmin._Type.reduce:\r\n                    btnEffect = new _Reduce();\r\n                    break;\r\n                default:\r\n                    btnEffect = new _NoEffect();\r\n                    break;\r\n            }\r\n            target.on(Laya.Event.MOUSE_DOWN, caller, down);\r\n            target.on(Laya.Event.MOUSE_MOVE, caller, move);\r\n            target.on(Laya.Event.MOUSE_UP, caller, up);\r\n            target.on(Laya.Event.MOUSE_OUT, caller, out);\r\n            target.on(Laya.Event.MOUSE_DOWN, caller, btnEffect.down);\r\n            target.on(Laya.Event.MOUSE_MOVE, caller, btnEffect.move);\r\n            target.on(Laya.Event.MOUSE_UP, caller, btnEffect.up);\r\n            target.on(Laya.Event.MOUSE_OUT, caller, btnEffect.out);\r\n        }\r\n        ClickAdmin._on = _on;\r\n        function _off(effect, target, caller, down, move, up, out) {\r\n            let btnEffect;\r\n            switch (effect) {\r\n                case ClickAdmin._Type.no:\r\n                    btnEffect = new _NoEffect();\r\n                    break;\r\n                case ClickAdmin._Type.largen:\r\n                    btnEffect = new _Largen();\r\n                    break;\r\n                case ClickAdmin._Type.reduce:\r\n                    btnEffect = new _Largen();\r\n                    break;\r\n                default:\r\n                    btnEffect = new _NoEffect();\r\n                    break;\r\n            }\r\n            target._off(Laya.Event.MOUSE_DOWN, caller, down);\r\n            target._off(Laya.Event.MOUSE_MOVE, caller, move);\r\n            target._off(Laya.Event.MOUSE_UP, caller, up);\r\n            target._off(Laya.Event.MOUSE_OUT, caller, out);\r\n            target._off(Laya.Event.MOUSE_DOWN, caller, btnEffect.down);\r\n            target._off(Laya.Event.MOUSE_MOVE, caller, btnEffect.move);\r\n            target._off(Laya.Event.MOUSE_UP, caller, btnEffect.up);\r\n            target._off(Laya.Event.MOUSE_OUT, caller, btnEffect.out);\r\n        }\r\n        ClickAdmin._off = _off;\r\n        class _NoEffect {\r\n            down() { }\r\n            move() { }\r\n            up() { }\r\n            out() { }\r\n        }\r\n        ClickAdmin._NoEffect = _NoEffect;\r\n        class _Largen {\r\n            down(event) {\r\n                event.currentTarget.scale(1.1, 1.1);\r\n                AudioAdmin._playSound(LwgClick._audioUrl);\r\n            }\r\n            move() { }\r\n            up(event) {\r\n                event.currentTarget.scale(1, 1);\r\n            }\r\n            out(event) {\r\n                event.currentTarget.scale(1, 1);\r\n            }\r\n        }\r\n        ClickAdmin._Largen = _Largen;\r\n        class _Reduce {\r\n            down(event) {\r\n                event.currentTarget.scale(0.9, 0.9);\r\n                AudioAdmin._playSound(LwgClick._audioUrl);\r\n            }\r\n            move() { }\r\n            up(event) {\r\n                event.currentTarget.scale(1, 1);\r\n            }\r\n            out(event) {\r\n                event.currentTarget.scale(1, 1);\r\n            }\r\n        }\r\n        ClickAdmin._Reduce = _Reduce;\r\n    })(ClickAdmin = Lwg.ClickAdmin || (Lwg.ClickAdmin = {}));\r\n    let Ani3DAdmin;\r\n    (function (Ani3DAdmin) {\r\n        Ani3DAdmin.tweenMap = {};\r\n        Ani3DAdmin.frameRate = 1;\r\n        function moveTo(target, toPos, duration, caller, ease, complete, delay = 0, coverBefore = true, update, frame) {\r\n            let position = target.transform.position.clone();\r\n            if (duration == 0 || duration === undefined || duration === null) {\r\n                target.transform.position = toPos.clone();\r\n                complete && complete.apply(caller);\r\n                return;\r\n            }\r\n            if (frame <= 0 || frame === undefined || frame === null) {\r\n                frame = Ani3DAdmin.frameRate;\r\n            }\r\n            let updateRenderPos = function () {\r\n                if (target.transform) {\r\n                    target.transform.position = position;\r\n                }\r\n                update && update();\r\n            };\r\n            Laya.timer.once(delay, target, function () {\r\n                Laya.timer.frameLoop(frame, target, updateRenderPos);\r\n            });\r\n            let endTween = function () {\r\n                if (target.transform) {\r\n                    target.transform.position = toPos.clone();\r\n                    Laya.timer.clear(target, updateRenderPos);\r\n                }\r\n                complete && complete.apply(caller);\r\n            };\r\n            let tween = Laya.Tween.to(position, { x: toPos.x, y: toPos.y, z: toPos.z }, duration, ease, Laya.Handler.create(target, endTween), delay, coverBefore);\r\n            if (!Ani3DAdmin.tweenMap[target.id]) {\r\n                Ani3DAdmin.tweenMap[target.id] = [];\r\n            }\r\n            Ani3DAdmin.tweenMap[target.id].push(tween);\r\n        }\r\n        Ani3DAdmin.moveTo = moveTo;\r\n        function rotateTo(target, toRotation, duration, caller, ease, complete, delay, coverBefore, update, frame) {\r\n            let rotation = target.transform.localRotationEuler.clone();\r\n            if (duration == 0 || duration === undefined || duration === null) {\r\n                target.transform.localRotationEuler = toRotation.clone();\r\n                complete && complete.apply(caller);\r\n                return;\r\n            }\r\n            if (frame <= 0 || frame === undefined || frame === null) {\r\n                frame = Ani3DAdmin.frameRate;\r\n            }\r\n            let updateRenderRotation = function () {\r\n                if (target.transform) {\r\n                    target.transform.localRotationEuler = rotation;\r\n                }\r\n                update && update();\r\n            };\r\n            Laya.timer.once(delay, target, function () {\r\n                Laya.timer.frameLoop(frame, target, updateRenderRotation);\r\n            });\r\n            let endTween = function () {\r\n                if (target.transform) {\r\n                    target.transform.localRotationEuler = toRotation.clone();\r\n                    Laya.timer.clear(target, updateRenderRotation);\r\n                }\r\n                complete && complete.apply(caller);\r\n            };\r\n            let tween = Laya.Tween.to(rotation, { x: toRotation.x, y: toRotation.y, z: toRotation.z }, duration, ease, Laya.Handler.create(target, endTween), delay, coverBefore);\r\n            if (!Ani3DAdmin.tweenMap[target.id]) {\r\n                Ani3DAdmin.tweenMap[target.id] = [];\r\n            }\r\n            Ani3DAdmin.tweenMap[target.id].push(tween);\r\n        }\r\n        Ani3DAdmin.rotateTo = rotateTo;\r\n        function scaleTo(target, toScale, duration, caller, ease, complete, delay, coverBefore, update, frame) {\r\n            let localScale = target.transform.localScale.clone();\r\n            if (duration == 0 || duration === undefined || duration === null) {\r\n                target.transform.localScale = toScale.clone();\r\n                complete && complete.apply(caller);\r\n                return;\r\n            }\r\n            if (frame <= 0 || frame === undefined || frame === null) {\r\n                frame = Ani3DAdmin.frameRate;\r\n            }\r\n            let updateRenderPos = function () {\r\n                target.transform.localScale = localScale.clone();\r\n                update && update();\r\n            };\r\n            Laya.timer.once(delay, this, function () {\r\n                Laya.timer.frameLoop(frame, target, updateRenderPos);\r\n            });\r\n            let endTween = function () {\r\n                target.transform.localScale = toScale.clone();\r\n                Laya.timer.clear(target, updateRenderPos);\r\n                complete && complete.apply(caller);\r\n            };\r\n            let tween = Laya.Tween.to(localScale, { x: toScale.x, y: toScale.y, z: toScale.z }, duration, ease, Laya.Handler.create(target, endTween), delay, coverBefore);\r\n            if (!Ani3DAdmin.tweenMap[target.id]) {\r\n                Ani3DAdmin.tweenMap[target.id] = [];\r\n            }\r\n            Ani3DAdmin.tweenMap[target.id].push(tween);\r\n        }\r\n        Ani3DAdmin.scaleTo = scaleTo;\r\n        function ClearTween(target) {\r\n            let tweens = Ani3DAdmin.tweenMap[target.id];\r\n            if (tweens && tweens.length) {\r\n                while (tweens.length > 0) {\r\n                    let tween = tweens.pop();\r\n                    tween.clear();\r\n                }\r\n            }\r\n            Laya.timer.clearAll(target);\r\n        }\r\n        Ani3DAdmin.ClearTween = ClearTween;\r\n        function rock(target, range, duration, caller, func, delayed, ease) {\r\n            if (!delayed) {\r\n                delayed = 0;\r\n            }\r\n            let v1 = new Laya.Vector3(target.transform.localRotationEulerX + range.x, target.transform.localRotationEulerY + range.y, target.transform.localRotationEulerZ + range.z);\r\n            rotateTo(target, v1, duration / 2, caller, ease, () => {\r\n                let v2 = new Laya.Vector3(target.transform.localRotationEulerX - range.x * 2, target.transform.localRotationEulerY - range.y * 2, target.transform.localRotationEulerZ - range.z * 2);\r\n                rotateTo(target, v2, duration, caller, ease, () => {\r\n                    let v3 = new Laya.Vector3(target.transform.localRotationEulerX + range.x, target.transform.localRotationEulerY + range.y, target.transform.localRotationEulerZ + range.z);\r\n                    rotateTo(target, v3, duration / 2, caller, ease, () => {\r\n                        if (func) {\r\n                            func();\r\n                        }\r\n                    });\r\n                });\r\n            }, delayed);\r\n        }\r\n        Ani3DAdmin.rock = rock;\r\n        function moveRotateTo(Sp3d, Target, duration, caller, ease, complete, delay, coverBefore, update, frame) {\r\n            moveTo(Sp3d, Target.transform.position, duration, caller, ease, null, delay, coverBefore, update, frame);\r\n            rotateTo(Sp3d, Target.transform.localRotationEuler, duration, caller, ease, complete, delay, coverBefore, null, frame);\r\n        }\r\n        Ani3DAdmin.moveRotateTo = moveRotateTo;\r\n    })(Ani3DAdmin = Lwg.Ani3DAdmin || (Lwg.Ani3DAdmin = {}));\r\n    let Ani2DAdmin;\r\n    (function (Ani2DAdmin) {\r\n        function _clearAll(arr) {\r\n            for (let index = 0; index < arr.length; index++) {\r\n                Laya.Tween.clearAll(arr[index]);\r\n            }\r\n        }\r\n        Ani2DAdmin._clearAll = _clearAll;\r\n        function circulation_scale(node, range, time, delayed, func) {\r\n            Laya.Tween.to(node, { scaleX: 1 + range, scaleY: 1 + range }, time, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(node, { scaleX: 1 - range, scaleY: 1 - range }, time / 2, null, Laya.Handler.create(this, function () {\r\n                    Laya.Tween.to(node, { scaleX: 1, scaleY: 1 }, time / 2, null, Laya.Handler.create(this, function () {\r\n                        if (func) {\r\n                            func();\r\n                        }\r\n                    }), 0);\r\n                }), 0);\r\n            }), delayed ? delayed : 0);\r\n        }\r\n        Ani2DAdmin.circulation_scale = circulation_scale;\r\n        function leftRight_Shake(node, range, time, delayed, func, click) {\r\n            if (!delayed) {\r\n                delayed = 0;\r\n            }\r\n            if (!click) {\r\n                LwgClick._switch = false;\r\n            }\r\n            Laya.Tween.to(node, { x: node.x - range }, time, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(node, { x: node.x + range * 2 }, time, null, Laya.Handler.create(this, function () {\r\n                    Laya.Tween.to(node, { x: node.x - range }, time, null, Laya.Handler.create(this, function () {\r\n                        if (func) {\r\n                            func();\r\n                        }\r\n                        if (!click) {\r\n                            LwgClick._switch = true;\r\n                        }\r\n                    }));\r\n                }));\r\n            }), delayed);\r\n        }\r\n        Ani2DAdmin.leftRight_Shake = leftRight_Shake;\r\n        function rotate(node, Erotate, time, delayed, func) {\r\n            Laya.Tween.to(node, { rotation: Erotate }, time, null, Laya.Handler.create(node, function () {\r\n                if (func) {\r\n                    func();\r\n                }\r\n            }), delayed ? delayed : 0);\r\n        }\r\n        Ani2DAdmin.rotate = rotate;\r\n        function upDown_Overturn(node, time, func) {\r\n            Laya.Tween.to(node, { scaleY: 0 }, time, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(node, { scaleY: 1 }, time, null, Laya.Handler.create(this, function () {\r\n                    Laya.Tween.to(node, { scaleY: 0 }, time, null, Laya.Handler.create(this, function () {\r\n                        Laya.Tween.to(node, { scaleY: 1 }, time, null, Laya.Handler.create(this, function () {\r\n                            if (func !== null || func !== undefined) {\r\n                                func();\r\n                            }\r\n                        }), 0);\r\n                    }), 0);\r\n                }), 0);\r\n            }), 0);\r\n        }\r\n        Ani2DAdmin.upDown_Overturn = upDown_Overturn;\r\n        function leftRight_Overturn(node, time, func) {\r\n            Laya.Tween.to(node, { scaleX: 0 }, time, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(node, { scaleX: 1 }, time, null, Laya.Handler.create(this, function () {\r\n                    Laya.Tween.to(node, { scaleX: 0 }, time, null, Laya.Handler.create(this, function () {\r\n                        Laya.Tween.to(node, { scaleX: 1 }, time, null, Laya.Handler.create(this, function () {\r\n                        }), 0);\r\n                        if (func !== null) {\r\n                            func();\r\n                        }\r\n                    }), 0);\r\n                }), 0);\r\n            }), 0);\r\n        }\r\n        Ani2DAdmin.leftRight_Overturn = leftRight_Overturn;\r\n        function upDwon_Shake(node, range, time, delayed, func) {\r\n            Laya.Tween.to(node, { y: node.y + range }, time, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(node, { y: node.y - range * 2 }, time, null, Laya.Handler.create(this, function () {\r\n                    Laya.Tween.to(node, { y: node.y + range }, time, null, Laya.Handler.create(this, function () {\r\n                        if (func !== null) {\r\n                            func();\r\n                        }\r\n                    }));\r\n                }));\r\n            }), delayed);\r\n        }\r\n        Ani2DAdmin.upDwon_Shake = upDwon_Shake;\r\n        function fadeOut(node, alpha1, alpha2, time, delayed, func, stageClick) {\r\n            node.alpha = alpha1;\r\n            if (stageClick) {\r\n                LwgClick._switch = false;\r\n            }\r\n            Laya.Tween.to(node, { alpha: alpha2 }, time, null, Laya.Handler.create(this, function () {\r\n                if (func) {\r\n                    func();\r\n                }\r\n                if (stageClick) {\r\n                    LwgClick._switch = true;\r\n                }\r\n            }), delayed ? delayed : 0);\r\n        }\r\n        Ani2DAdmin.fadeOut = fadeOut;\r\n        function fadeOut_KickBack(node, alpha1, alpha2, time, delayed, func) {\r\n            node.alpha = alpha1;\r\n            Laya.Tween.to(node, { alpha: alpha2 }, time, null, Laya.Handler.create(this, function () {\r\n                if (func !== null) {\r\n                    func();\r\n                }\r\n            }), delayed);\r\n        }\r\n        Ani2DAdmin.fadeOut_KickBack = fadeOut_KickBack;\r\n        function move_FadeOut(node, firstX, firstY, targetX, targetY, time, delayed, func) {\r\n            node.alpha = 0;\r\n            node.x = firstX;\r\n            node.y = firstY;\r\n            Laya.Tween.to(node, { alpha: 1, x: targetX, y: targetY }, time, null, Laya.Handler.create(this, function () {\r\n                if (func !== null) {\r\n                    func();\r\n                }\r\n            }), delayed);\r\n        }\r\n        Ani2DAdmin.move_FadeOut = move_FadeOut;\r\n        function move_Fade_Out(node, firstX, firstY, targetX, targetY, time, delayed, func) {\r\n            node.alpha = 1;\r\n            node.x = firstX;\r\n            node.y = firstY;\r\n            Laya.Tween.to(node, { alpha: 0, x: targetX, y: targetY }, time, null, Laya.Handler.create(this, function () {\r\n                if (func !== null) {\r\n                    func();\r\n                }\r\n            }), delayed);\r\n        }\r\n        Ani2DAdmin.move_Fade_Out = move_Fade_Out;\r\n        function move_FadeOut_Scale_01(node, firstX, firstY, targetX, targetY, time, delayed, func) {\r\n            node.alpha = 0;\r\n            node.targetX = 0;\r\n            node.targetY = 0;\r\n            node.x = firstX;\r\n            node.y = firstY;\r\n            Laya.Tween.to(node, { alpha: 1, x: targetX, y: targetY, scaleX: 1, scaleY: 1 }, time, null, Laya.Handler.create(this, function () {\r\n                if (func !== null) {\r\n                    func();\r\n                }\r\n            }), delayed);\r\n        }\r\n        Ani2DAdmin.move_FadeOut_Scale_01 = move_FadeOut_Scale_01;\r\n        function move_Scale(node, fScale, fX, fY, tX, tY, eScale, time, delayed, ease, func) {\r\n            node.scaleX = fScale;\r\n            node.scaleY = fScale;\r\n            node.x = fX;\r\n            node.y = fY;\r\n            Laya.Tween.to(node, { x: tX, y: tY, scaleX: eScale, scaleY: eScale }, time, ease ? null : ease, Laya.Handler.create(this, function () {\r\n                if (func) {\r\n                    func();\r\n                }\r\n            }), delayed ? delayed : 0);\r\n        }\r\n        Ani2DAdmin.move_Scale = move_Scale;\r\n        function move_rotate(Node, tRotate, tPoint, time, delayed, func) {\r\n            Laya.Tween.to(Node, { rotation: tRotate, x: tPoint.x, y: tPoint.y }, time, null, Laya.Handler.create(Node, () => {\r\n                if (func) {\r\n                    func();\r\n                }\r\n            }), delayed ? delayed : 0);\r\n        }\r\n        Ani2DAdmin.move_rotate = move_rotate;\r\n        function rotate_Scale(target, fRotate, fScaleX, fScaleY, eRotate, eScaleX, eScaleY, time, delayed, func) {\r\n            target.scaleX = fScaleX;\r\n            target.scaleY = fScaleY;\r\n            target.rotation = fRotate;\r\n            Laya.Tween.to(target, { rotation: eRotate, scaleX: eScaleX, scaleY: eScaleY }, time, null, Laya.Handler.create(this, () => {\r\n                if (func) {\r\n                    func();\r\n                }\r\n                target.rotation = 0;\r\n            }), delayed ? delayed : 0);\r\n        }\r\n        Ani2DAdmin.rotate_Scale = rotate_Scale;\r\n        function drop_Simple(node, fY, tY, rotation, time, delayed, func) {\r\n            node.y = fY;\r\n            Laya.Tween.to(node, { y: tY, rotation: rotation }, time, Laya.Ease.circOut, Laya.Handler.create(this, function () {\r\n                if (func !== null) {\r\n                    func();\r\n                }\r\n            }), delayed);\r\n        }\r\n        Ani2DAdmin.drop_Simple = drop_Simple;\r\n        function drop_KickBack(target, fAlpha, firstY, targetY, extendY, time1, delayed, func) {\r\n            target.alpha = fAlpha;\r\n            target.y = firstY;\r\n            if (!delayed) {\r\n                delayed = 0;\r\n            }\r\n            Laya.Tween.to(target, { alpha: 1, y: targetY + extendY }, time1, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(target, { y: targetY - extendY / 2 }, time1 / 2, null, Laya.Handler.create(this, function () {\r\n                    Laya.Tween.to(target, { y: targetY }, time1 / 4, null, Laya.Handler.create(this, function () {\r\n                        if (func) {\r\n                            func();\r\n                        }\r\n                    }), 0);\r\n                }), 0);\r\n            }), delayed);\r\n        }\r\n        Ani2DAdmin.drop_KickBack = drop_KickBack;\r\n        function drop_Excursion(node, targetY, targetX, rotation, time, delayed, func) {\r\n            Laya.Tween.to(node, { x: node.x + targetX, y: node.y + targetY * 1 / 6 }, time, Laya.Ease.expoIn, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(node, { x: node.x + targetX + 50, y: targetY, rotation: rotation }, time, null, Laya.Handler.create(this, function () {\r\n                    if (func !== null) {\r\n                        func();\r\n                    }\r\n                }), 0);\r\n            }), delayed);\r\n        }\r\n        Ani2DAdmin.drop_Excursion = drop_Excursion;\r\n        function goUp_Simple(node, initialY, initialR, targetY, time, delayed, func) {\r\n            node.y = initialY;\r\n            node.rotation = initialR;\r\n            Laya.Tween.to(node, { y: targetY, rotation: 0 }, time, Laya.Ease.cubicOut, Laya.Handler.create(this, function () {\r\n                if (func !== null) {\r\n                    func();\r\n                }\r\n            }), delayed);\r\n        }\r\n        Ani2DAdmin.goUp_Simple = goUp_Simple;\r\n        function cardRotateX_TowFace(node, time, func1, delayed, func2) {\r\n            Laya.Tween.to(node, { scaleX: 0 }, time, null, Laya.Handler.create(this, function () {\r\n                ToolsAdmin._Node.childrenVisible2D(node, false);\r\n                if (func1) {\r\n                    func1();\r\n                }\r\n                Laya.Tween.to(node, { scaleX: 1 }, time * 0.9, null, Laya.Handler.create(this, function () {\r\n                    Laya.Tween.to(node, { scaleX: 0 }, time * 0.8, null, Laya.Handler.create(this, function () {\r\n                        ToolsAdmin._Node.childrenVisible2D(node, true);\r\n                        Laya.Tween.to(node, { scaleX: 1 }, time * 0.7, null, Laya.Handler.create(this, function () {\r\n                            if (func2) {\r\n                                func2();\r\n                            }\r\n                        }), 0);\r\n                    }), 0);\r\n                }), 0);\r\n            }), delayed);\r\n        }\r\n        Ani2DAdmin.cardRotateX_TowFace = cardRotateX_TowFace;\r\n        function cardRotateX_OneFace(node, func1, time, delayed, func2) {\r\n            Laya.Tween.to(node, { scaleX: 0 }, time, null, Laya.Handler.create(this, function () {\r\n                if (func1 !== null) {\r\n                    func1();\r\n                }\r\n                Laya.Tween.to(node, { scaleX: 1 }, time, null, Laya.Handler.create(this, function () {\r\n                    if (func2 !== null) {\r\n                        func2();\r\n                    }\r\n                }), 0);\r\n            }), delayed);\r\n        }\r\n        Ani2DAdmin.cardRotateX_OneFace = cardRotateX_OneFace;\r\n        function cardRotateY_TowFace(node, time, func1, delayed, func2) {\r\n            Laya.Tween.to(node, { scaleY: 0 }, time, null, Laya.Handler.create(this, function () {\r\n                ToolsAdmin._Node.childrenVisible2D(node, false);\r\n                if (func1) {\r\n                    func1();\r\n                }\r\n                Laya.Tween.to(node, { scaleY: 1 }, time, null, Laya.Handler.create(this, function () {\r\n                    Laya.Tween.to(node, { scaleY: 0 }, time, null, Laya.Handler.create(this, function () {\r\n                        Laya.Tween.to(node, { scaleY: 1 }, time * 1 / 2, null, Laya.Handler.create(this, function () {\r\n                            ToolsAdmin._Node.childrenVisible2D(node, true);\r\n                            if (func2) {\r\n                                func2();\r\n                            }\r\n                        }), 0);\r\n                    }), 0);\r\n                }), 0);\r\n            }), delayed);\r\n        }\r\n        Ani2DAdmin.cardRotateY_TowFace = cardRotateY_TowFace;\r\n        function cardRotateY_OneFace(node, func1, time, delayed, func2) {\r\n            Laya.Tween.to(node, { scaleY: 0 }, time, null, Laya.Handler.create(this, function () {\r\n                if (func1) {\r\n                    func1();\r\n                }\r\n                Laya.Tween.to(node, { scaleY: 1 }, time, null, Laya.Handler.create(this, function () {\r\n                    if (func2) {\r\n                        func2();\r\n                    }\r\n                }), 0);\r\n            }), delayed ? delayed : 0);\r\n        }\r\n        Ani2DAdmin.cardRotateY_OneFace = cardRotateY_OneFace;\r\n        function move_changeRotate(node, targetX, targetY, per, rotation_pe, time, func) {\r\n            let targetPerX = targetX * per + node.x * (1 - per);\r\n            let targetPerY = targetY * per + node.y * (1 - per);\r\n            Laya.Tween.to(node, { x: targetPerX, y: targetPerY, rotation: 45 }, time, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(node, { x: targetX, y: targetY, rotation: 0 }, time, null, Laya.Handler.create(this, function () {\r\n                    if (func !== null) {\r\n                        func();\r\n                    }\r\n                }), 0);\r\n            }), 0);\r\n        }\r\n        Ani2DAdmin.move_changeRotate = move_changeRotate;\r\n        function bomb_LeftRight(node, MaxScale, time, func, delayed) {\r\n            Laya.Tween.to(node, { scaleX: MaxScale }, time, Laya.Ease.cubicInOut, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(node, { scaleX: 0.85 }, time * 0.5, null, Laya.Handler.create(this, function () {\r\n                    Laya.Tween.to(node, { scaleX: MaxScale * 0.9 }, time * 0.55, null, Laya.Handler.create(this, function () {\r\n                        Laya.Tween.to(node, { scaleX: 0.95 }, time * 0.6, null, Laya.Handler.create(this, function () {\r\n                            Laya.Tween.to(node, { scaleX: 1 }, time * 0.65, null, Laya.Handler.create(this, function () {\r\n                                if (func)\r\n                                    func();\r\n                            }), 0);\r\n                        }), 0);\r\n                    }), 0);\r\n                }), 0);\r\n            }), delayed);\r\n        }\r\n        Ani2DAdmin.bomb_LeftRight = bomb_LeftRight;\r\n        function bombs_Appear(node, firstAlpha, endScale, maxScale, rotation, time, func, delayed) {\r\n            node.scale(0, 0);\r\n            node.alpha = firstAlpha;\r\n            Laya.Tween.to(node, { scaleX: maxScale, scaleY: maxScale, alpha: 1, rotation: rotation }, time, Laya.Ease.cubicInOut, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(node, { scaleX: endScale, scaleY: endScale, rotation: 0 }, time / 2, null, Laya.Handler.create(this, function () {\r\n                    Laya.Tween.to(node, { scaleX: endScale + (maxScale - endScale) / 3, scaleY: endScale + (maxScale - endScale) / 3, rotation: 0 }, time / 3, null, Laya.Handler.create(this, function () {\r\n                        Laya.Tween.to(node, { scaleX: endScale, scaleY: endScale, rotation: 0 }, time / 4, null, Laya.Handler.create(this, function () {\r\n                            if (func) {\r\n                                func();\r\n                            }\r\n                        }), 0);\r\n                    }), 0);\r\n                }), 0);\r\n            }), delayed ? delayed : 0);\r\n        }\r\n        Ani2DAdmin.bombs_Appear = bombs_Appear;\r\n        function bombs_AppearAllChild(node, firstAlpha, endScale, scale1, rotation1, time1, interval, func, audioType) {\r\n            let de1 = 0;\r\n            if (!interval) {\r\n                interval = 100;\r\n            }\r\n            for (let index = 0; index < node.numChildren; index++) {\r\n                let Child = node.getChildAt(index);\r\n                Child.alpha = 0;\r\n                Laya.timer.once(de1, this, () => {\r\n                    Child.alpha = 1;\r\n                    if (index !== node.numChildren - 1) {\r\n                        func == null;\r\n                    }\r\n                    bombs_Appear(Child, firstAlpha, endScale, scale1, rotation1, time1, func);\r\n                });\r\n                de1 += interval;\r\n            }\r\n        }\r\n        Ani2DAdmin.bombs_AppearAllChild = bombs_AppearAllChild;\r\n        function bombs_VanishAllChild(node, endScale, alpha, rotation, time, interval, func) {\r\n            let de1 = 0;\r\n            if (!interval) {\r\n                interval = 100;\r\n            }\r\n            for (let index = 0; index < node.numChildren; index++) {\r\n                let Child = node.getChildAt(index);\r\n                Laya.timer.once(de1, this, () => {\r\n                    if (index !== node.numChildren - 1) {\r\n                        func == null;\r\n                    }\r\n                    bombs_Vanish(node, endScale, alpha, rotation, time, func);\r\n                });\r\n                de1 += interval;\r\n            }\r\n        }\r\n        Ani2DAdmin.bombs_VanishAllChild = bombs_VanishAllChild;\r\n        function bombs_Vanish(node, scale, alpha, rotation, time, func, delayed) {\r\n            Laya.Tween.to(node, { scaleX: scale, scaleY: scale, alpha: alpha, rotation: rotation }, time, Laya.Ease.cubicOut, Laya.Handler.create(this, function () {\r\n                if (func) {\r\n                    func();\r\n                }\r\n            }), delayed ? delayed : 0);\r\n        }\r\n        Ani2DAdmin.bombs_Vanish = bombs_Vanish;\r\n        function swell_shrink(node, firstScale, scale1, time, delayed, func) {\r\n            if (!delayed) {\r\n                delayed = 0;\r\n            }\r\n            Laya.Tween.to(node, { scaleX: scale1, scaleY: scale1, alpha: 1, }, time, Laya.Ease.cubicInOut, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(node, { scaleX: firstScale, scaleY: firstScale, rotation: 0 }, time, null, Laya.Handler.create(this, function () {\r\n                    Laya.Tween.to(node, { scaleX: firstScale + (scale1 - firstScale) * 0.5, scaleY: firstScale + (scale1 - firstScale) * 0.5, rotation: 0 }, time * 0.5, null, Laya.Handler.create(this, function () {\r\n                        Laya.Tween.to(node, { scaleX: firstScale, scaleY: firstScale, rotation: 0 }, time, null, Laya.Handler.create(this, function () {\r\n                            if (func) {\r\n                                func();\r\n                            }\r\n                        }), 0);\r\n                    }), 0);\r\n                }), 0);\r\n            }), delayed);\r\n        }\r\n        Ani2DAdmin.swell_shrink = swell_shrink;\r\n        function move(node, targetX, targetY, time, func, delayed, ease) {\r\n            Laya.Tween.to(node, { x: targetX, y: targetY }, time, ease ? ease : null, Laya.Handler.create(this, function () {\r\n                if (func) {\r\n                    func();\r\n                }\r\n            }), delayed ? delayed : 0);\r\n        }\r\n        Ani2DAdmin.move = move;\r\n        function move_Deform_X(node, firstX, firstR, targetX, scaleX, scaleY, time, delayed, func) {\r\n            node.alpha = 0;\r\n            node.x = firstX;\r\n            node.rotation = firstR;\r\n            Laya.Tween.to(node, { x: targetX, scaleX: 1 + scaleX, scaleY: 1 + scaleY, rotation: firstR / 3, alpha: 1 }, time, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(node, { scaleX: 1, scaleY: 1, rotation: 0 }, time, null, Laya.Handler.create(this, function () {\r\n                    if (func !== null) {\r\n                        func();\r\n                    }\r\n                }), 0);\r\n            }), delayed);\r\n        }\r\n        Ani2DAdmin.move_Deform_X = move_Deform_X;\r\n        function move_Deform_Y(target, firstY, firstR, targeY, scaleX, scaleY, time, delayed, func) {\r\n            target.alpha = 0;\r\n            if (firstY) {\r\n                target.y = firstY;\r\n            }\r\n            target.rotation = firstR;\r\n            Laya.Tween.to(target, { y: targeY, scaleX: 1 + scaleX, scaleY: 1 + scaleY, rotation: firstR / 3, alpha: 1 }, time, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(target, { scaleX: 1, scaleY: 1, rotation: 0 }, time, null, Laya.Handler.create(this, function () {\r\n                    if (func !== null) {\r\n                        func();\r\n                    }\r\n                }), 0);\r\n            }), delayed);\r\n        }\r\n        Ani2DAdmin.move_Deform_Y = move_Deform_Y;\r\n        function blink_FadeOut_v(target, minAlpha, maXalpha, time, delayed, func) {\r\n            target.alpha = minAlpha;\r\n            Laya.Tween.to(target, { alpha: maXalpha }, time, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(target, { alpha: minAlpha }, time, null, Laya.Handler.create(this, function () {\r\n                    if (func !== null) {\r\n                        func();\r\n                    }\r\n                }), 0);\r\n            }), delayed);\r\n        }\r\n        Ani2DAdmin.blink_FadeOut_v = blink_FadeOut_v;\r\n        function blink_FadeOut(target, minAlpha, maXalpha, time, delayed, func) {\r\n            target.alpha = minAlpha;\r\n            if (!delayed) {\r\n                delayed = 0;\r\n            }\r\n            Laya.Tween.to(target, { alpha: minAlpha }, time, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(target, { alpha: maXalpha }, time, null, Laya.Handler.create(this, function () {\r\n                    if (func) {\r\n                        func();\r\n                    }\r\n                }), 0);\r\n            }), delayed);\r\n        }\r\n        Ani2DAdmin.blink_FadeOut = blink_FadeOut;\r\n        function shookHead_Simple(target, rotate, time, delayed, func) {\r\n            let firstR = target.rotation;\r\n            Laya.Tween.to(target, { rotation: firstR + rotate }, time, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(target, { rotation: firstR - rotate * 2 }, time, null, Laya.Handler.create(this, function () {\r\n                    Laya.Tween.to(target, { rotation: firstR + rotate }, time, null, Laya.Handler.create(this, function () {\r\n                        Laya.Tween.to(target, { rotation: firstR }, time, null, Laya.Handler.create(this, function () {\r\n                            if (func) {\r\n                                func();\r\n                            }\r\n                        }), 0);\r\n                    }), 0);\r\n                }), 0);\r\n            }), delayed ? delayed : 0);\r\n        }\r\n        Ani2DAdmin.shookHead_Simple = shookHead_Simple;\r\n        function HintAni_01(target, upNum, time1, stopTime, downNum, time2, func) {\r\n            target.alpha = 0;\r\n            Laya.Tween.to(target, { alpha: 1, y: target.y - upNum }, time1, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(target, { y: target.y - 15 }, stopTime, null, Laya.Handler.create(this, function () {\r\n                    Laya.Tween.to(target, { alpha: 0, y: target.y + upNum + downNum }, time2, null, Laya.Handler.create(this, function () {\r\n                        if (func !== null) {\r\n                            func();\r\n                        }\r\n                    }), 0);\r\n                }), 0);\r\n            }), 0);\r\n        }\r\n        Ani2DAdmin.HintAni_01 = HintAni_01;\r\n        function scale_Alpha(target, fAlpha, fScaleX, fScaleY, eScaleX, eScaleY, eAlpha, time, delayed, func, ease) {\r\n            if (!delayed) {\r\n                delayed = 0;\r\n            }\r\n            if (!ease) {\r\n                ease = null;\r\n            }\r\n            target.alpha = fAlpha;\r\n            target.scaleX = fScaleX;\r\n            target.scaleY = fScaleY;\r\n            Laya.Tween.to(target, { scaleX: eScaleX, scaleY: eScaleY, alpha: eAlpha }, time, ease, Laya.Handler.create(this, function () {\r\n                if (func) {\r\n                    func();\r\n                }\r\n            }), delayed);\r\n        }\r\n        Ani2DAdmin.scale_Alpha = scale_Alpha;\r\n        function scale(target, fScaleX, fScaleY, eScaleX, eScaleY, time, delayed, func, ease) {\r\n            target.scaleX = fScaleX;\r\n            target.scaleY = fScaleY;\r\n            Laya.Tween.to(target, { scaleX: eScaleX, scaleY: eScaleY }, time, ease ? ease : null, Laya.Handler.create(this, function () {\r\n                if (func) {\r\n                    func();\r\n                }\r\n            }), delayed ? delayed : 0);\r\n        }\r\n        Ani2DAdmin.scale = scale;\r\n        function rotate_Magnify_KickBack(node, eAngle, eScale, time1, time2, delayed1, delayed2, func) {\r\n            node.alpha = 0;\r\n            node.scaleX = 0;\r\n            node.scaleY = 0;\r\n            Laya.Tween.to(node, { alpha: 1, rotation: 360 + eAngle, scaleX: 1 + eScale, scaleY: 1 + eScale }, time1, null, Laya.Handler.create(this, function () {\r\n                Laya.Tween.to(node, { rotation: 360 - eAngle / 2, scaleX: 1 + eScale / 2, scaleY: 1 + eScale / 2 }, time2, null, Laya.Handler.create(this, function () {\r\n                    Laya.Tween.to(node, { rotation: 360 + eAngle / 3, scaleX: 1 + eScale / 5, scaleY: 1 + eScale / 5 }, time2, null, Laya.Handler.create(this, function () {\r\n                        Laya.Tween.to(node, { rotation: 360, scaleX: 1, scaleY: 1 }, time2, null, Laya.Handler.create(this, function () {\r\n                            node.rotation = 0;\r\n                            if (func !== null) {\r\n                                func();\r\n                            }\r\n                        }), 0);\r\n                    }), delayed2);\r\n                }), 0);\r\n            }), delayed1);\r\n        }\r\n        Ani2DAdmin.rotate_Magnify_KickBack = rotate_Magnify_KickBack;\r\n    })(Ani2DAdmin = Lwg.Ani2DAdmin || (Lwg.Ani2DAdmin = {}));\r\n    let SetAdmin;\r\n    (function (SetAdmin) {\r\n        SetAdmin._sound = {\r\n            get switch() {\r\n                return Laya.LocalStorage.getItem('Setting/sound') == '0' ? false : true;\r\n            },\r\n            set switch(value) {\r\n                let val;\r\n                if (value) {\r\n                    val = 1;\r\n                }\r\n                else {\r\n                    val = 0;\r\n                }\r\n                Laya.LocalStorage.setItem('Setting/sound', val.toString());\r\n            }\r\n        };\r\n        SetAdmin._bgMusic = {\r\n            get switch() {\r\n                return Laya.LocalStorage.getItem('Setting/bgMusic') == '0' ? false : true;\r\n            },\r\n            set switch(value) {\r\n                let val;\r\n                if (value) {\r\n                    val = 1;\r\n                    Laya.LocalStorage.setItem('Setting/bgMusic', val.toString());\r\n                    AudioAdmin._playMusic();\r\n                }\r\n                else {\r\n                    val = 0;\r\n                    Laya.LocalStorage.setItem('Setting/bgMusic', val.toString());\r\n                    AudioAdmin._stopMusic();\r\n                }\r\n            }\r\n        };\r\n        SetAdmin._shake = {\r\n            get switch() {\r\n                return Laya.LocalStorage.getItem('Setting/shake') == '0' ? false : true;\r\n            },\r\n            set switch(value) {\r\n                let val;\r\n                if (value) {\r\n                    val = 1;\r\n                }\r\n                else {\r\n                    val = 0;\r\n                }\r\n                Laya.LocalStorage.setItem('Setting/shake', val.toString());\r\n            }\r\n        };\r\n        function _createBtnSet(x, y, width, height, skin, parent, ZOder) {\r\n            let btn = new Laya.Image;\r\n            btn.width = width ? width : 100;\r\n            btn.height = width ? width : 100;\r\n            btn.skin = skin ? skin : 'Frame/UI/icon_set.png';\r\n            if (parent) {\r\n                parent.addChild(btn);\r\n            }\r\n            else {\r\n                Laya.stage.addChild(btn);\r\n            }\r\n            btn.pivotX = btn.width / 2;\r\n            btn.pivotY = btn.height / 2;\r\n            btn.x = x;\r\n            btn.y = y;\r\n            btn.zOrder = ZOder ? ZOder : 100;\r\n            var btnSetUp = function (e) {\r\n                e.stopPropagation();\r\n                LwgScene._openScene(LwgScene._BaseName.Set);\r\n            };\r\n            LwgClick._on(LwgClick._Type.largen, btn, null, null, btnSetUp, null);\r\n            SetAdmin._BtnSet = btn;\r\n            SetAdmin._BtnSet.name = 'BtnSetNode';\r\n            return btn;\r\n        }\r\n        SetAdmin._createBtnSet = _createBtnSet;\r\n        function btnSetAppear(delayed, x, y) {\r\n            if (!SetAdmin._BtnSet) {\r\n                return;\r\n            }\r\n            if (delayed) {\r\n                Ani2DAdmin.scale_Alpha(SetAdmin._BtnSet, 0, 1, 1, 1, 1, 1, delayed, 0, f => {\r\n                    SetAdmin._BtnSet.visible = true;\r\n                });\r\n            }\r\n            else {\r\n                SetAdmin._BtnSet.visible = true;\r\n            }\r\n            if (x) {\r\n                SetAdmin._BtnSet.x = x;\r\n            }\r\n            if (y) {\r\n                SetAdmin._BtnSet.y = y;\r\n            }\r\n        }\r\n        SetAdmin.btnSetAppear = btnSetAppear;\r\n        function btnSetVinish(delayed) {\r\n            if (!SetAdmin._BtnSet) {\r\n                return;\r\n            }\r\n            if (delayed) {\r\n                Ani2DAdmin.scale_Alpha(SetAdmin._BtnSet, 1, 1, 1, 1, 1, 0, delayed, 0, f => {\r\n                    SetAdmin._BtnSet.visible = false;\r\n                });\r\n            }\r\n            else {\r\n                SetAdmin._BtnSet.visible = false;\r\n            }\r\n        }\r\n        SetAdmin.btnSetVinish = btnSetVinish;\r\n    })(SetAdmin = Lwg.SetAdmin || (Lwg.SetAdmin = {}));\r\n    let AudioAdmin;\r\n    (function (AudioAdmin) {\r\n        let _voiceUrl;\r\n        (function (_voiceUrl) {\r\n            _voiceUrl[\"bgm\"] = \"Lwg/Voice/bgm.mp3\";\r\n            _voiceUrl[\"btn\"] = \"https://h5.tomatojoy.cn/res/ark/3d04671eec61b1e12a6c02e54c1e7320/1.0.0/3DDressUp/Voice/btn.wav\";\r\n            _voiceUrl[\"victory\"] = \"https://h5.tomatojoy.cn/res/ark/3d04671eec61b1e12a6c02e54c1e7320/1.0.0/3DDressUp/Voice/guoguan.wav\";\r\n            _voiceUrl[\"defeated\"] = \"https://h5.tomatojoy.cn/res/ark/3d04671eec61b1e12a6c02e54c1e7320/1.0.0/3DDressUp/Voice/wancheng.wav\";\r\n            _voiceUrl[\"huodejinbi\"] = \"https://h5.tomatojoy.cn/res/ark/3d04671eec61b1e12a6c02e54c1e7320/1.0.0/3DDressUp/Voice/huodejinbi.wav\";\r\n        })(_voiceUrl = AudioAdmin._voiceUrl || (AudioAdmin._voiceUrl = {}));\r\n        function _playSound(url, number, func) {\r\n            if (!url) {\r\n                url = _voiceUrl.btn;\r\n            }\r\n            if (!number) {\r\n                number = 1;\r\n            }\r\n            if (SetAdmin._sound.switch) {\r\n                Laya.SoundManager.playSound(url, number, Laya.Handler.create(this, function () {\r\n                    if (func) {\r\n                        func();\r\n                    }\r\n                }));\r\n            }\r\n        }\r\n        AudioAdmin._playSound = _playSound;\r\n        function _playDefeatedSound(url, number, func, soundVolume) {\r\n            if (SetAdmin._sound.switch) {\r\n                Laya.SoundManager.soundVolume = soundVolume ? soundVolume : 1;\r\n                Laya.SoundManager.playSound(url ? url : _voiceUrl.defeated, number ? number : 1, Laya.Handler.create(this, function () {\r\n                    if (func) {\r\n                        func();\r\n                    }\r\n                    Laya.SoundManager.soundVolume = 1;\r\n                }));\r\n            }\r\n        }\r\n        AudioAdmin._playDefeatedSound = _playDefeatedSound;\r\n        function _playVictorySound(url, number, func, soundVolume) {\r\n            if (SetAdmin._sound.switch) {\r\n                Laya.SoundManager.soundVolume = soundVolume ? soundVolume : 1;\r\n                Laya.SoundManager.playSound(url ? url : _voiceUrl.victory, number ? number : 1, Laya.Handler.create(this, function () {\r\n                    if (func) {\r\n                        func();\r\n                    }\r\n                    Laya.SoundManager.soundVolume = 1;\r\n                }));\r\n            }\r\n        }\r\n        AudioAdmin._playVictorySound = _playVictorySound;\r\n        function _playMusic(url, number, delayed) {\r\n            if (SetAdmin._bgMusic.switch) {\r\n                Laya.SoundManager.playMusic(url ? url : _voiceUrl.bgm, number ? number : 0, Laya.Handler.create(this, function () { }), delayed ? delayed : 0);\r\n            }\r\n        }\r\n        AudioAdmin._playMusic = _playMusic;\r\n        function _stopMusic() {\r\n            Laya.SoundManager.stopMusic();\r\n        }\r\n        AudioAdmin._stopMusic = _stopMusic;\r\n    })(AudioAdmin = Lwg.AudioAdmin || (Lwg.AudioAdmin = {}));\r\n    let ToolsAdmin;\r\n    (function (ToolsAdmin) {\r\n        function color_RGBtoHexString(r, g, b) {\r\n            return '#' + (\"00000\" + (r << 16 | g << 8 | b).toString(16)).slice(-6);\r\n        }\r\n        ToolsAdmin.color_RGBtoHexString = color_RGBtoHexString;\r\n        let _Format;\r\n        (function (_Format) {\r\n            function formatNumber(crc, fixNum = 0) {\r\n                let textTemp;\r\n                if (crc >= 1e27) {\r\n                    textTemp = (crc / 1e27).toFixed(fixNum) + \"ae\";\r\n                }\r\n                else if (crc >= 1e24) {\r\n                    textTemp = (crc / 1e24).toFixed(fixNum) + \"ad\";\r\n                }\r\n                else if (crc >= 1e21) {\r\n                    textTemp = (crc / 1e21).toFixed(fixNum) + \"ac\";\r\n                }\r\n                else if (crc >= 1e18) {\r\n                    textTemp = (crc / 1e18).toFixed(fixNum) + \"ab\";\r\n                }\r\n                else if (crc >= 1e15) {\r\n                    textTemp = (crc / 1e15).toFixed(fixNum) + \"aa\";\r\n                }\r\n                else if (crc >= 1e12) {\r\n                    textTemp = (crc / 1e12).toFixed(fixNum) + \"t\";\r\n                }\r\n                else if (crc >= 1e9) {\r\n                    textTemp = (crc / 1e9).toFixed(fixNum) + \"b\";\r\n                }\r\n                else if (crc >= 1e6) {\r\n                    textTemp = (crc / 1e6).toFixed(fixNum) + \"m\";\r\n                }\r\n                else if (crc >= 1e3) {\r\n                    textTemp = (crc / 1e3).toFixed(fixNum) + \"k\";\r\n                }\r\n                else {\r\n                    textTemp = Math.round(crc).toString();\r\n                }\r\n                return textTemp;\r\n            }\r\n            _Format.formatNumber = formatNumber;\r\n            function strAddNum(str, num) {\r\n                return (Number(str) + num).toString();\r\n            }\r\n            _Format.strAddNum = strAddNum;\r\n            function NumAddStr(num, str) {\r\n                return Number(str) + num;\r\n            }\r\n            _Format.NumAddStr = NumAddStr;\r\n        })(_Format = ToolsAdmin._Format || (ToolsAdmin._Format = {}));\r\n        let _Node;\r\n        (function (_Node) {\r\n            function tieByParent(Node) {\r\n                const Parent = Node.parent;\r\n                if (Node.x > Parent.width - Node.width / 2) {\r\n                    Node.x = Parent.width - Node.width / 2;\r\n                }\r\n                if (Node.x < Node.width / 2) {\r\n                    Node.x = Node.width / 2;\r\n                }\r\n                if (Node.y > Parent.height - Node.height / 2) {\r\n                    Node.y = Parent.height - Node.height / 2;\r\n                }\r\n                if (Node.y < Node.height / 2) {\r\n                    Node.y = Node.height / 2;\r\n                }\r\n            }\r\n            _Node.tieByParent = tieByParent;\r\n            function tieByStage(Node, center) {\r\n                const Parent = Node.parent;\r\n                const gPoint = Parent.localToGlobal(new Laya.Point(Node.x, Node.y));\r\n                if (!center) {\r\n                    if (gPoint.x > Laya.stage.width) {\r\n                        gPoint.x = Laya.stage.width;\r\n                    }\r\n                }\r\n                else {\r\n                    if (gPoint.x > Laya.stage.width - Node.width / 2) {\r\n                        gPoint.x = Laya.stage.width - Node.width / 2;\r\n                    }\r\n                }\r\n                if (!center) {\r\n                    if (gPoint.x < 0) {\r\n                        gPoint.x = 0;\r\n                    }\r\n                }\r\n                else {\r\n                    if (gPoint.x < Node.width / 2) {\r\n                        gPoint.x = Node.width / 2;\r\n                    }\r\n                }\r\n                if (!center) {\r\n                    if (gPoint.y > Laya.stage.height) {\r\n                        gPoint.y = Laya.stage.height;\r\n                    }\r\n                }\r\n                else {\r\n                    if (gPoint.y > Laya.stage.height - Node.height / 2) {\r\n                        gPoint.y = Laya.stage.height - Node.height / 2;\r\n                    }\r\n                }\r\n                if (!center) {\r\n                    if (gPoint.y < 0) {\r\n                        gPoint.y = 0;\r\n                    }\r\n                }\r\n                else {\r\n                    if (gPoint.y < Node.height / 2) {\r\n                        gPoint.y = Node.height / 2;\r\n                    }\r\n                }\r\n                const lPoint = Parent.globalToLocal(gPoint);\r\n                Node.pos(lPoint.x, lPoint.y);\r\n            }\r\n            _Node.tieByStage = tieByStage;\r\n            function simpleCopyImg(Target) {\r\n                let Img = new Laya.Image;\r\n                Img.skin = Target.skin;\r\n                Img.width = Target.width;\r\n                Img.height = Target.height;\r\n                Img.pivotX = Target.pivotX;\r\n                Img.pivotY = Target.pivotY;\r\n                Img.scaleX = Target.scaleX;\r\n                Img.scaleY = Target.scaleY;\r\n                Img.skewX = Target.skewX;\r\n                Img.skewY = Target.skewY;\r\n                Img.rotation = Target.rotation;\r\n                Img.x = Target.x;\r\n                Img.y = Target.y;\r\n                return Img;\r\n            }\r\n            _Node.simpleCopyImg = simpleCopyImg;\r\n            function leaveStage(_Sprite, func) {\r\n                let Parent = _Sprite.parent;\r\n                let gPoint = Parent.localToGlobal(new Laya.Point(_Sprite.x, _Sprite.y));\r\n                if (gPoint.x > Laya.stage.width + 10 || gPoint.x < -10) {\r\n                    if (func) {\r\n                        func();\r\n                    }\r\n                    return true;\r\n                }\r\n                if (gPoint.y > Laya.stage.height + 10 || gPoint.y < -10) {\r\n                    if (func) {\r\n                        func();\r\n                    }\r\n                    return true;\r\n                }\r\n            }\r\n            _Node.leaveStage = leaveStage;\r\n            function getNodeGP(sp) {\r\n                if (!sp.parent) {\r\n                    return;\r\n                }\r\n                return sp.parent.localToGlobal(new Laya.Point(sp.x, sp.y));\r\n            }\r\n            _Node.getNodeGP = getNodeGP;\r\n            function checkTwoDistance(_Sprite1, _Sprite2, distance, func) {\r\n                if (!_Sprite1 || !_Sprite2) {\r\n                    return;\r\n                }\r\n                let Parent1 = _Sprite1.parent;\r\n                let Parent2 = _Sprite2.parent;\r\n                if (!_Sprite1.parent || !_Sprite2.parent) {\r\n                    return;\r\n                }\r\n                let gPoint1 = Parent1.localToGlobal(new Laya.Point(_Sprite1.x, _Sprite1.y));\r\n                let gPoint2 = Parent2.localToGlobal(new Laya.Point(_Sprite2.x, _Sprite2.y));\r\n                if (gPoint1.distance(gPoint2.x, gPoint2.y) <= distance) {\r\n                    func && func();\r\n                }\r\n                return gPoint1.distance(gPoint2.x, gPoint2.y);\r\n            }\r\n            _Node.checkTwoDistance = checkTwoDistance;\r\n            function childZOrderByY(sp, zOrder, along) {\r\n                let arr = [];\r\n                if (sp.numChildren == 0) {\r\n                    return arr;\r\n                }\r\n                ;\r\n                for (let index = 0; index < sp.numChildren; index++) {\r\n                    const element = sp.getChildAt(index);\r\n                    arr.push(element);\r\n                }\r\n                _ObjArray.sortByProperty(arr, 'y');\r\n                if (zOrder) {\r\n                    for (let index = 0; index < arr.length; index++) {\r\n                        const element = arr[index];\r\n                        element['zOrder'] = index;\r\n                    }\r\n                }\r\n                if (along) {\r\n                    let arr0 = [];\r\n                    for (let index = arr.length - 1; index >= 0; index--) {\r\n                        const element = arr[index];\r\n                        console.log(element);\r\n                        element['zOrder'] = arr.length - index;\r\n                        arr0.push(element);\r\n                    }\r\n                    return arr0;\r\n                }\r\n                else {\r\n                    return arr;\r\n                }\r\n            }\r\n            _Node.childZOrderByY = childZOrderByY;\r\n            function changePivot(sp, _pivotX, _pivotY, int) {\r\n                let originalPovitX = sp.pivotX;\r\n                let originalPovitY = sp.pivotY;\r\n                if (int) {\r\n                    _pivotX = Math.round(_pivotX);\r\n                    _pivotY = Math.round(_pivotY);\r\n                }\r\n                if (sp.width) {\r\n                    sp.pivot(_pivotX, _pivotY);\r\n                    sp.x += (sp.pivotX - originalPovitX);\r\n                    sp.y += (sp.pivotY - originalPovitY);\r\n                }\r\n            }\r\n            _Node.changePivot = changePivot;\r\n            function changePivotCenter(sp, int) {\r\n                let originalPovitX = sp.pivotX;\r\n                let originalPovitY = sp.pivotY;\r\n                let _pivotX;\r\n                let _pivotY;\r\n                if (int) {\r\n                    _pivotX = Math.round(sp.width / 2);\r\n                    _pivotY = Math.round(sp.height / 2);\r\n                }\r\n                if (sp.width) {\r\n                    sp.pivot(sp.width / 2, sp.height / 2);\r\n                    sp.x += (sp.pivotX - originalPovitX);\r\n                    sp.y += (sp.pivotY - originalPovitY);\r\n                }\r\n            }\r\n            _Node.changePivotCenter = changePivotCenter;\r\n            function getChildArrByProperty(node, property, value) {\r\n                let childArr = [];\r\n                for (let index = 0; index < node.numChildren; index++) {\r\n                    const element = node.getChildAt(index);\r\n                    if (element[property] == value) {\r\n                        childArr.push(element);\r\n                    }\r\n                }\r\n                return childArr;\r\n            }\r\n            _Node.getChildArrByProperty = getChildArrByProperty;\r\n            function randomChildren(node, num) {\r\n                let childArr = [];\r\n                let indexArr = [];\r\n                for (let i = 0; i < node.numChildren; i++) {\r\n                    indexArr.push(i);\r\n                }\r\n                let randomIndex = ToolsAdmin._Array.randomGetOut(indexArr, num);\r\n                for (let j = 0; j < randomIndex.length; j++) {\r\n                    childArr.push(node.getChildAt(randomIndex[j]));\r\n                }\r\n                return childArr;\r\n            }\r\n            _Node.randomChildren = randomChildren;\r\n            function destroyAllChildren(node) {\r\n                for (let index = 0; index < node.numChildren; index++) {\r\n                    const element = node.getChildAt(index);\r\n                    element.destroy();\r\n                    index--;\r\n                }\r\n            }\r\n            _Node.destroyAllChildren = destroyAllChildren;\r\n            function destroyOneChildren(node, nodeName) {\r\n                for (let index = 0; index < node.numChildren; index++) {\r\n                    const element = node.getChildAt(index);\r\n                    if (element.name == nodeName) {\r\n                        element.destroy();\r\n                        index--;\r\n                    }\r\n                }\r\n            }\r\n            _Node.destroyOneChildren = destroyOneChildren;\r\n            function removeAllChildren(node) {\r\n                if (node.numChildren > 0) {\r\n                    node.removeChildren(0, node.numChildren - 1);\r\n                }\r\n            }\r\n            _Node.removeAllChildren = removeAllChildren;\r\n            function removeOneChildren(node, nodeName) {\r\n                for (let index = 0; index < node.numChildren; index++) {\r\n                    const element = node.getChildAt(index);\r\n                    if (element.name == nodeName) {\r\n                        element.removeSelf();\r\n                        index--;\r\n                    }\r\n                }\r\n            }\r\n            _Node.removeOneChildren = removeOneChildren;\r\n            function checkChildren(node, nodeName) {\r\n                for (let index = 0; index < node.numChildren; index++) {\r\n                    const element = node.getChildAt(index);\r\n                    if (element.name == nodeName) {\r\n                        return element;\r\n                    }\r\n                }\r\n            }\r\n            _Node.checkChildren = checkChildren;\r\n            function showExcludedChild2D(node, childNameArr, bool) {\r\n                for (let i = 0; i < node.numChildren; i++) {\r\n                    let Child = node.getChildAt(i);\r\n                    for (let j = 0; j < childNameArr.length; j++) {\r\n                        if (Child.name == childNameArr[j]) {\r\n                            if (bool || bool == undefined) {\r\n                                Child.visible = true;\r\n                            }\r\n                            else {\r\n                                Child.visible = false;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (bool || bool == undefined) {\r\n                                Child.visible = false;\r\n                            }\r\n                            else {\r\n                                Child.visible = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            _Node.showExcludedChild2D = showExcludedChild2D;\r\n            function showExcludedChild3D(node, childNameArr, bool) {\r\n                for (let i = 0; i < node.numChildren; i++) {\r\n                    let Child = node.getChildAt(i);\r\n                    for (let j = 0; j < childNameArr.length; j++) {\r\n                        if (Child.name == childNameArr[j]) {\r\n                            if (bool || bool == undefined) {\r\n                                Child.active = true;\r\n                            }\r\n                            else {\r\n                                Child.active = false;\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (bool || bool == undefined) {\r\n                                Child.active = false;\r\n                            }\r\n                            else {\r\n                                Child.active = true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            _Node.showExcludedChild3D = showExcludedChild3D;\r\n            function createPrefab(prefab, Parent, point, script, zOrder, name) {\r\n                let Sp = Laya.Pool.getItemByCreateFun(name ? name : prefab.json['props']['name'], prefab.create, prefab);\r\n                Parent && Parent.addChild(Sp);\r\n                point && Sp.pos(point[0], point[1]);\r\n                script && Sp.addComponent(script);\r\n                if (zOrder)\r\n                    Sp.zOrder = zOrder;\r\n                return Sp;\r\n            }\r\n            _Node.createPrefab = createPrefab;\r\n            function childrenVisible2D(node, bool) {\r\n                for (let index = 0; index < node.numChildren; index++) {\r\n                    const element = node.getChildAt(index);\r\n                    if (bool) {\r\n                        element.visible = true;\r\n                    }\r\n                    else {\r\n                        element.visible = false;\r\n                    }\r\n                }\r\n            }\r\n            _Node.childrenVisible2D = childrenVisible2D;\r\n            function childrenVisible3D(node, bool) {\r\n                for (let index = 0; index < node.numChildren; index++) {\r\n                    const element = node.getChildAt(index);\r\n                    if (bool) {\r\n                        element.active = true;\r\n                    }\r\n                    else {\r\n                        element.active = false;\r\n                    }\r\n                }\r\n            }\r\n            _Node.childrenVisible3D = childrenVisible3D;\r\n            function findChild3D(parent, name) {\r\n                var item = null;\r\n                item = parent.getChildByName(name);\r\n                if (item != null)\r\n                    return item;\r\n                var go = null;\r\n                for (var i = 0; i < parent.numChildren; i++) {\r\n                    go = findChild3D(parent.getChildAt(i), name);\r\n                    if (go != null)\r\n                        return go;\r\n                }\r\n                return null;\r\n            }\r\n            _Node.findChild3D = findChild3D;\r\n            function findChild2D(parent, name) {\r\n                var item = null;\r\n                item = parent.getChildByName(name);\r\n                if (item != null)\r\n                    return item;\r\n                var go = null;\r\n                for (var i = 0; i < parent.numChildren; i++) {\r\n                    go = findChild2D(parent.getChildAt(i), name);\r\n                    if (go != null)\r\n                        return go;\r\n                }\r\n                return null;\r\n            }\r\n            _Node.findChild2D = findChild2D;\r\n            function findChildByName2D(parent, name) {\r\n                let arr = [];\r\n                return arr;\r\n            }\r\n            _Node.findChildByName2D = findChildByName2D;\r\n        })(_Node = ToolsAdmin._Node || (ToolsAdmin._Node = {}));\r\n        let _Number;\r\n        (function (_Number) {\r\n            function randomOneHalf() {\r\n                let number;\r\n                number = Math.floor(Math.random() * 2);\r\n                return number;\r\n            }\r\n            _Number.randomOneHalf = randomOneHalf;\r\n            function randomNumerical(numSection, defaultNumSection, randomPlusOrMinus) {\r\n                let num = numSection ? ToolsAdmin._Number.randomOneBySection(numSection[0], numSection[1]) : ToolsAdmin._Number.randomOneBySection(defaultNumSection[0], defaultNumSection[1]);\r\n                if (randomPlusOrMinus) {\r\n                    num = ToolsAdmin._Number.randomOneHalf() === 0 ? num : -num;\r\n                }\r\n                return num;\r\n            }\r\n            _Number.randomNumerical = randomNumerical;\r\n            function randomOneInt(section1, section2) {\r\n                if (section2) {\r\n                    return Math.round(Math.random() * (section2 - section1)) + section1;\r\n                }\r\n                else {\r\n                    return Math.round(Math.random() * section1);\r\n                }\r\n            }\r\n            _Number.randomOneInt = randomOneInt;\r\n            function randomCountBySection(section1, section2, count, intSet) {\r\n                let arr = [];\r\n                if (!count) {\r\n                    count = 1;\r\n                }\r\n                if (section2) {\r\n                    while (count > arr.length) {\r\n                        let num;\r\n                        if (intSet || intSet == undefined) {\r\n                            num = Math.round(Math.random() * (section2 - section1)) + section1;\r\n                        }\r\n                        else {\r\n                            num = Math.random() * (section2 - section1) + section1;\r\n                        }\r\n                        arr.push(num);\r\n                        _Array.unique01(arr);\r\n                    }\r\n                    ;\r\n                    return arr;\r\n                }\r\n                else {\r\n                    while (count > arr.length) {\r\n                        let num;\r\n                        if (intSet || intSet == undefined) {\r\n                            num = Math.round(Math.random() * section1);\r\n                        }\r\n                        else {\r\n                            num = Math.random() * section1;\r\n                        }\r\n                        arr.push(num);\r\n                        _Array.unique01(arr);\r\n                    }\r\n                    return arr;\r\n                }\r\n            }\r\n            _Number.randomCountBySection = randomCountBySection;\r\n            function randomOneBySection(section1, section2, intSet) {\r\n                let chage;\r\n                if (section1 > section2) {\r\n                    chage = section1;\r\n                    section1 = section2;\r\n                    section2 = chage;\r\n                }\r\n                if (section2) {\r\n                    let num;\r\n                    if (intSet) {\r\n                        num = Math.round(Math.random() * (section2 - section1)) + section1;\r\n                    }\r\n                    else {\r\n                        num = Math.random() * (section2 - section1) + section1;\r\n                    }\r\n                    return num;\r\n                }\r\n                else {\r\n                    let num;\r\n                    if (intSet) {\r\n                        num = Math.round(Math.random() * section1);\r\n                    }\r\n                    else {\r\n                        num = Math.random() * section1;\r\n                    }\r\n                    return num;\r\n                }\r\n            }\r\n            _Number.randomOneBySection = randomOneBySection;\r\n        })(_Number = ToolsAdmin._Number || (ToolsAdmin._Number = {}));\r\n        let _Point;\r\n        (function (_Point) {\r\n            function getOtherLocal(element, Other) {\r\n                let Parent = element.parent;\r\n                let gPoint = Parent.localToGlobal(new Laya.Point(element.x, element.y));\r\n                return Other.globalToLocal(gPoint);\r\n            }\r\n            _Point.getOtherLocal = getOtherLocal;\r\n            function angleByRad(angle) {\r\n                return angle / 180 * Math.PI;\r\n            }\r\n            _Point.angleByRad = angleByRad;\r\n            function pointByAngle(x, y) {\r\n                let radian = Math.atan2(x, y);\r\n                let angle = 90 - radian * (180 / Math.PI);\r\n                if (angle <= 0) {\r\n                    angle = 270 + (90 + angle);\r\n                }\r\n                return angle - 90;\r\n            }\r\n            _Point.pointByAngle = pointByAngle;\r\n            ;\r\n            function angleByPoint(angle) {\r\n                let radian = (90 - angle) / (180 / Math.PI);\r\n                let p = new Laya.Point(Math.sin(radian), Math.cos(radian));\r\n                p.normalize();\r\n                return p;\r\n            }\r\n            _Point.angleByPoint = angleByPoint;\r\n            ;\r\n            function dotRotatePoint(x0, y0, x1, y1, angle) {\r\n                let x2 = x0 + (x1 - x0) * Math.cos(angle * Math.PI / 180) - (y1 - y0) * Math.sin(angle * Math.PI / 180);\r\n                let y2 = y0 + (x1 - x0) * Math.sin(angle * Math.PI / 180) + (y1 - y0) * Math.cos(angle * Math.PI / 180);\r\n                return new Laya.Point(x2, y2);\r\n            }\r\n            _Point.dotRotatePoint = dotRotatePoint;\r\n            function angleAndLenByPoint(angle, len) {\r\n                if (angle % 90 === 0 || !angle) {\r\n                }\r\n                const speedXY = { x: 0, y: 0 };\r\n                speedXY.x = len * Math.cos(angle * Math.PI / 180);\r\n                speedXY.y = len * Math.sin(angle * Math.PI / 180);\r\n                return new Laya.Point(speedXY.x, speedXY.y);\r\n            }\r\n            _Point.angleAndLenByPoint = angleAndLenByPoint;\r\n            function getRoundPos(angle, radius, centerPos) {\r\n                var center = centerPos;\r\n                var radius = radius;\r\n                var hudu = (2 * Math.PI / 360) * angle;\r\n                var X = center.x + Math.sin(hudu) * radius;\r\n                var Y = center.y - Math.cos(hudu) * radius;\r\n                return new Laya.Point(X, Y);\r\n            }\r\n            _Point.getRoundPos = getRoundPos;\r\n            function randomPointByCenter(centerPos, radiusX, radiusY, count) {\r\n                if (!count) {\r\n                    count = 1;\r\n                }\r\n                let arr = [];\r\n                for (let index = 0; index < count; index++) {\r\n                    let x0 = ToolsAdmin._Number.randomCountBySection(0, radiusX, 1, false);\r\n                    let y0 = ToolsAdmin._Number.randomCountBySection(0, radiusY, 1, false);\r\n                    let diffX = ToolsAdmin._Number.randomOneHalf() == 0 ? x0[0] : -x0[0];\r\n                    let diffY = ToolsAdmin._Number.randomOneHalf() == 0 ? y0[0] : -y0[0];\r\n                    let p = new Laya.Point(centerPos.x + diffX, centerPos.y + diffY);\r\n                    arr.push(p);\r\n                }\r\n                return arr;\r\n            }\r\n            _Point.randomPointByCenter = randomPointByCenter;\r\n            function getPArrBetweenTwoP(p1, p2, num) {\r\n                let arr = [];\r\n                let x0 = p2.x - p1.x;\r\n                let y0 = p2.y - p1.y;\r\n                for (let index = 0; index < num; index++) {\r\n                    arr.push(new Laya.Point(p1.x + (x0 / num) * index, p1.y + (y0 / num) * index));\r\n                }\r\n                if (arr.length >= 1) {\r\n                    arr.unshift();\r\n                }\r\n                if (arr.length >= 1) {\r\n                    arr.pop();\r\n                }\r\n                return arr;\r\n            }\r\n            _Point.getPArrBetweenTwoP = getPArrBetweenTwoP;\r\n            function reverseVector(Vecoter1, Vecoter2, normalizing) {\r\n                let p;\r\n                p = new Laya.Point(Vecoter1.x - Vecoter2.x, Vecoter1.y - Vecoter2.y);\r\n                if (normalizing) {\r\n                    p.normalize();\r\n                }\r\n                return p;\r\n            }\r\n            _Point.reverseVector = reverseVector;\r\n        })(_Point = ToolsAdmin._Point || (ToolsAdmin._Point = {}));\r\n        let _3D;\r\n        (function (_3D) {\r\n            function randomScopeByPosition(sp3D, scopeSize) {\r\n                let _pX = ToolsAdmin._Number.randomOneBySection(scopeSize[0][0], scopeSize[1][0]);\r\n                let _pY = ToolsAdmin._Number.randomOneBySection(scopeSize[0][1], scopeSize[1][1]);\r\n                let _pZ = ToolsAdmin._Number.randomOneBySection(scopeSize[0][2], scopeSize[1][2]);\r\n                _pX = ToolsAdmin._Number.randomOneHalf() == 0 ? _pX : -_pX;\r\n                _pY = ToolsAdmin._Number.randomOneHalf() == 0 ? _pY : -_pY;\r\n                _pZ = ToolsAdmin._Number.randomOneHalf() == 0 ? _pZ : -_pZ;\r\n                sp3D.transform.position = new Laya.Vector3(sp3D.transform.position.x + _pX, sp3D.transform.position.y + _pY, sp3D.transform.position.z + _pZ);\r\n            }\r\n            _3D.randomScopeByPosition = randomScopeByPosition;\r\n            function getMeshSize(MSp3D) {\r\n                if (MSp3D.meshRenderer) {\r\n                    let v3;\r\n                    let extent = MSp3D.meshRenderer.bounds.getExtent();\r\n                    return v3 = new Laya.Vector3(extent.x * 2, extent.y * 2, extent.z * 2);\r\n                }\r\n            }\r\n            _3D.getMeshSize = getMeshSize;\r\n            function getSkinMeshSize(MSp3D) {\r\n                if (MSp3D.skinnedMeshRenderer) {\r\n                    let v3;\r\n                    let extent = MSp3D.skinnedMeshRenderer.bounds.getExtent();\r\n                    return v3 = new Laya.Vector3(extent.x * 2, extent.y * 2, extent.z * 2);\r\n                }\r\n            }\r\n            _3D.getSkinMeshSize = getSkinMeshSize;\r\n            function twoNodeDistance(obj1, obj2) {\r\n                let obj1V3 = obj1.transform.position;\r\n                let obj2V3 = obj2.transform.position;\r\n                let p = new Laya.Vector3();\r\n                Laya.Vector3.subtract(obj1V3, obj2V3, p);\r\n                let lenp = Laya.Vector3.scalarLength(p);\r\n                return lenp;\r\n            }\r\n            _3D.twoNodeDistance = twoNodeDistance;\r\n            function twoPositionDistance(v1, v2) {\r\n                let p = twoSubV3(v1, v2);\r\n                let lenp = Laya.Vector3.scalarLength(p);\r\n                return lenp;\r\n            }\r\n            _3D.twoPositionDistance = twoPositionDistance;\r\n            function twoSubV3(V31, V32, normalizing) {\r\n                let p = new Laya.Vector3();\r\n                Laya.Vector3.subtract(V31, V32, p);\r\n                if (normalizing) {\r\n                    let p1 = new Laya.Vector3();\r\n                    Laya.Vector3.normalize(p, p1);\r\n                    return p1;\r\n                }\r\n                else {\r\n                    return p;\r\n                }\r\n            }\r\n            _3D.twoSubV3 = twoSubV3;\r\n            function maximumDistanceLimi(originV3, obj, length) {\r\n                let subP = new Laya.Vector3();\r\n                let objP = obj.transform.position;\r\n                Laya.Vector3.subtract(objP, originV3, subP);\r\n                let lenP = Laya.Vector3.scalarLength(subP);\r\n                if (lenP >= length) {\r\n                    let normalizP = new Laya.Vector3();\r\n                    Laya.Vector3.normalize(subP, normalizP);\r\n                    let x = originV3.x + normalizP.x * length;\r\n                    let y = originV3.y + normalizP.y * length;\r\n                    let z = originV3.z + normalizP.z * length;\r\n                    let p = new Laya.Vector3(x, y, z);\r\n                    obj.transform.position = p;\r\n                    return p;\r\n                }\r\n            }\r\n            _3D.maximumDistanceLimi = maximumDistanceLimi;\r\n            function posToScreen(v3, camera) {\r\n                let ScreenV4 = new Laya.Vector4();\r\n                camera.viewport.project(v3, camera.projectionViewMatrix, ScreenV4);\r\n                let point = new Laya.Vector2();\r\n                point.x = ScreenV4.x / Laya.stage.clientScaleX;\r\n                point.y = ScreenV4.y / Laya.stage.clientScaleY;\r\n                return point;\r\n            }\r\n            _3D.posToScreen = posToScreen;\r\n            function reverseVector(Vecoter1, Vecoter2, normalizing) {\r\n                let p = new Laya.Vector3(Vecoter1.x - Vecoter2.x, Vecoter1.y - Vecoter2.y, Vecoter1.z - Vecoter2.z);\r\n                if (normalizing) {\r\n                    let returnP = new Laya.Vector3();\r\n                    Laya.Vector3.normalize(p, returnP);\r\n                    return returnP;\r\n                }\r\n                else {\r\n                    return p;\r\n                }\r\n            }\r\n            _3D.reverseVector = reverseVector;\r\n            function rayScanning(camera, scene3D, vector2, filtrateName) {\r\n                let _ray = new Laya.Ray(new Laya.Vector3(0, 0, 0), new Laya.Vector3(0, 0, 0));\r\n                let outs = new Array();\r\n                const _v2 = new Laya.Vector2(Laya.stage.clientScaleX * vector2.x, Laya.stage.clientScaleY * vector2.y);\r\n                camera.viewportPointToRay(_v2, _ray);\r\n                scene3D.physicsSimulation.rayCastAll(_ray, outs);\r\n                if (filtrateName) {\r\n                    let chek;\r\n                    for (let i = 0; i < outs.length; i++) {\r\n                        let Sp3d = outs[i].collider.owner;\r\n                        if (Sp3d.name == filtrateName) {\r\n                            chek = outs[i];\r\n                        }\r\n                    }\r\n                    return chek;\r\n                }\r\n                else {\r\n                    return outs;\r\n                }\r\n            }\r\n            _3D.rayScanning = rayScanning;\r\n            function rayScanningFirst(camera, scene3D, vector2) {\r\n                let _ray = new Laya.Ray(new Laya.Vector3(0, 0, 0), new Laya.Vector3(0, 0, 0));\r\n                let out = new Laya.HitResult();\r\n                const _v2 = new Laya.Vector2(Laya.stage.clientScaleX * vector2.x, Laya.stage.clientScaleY * vector2.y);\r\n                camera.viewportPointToRay(_v2, _ray);\r\n                scene3D.physicsSimulation.rayCast(_ray, out);\r\n                return out;\r\n            }\r\n            _3D.rayScanningFirst = rayScanningFirst;\r\n            function animatorPlay(Sp3D, aniName, normalizedTime, layerIndex) {\r\n                let sp3DAni = Sp3D.getComponent(Laya.Animator);\r\n                if (!sp3DAni) {\r\n                    console.log(Sp3D.name, '没有动画组件');\r\n                    return;\r\n                }\r\n                if (!layerIndex) {\r\n                    layerIndex = 0;\r\n                }\r\n                sp3DAni.play(aniName, layerIndex, normalizedTime);\r\n                return sp3DAni;\r\n            }\r\n            _3D.animatorPlay = animatorPlay;\r\n        })(_3D = ToolsAdmin._3D || (ToolsAdmin._3D = {}));\r\n        let _Skeleton;\r\n        (function (_Skeleton) {\r\n            function sk_indexControl(sk, name) {\r\n                sk.play(name, true);\r\n                sk.player.currentTime = 15 * 1000 / sk.player.cacheFrameRate;\r\n            }\r\n            _Skeleton.sk_indexControl = sk_indexControl;\r\n        })(_Skeleton = ToolsAdmin._Skeleton || (ToolsAdmin._Skeleton = {}));\r\n        let _Draw;\r\n        (function (_Draw) {\r\n            function drawPieMask(parent, startAngle, endAngle) {\r\n                parent.cacheAs = \"bitmap\";\r\n                let drawPieSpt = new Laya.Sprite();\r\n                drawPieSpt.blendMode = \"destination-out\";\r\n                parent.addChild(drawPieSpt);\r\n                let drawPie = drawPieSpt.graphics.drawPie(parent.width / 2, parent.height / 2, parent.width / 2 + 10, startAngle, endAngle, \"#000000\");\r\n                return drawPie;\r\n            }\r\n            _Draw.drawPieMask = drawPieMask;\r\n            function screenshot(Sp, quality) {\r\n                const htmlCanvas = Sp.drawToCanvas(Sp.width, Sp.height, Sp.x, Sp.y);\r\n                const base64 = htmlCanvas.toBase64(\"image/png\", quality ? quality : 1);\r\n                return base64;\r\n            }\r\n            _Draw.screenshot = screenshot;\r\n            _Draw._texArr = [];\r\n            function cameraToSprite(camera, sprite) {\r\n                const _camera = camera.clone();\r\n                camera.scene.addChild(_camera);\r\n                _camera.transform.position = camera.transform.position;\r\n                _camera.transform.localRotationEuler = camera.transform.localRotationEuler;\r\n                _camera.renderTarget = new Laya.RenderTexture(sprite.width, sprite.height);\r\n                _camera.renderingOrder = -1;\r\n                _camera.clearFlag = Laya.CameraClearFlags.Sky;\r\n                const ptex = new Laya.Texture(_camera.renderTarget, Laya.Texture.DEF_UV);\r\n                sprite.graphics.drawTexture(ptex, sprite.x, sprite.y, sprite.width, sprite.height);\r\n                _Draw._texArr.push(ptex);\r\n                if (_Draw._texArr.length > 3) {\r\n                    _Draw._texArr[0].destroy();\r\n                    _Draw._texArr.shift();\r\n                }\r\n                TimerAdmin._frameOnce(5, this, () => {\r\n                    _camera.destroy();\r\n                });\r\n            }\r\n            _Draw.cameraToSprite = cameraToSprite;\r\n            function drawToTex(Sp, quality) {\r\n                let tex = Sp.drawToTexture(Sp.width, Sp.height, Sp.x, Sp.y);\r\n                return tex;\r\n            }\r\n            _Draw.drawToTex = drawToTex;\r\n            function reverseCircleMask(sp, circleArr, eliminate) {\r\n                if (eliminate == undefined || eliminate == true) {\r\n                    _Node.destroyAllChildren(sp);\r\n                }\r\n                let interactionArea = sp.getChildByName('reverseRoundMask');\r\n                if (!interactionArea) {\r\n                    interactionArea = new Laya.Sprite();\r\n                    interactionArea.name = 'reverseRoundMask';\r\n                    interactionArea.blendMode = \"destination-out\";\r\n                    sp.addChild(interactionArea);\r\n                }\r\n                sp.cacheAs = \"bitmap\";\r\n                for (let index = 0; index < circleArr.length; index++) {\r\n                    interactionArea.graphics.drawCircle(circleArr[index][0], circleArr[index][1], circleArr[index][2], \"#000000\");\r\n                }\r\n                interactionArea.pos(0, 0);\r\n                return interactionArea;\r\n            }\r\n            _Draw.reverseCircleMask = reverseCircleMask;\r\n            function reverseRoundrectMask(sp, roundrectArr, eliminate) {\r\n                if (eliminate == undefined || eliminate == true) {\r\n                    _Node.removeAllChildren(sp);\r\n                }\r\n                let interactionArea = sp.getChildByName('reverseRoundrectMask');\r\n                if (!interactionArea) {\r\n                    interactionArea = new Laya.Sprite();\r\n                    interactionArea.name = 'reverseRoundrectMask';\r\n                    interactionArea.blendMode = \"destination-out\";\r\n                    sp.addChild(interactionArea);\r\n                }\r\n                if (sp.cacheAs !== \"bitmap\")\r\n                    sp.cacheAs = \"bitmap\";\r\n                for (let index = 0; index < roundrectArr.length; index++) {\r\n                    const element = roundrectArr[index];\r\n                    element[0] = Math.round(element[0]);\r\n                    element[1] = Math.round(element[1]);\r\n                    element[2] = Math.round(element[2]);\r\n                    element[3] = Math.round(element[3]);\r\n                    element[4] = Math.round(element[4]);\r\n                    interactionArea.graphics.drawPath(element[0], element[1], [[\"moveTo\", element[4], 0], [\"lineTo\", element[2] - element[4], 0], [\"arcTo\", element[2], 0, element[2], element[4], element[4]], [\"lineTo\", element[2], element[3] - element[4]], [\"arcTo\", element[2], element[3], element[2] - element[4], element[3], element[4]], [\"lineTo\", element[3] - element[4], element[3]], [\"arcTo\", 0, element[3], 0, element[3] - element[4], element[4]], [\"lineTo\", 0, element[4]], [\"arcTo\", 0, 0, element[4], 0, element[4]], [\"closePath\"]], { fillStyle: \"#000000\" });\r\n                    interactionArea.pivotX = element[2] / 2;\r\n                    interactionArea.pivotY = element[3] / 2;\r\n                    interactionArea.pos(0, 0);\r\n                }\r\n            }\r\n            _Draw.reverseRoundrectMask = reverseRoundrectMask;\r\n        })(_Draw = ToolsAdmin._Draw || (ToolsAdmin._Draw = {}));\r\n        let _ObjArray;\r\n        (function (_ObjArray) {\r\n            function sortByProperty(array, property) {\r\n                var compare = function (obj1, obj2) {\r\n                    var val1 = obj1[property];\r\n                    var val2 = obj2[property];\r\n                    if (!isNaN(Number(val1)) && !isNaN(Number(val2))) {\r\n                        val1 = Number(val1);\r\n                        val2 = Number(val2);\r\n                    }\r\n                    if (val1 < val2) {\r\n                        return -1;\r\n                    }\r\n                    else if (val1 > val2) {\r\n                        return 1;\r\n                    }\r\n                    else {\r\n                        return 0;\r\n                    }\r\n                };\r\n                array.sort(compare);\r\n                return array;\r\n            }\r\n            _ObjArray.sortByProperty = sortByProperty;\r\n            function diffProByTwo(objArr1, objArr2, property) {\r\n                var result = [];\r\n                for (var i = 0; i < objArr1.length; i++) {\r\n                    var obj1 = objArr1[i];\r\n                    var obj1Name = obj1[property];\r\n                    var isExist = false;\r\n                    for (var j = 0; j < objArr2.length; j++) {\r\n                        var obj2 = objArr2[j];\r\n                        var obj2Name = obj2[property];\r\n                        if (obj2Name == obj1Name) {\r\n                            isExist = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!isExist) {\r\n                        let _obj1 = _ObjArray.objCopy(obj1);\r\n                        result.push(_obj1);\r\n                    }\r\n                }\r\n                return result;\r\n            }\r\n            _ObjArray.diffProByTwo = diffProByTwo;\r\n            function identicalPropertyObjArr(data1, data2, property) {\r\n                var result = [];\r\n                for (var i = 0; i < data1.length; i++) {\r\n                    var obj1 = data1[i];\r\n                    var obj1Name = obj1[property];\r\n                    var isExist = false;\r\n                    for (var j = 0; j < data2.length; j++) {\r\n                        var obj2 = data2[j];\r\n                        var obj2Name = obj2[property];\r\n                        if (obj2Name == obj1Name) {\r\n                            isExist = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (isExist) {\r\n                        result.push(obj1);\r\n                    }\r\n                }\r\n                return result;\r\n            }\r\n            _ObjArray.identicalPropertyObjArr = identicalPropertyObjArr;\r\n            function objArrUnique(arr, property) {\r\n                for (var i = 0, len = arr.length; i < len; i++) {\r\n                    for (var j = i + 1, len = arr.length; j < len; j++) {\r\n                        if (arr[i][property] === arr[j][property]) {\r\n                            arr.splice(j, 1);\r\n                            j--;\r\n                            len--;\r\n                        }\r\n                    }\r\n                }\r\n                return arr;\r\n            }\r\n            _ObjArray.objArrUnique = objArrUnique;\r\n            function getArrByValue(objArr, property) {\r\n                let arr = [];\r\n                for (let i = 0; i < objArr.length; i++) {\r\n                    if (objArr[i][property]) {\r\n                        arr.push(objArr[i][property]);\r\n                    }\r\n                }\r\n                return arr;\r\n            }\r\n            _ObjArray.getArrByValue = getArrByValue;\r\n            function arrCopy(ObjArray) {\r\n                var sourceCopy = ObjArray instanceof Array ? [] : {};\r\n                for (var item in ObjArray) {\r\n                    sourceCopy[item] = typeof ObjArray[item] === 'object' ? objCopy(ObjArray[item]) : ObjArray[item];\r\n                }\r\n                return sourceCopy;\r\n            }\r\n            _ObjArray.arrCopy = arrCopy;\r\n            function modifyProValue(objArr, pro, value) {\r\n                for (const key in objArr) {\r\n                    if (Object.prototype.hasOwnProperty.call(objArr, key)) {\r\n                        const element = objArr[key];\r\n                        if (element[pro]) {\r\n                            element[pro] = value;\r\n                        }\r\n                    }\r\n                }\r\n                return objArr;\r\n            }\r\n            _ObjArray.modifyProValue = modifyProValue;\r\n            function objCopy(obj) {\r\n                var _copyObj = {};\r\n                for (const item in obj) {\r\n                    if (obj.hasOwnProperty(item)) {\r\n                        const element = obj[item];\r\n                        if (typeof element === 'object') {\r\n                            if (Array.isArray(element)) {\r\n                                let arr1 = _Array.copy(element);\r\n                                _copyObj[item] = arr1;\r\n                            }\r\n                            else {\r\n                                objCopy(element);\r\n                            }\r\n                        }\r\n                        else {\r\n                            _copyObj[item] = element;\r\n                        }\r\n                    }\r\n                }\r\n                return _copyObj;\r\n            }\r\n            _ObjArray.objCopy = objCopy;\r\n        })(_ObjArray = ToolsAdmin._ObjArray || (ToolsAdmin._ObjArray = {}));\r\n        let _Array;\r\n        (function (_Array) {\r\n            function addToarray(array1, array2) {\r\n                for (let index = 0; index < array2.length; index++) {\r\n                    const element = array2[index];\r\n                    array1.push(element);\r\n                }\r\n                return array1;\r\n            }\r\n            _Array.addToarray = addToarray;\r\n            function inverted(array) {\r\n                let arr = [];\r\n                for (let index = array.length - 1; index >= 0; index--) {\r\n                    const element = array[index];\r\n                    arr.push(element);\r\n                }\r\n                array = arr;\r\n                return array;\r\n            }\r\n            _Array.inverted = inverted;\r\n            function randomGetOut(arr, num) {\r\n                if (!num) {\r\n                    num = 1;\r\n                }\r\n                let arrCopy = _Array.copy(arr);\r\n                let arr0 = [];\r\n                if (num > arrCopy.length) {\r\n                    return '数组长度小于取出的数！';\r\n                }\r\n                else {\r\n                    for (let index = 0; index < num; index++) {\r\n                        let ran = Math.round(Math.random() * (arrCopy.length - 1));\r\n                        let a1 = arrCopy[ran];\r\n                        arrCopy.splice(ran, 1);\r\n                        arr0.push(a1);\r\n                    }\r\n                    return arr0;\r\n                }\r\n            }\r\n            _Array.randomGetOut = randomGetOut;\r\n            function randomGetOne(arr) {\r\n                let arrCopy = copy(arr);\r\n                let ran = Math.round(Math.random() * (arrCopy.length - 1));\r\n                return arrCopy[ran];\r\n            }\r\n            _Array.randomGetOne = randomGetOne;\r\n            function copy(arr1) {\r\n                var arr = [];\r\n                for (var i = 0; i < arr1.length; i++) {\r\n                    arr.push(arr1[i]);\r\n                }\r\n                return arr;\r\n            }\r\n            _Array.copy = copy;\r\n            function unique01(arr) {\r\n                for (var i = 0, len = arr.length; i < len; i++) {\r\n                    for (var j = i + 1, len = arr.length; j < len; j++) {\r\n                        if (arr[i] === arr[j]) {\r\n                            arr.splice(j, 1);\r\n                            j--;\r\n                            len--;\r\n                        }\r\n                    }\r\n                }\r\n                return arr;\r\n            }\r\n            _Array.unique01 = unique01;\r\n            function unique02(arr) {\r\n                arr = arr.sort();\r\n                var arr1 = [arr[0]];\r\n                for (var i = 1, len = arr.length; i < len; i++) {\r\n                    if (arr[i] !== arr[i - 1]) {\r\n                        arr1.push(arr[i]);\r\n                    }\r\n                }\r\n                return arr1;\r\n            }\r\n            _Array.unique02 = unique02;\r\n            function unique03(arr) {\r\n                return Array.from(new Set(arr));\r\n            }\r\n            _Array.unique03 = unique03;\r\n            function oneExcludeOtherOne(arr1, arr2) {\r\n                let arr1Capy = _Array.copy(arr1);\r\n                let arr2Capy = _Array.copy(arr2);\r\n                for (let i = 0; i < arr1Capy.length; i++) {\r\n                    for (let j = 0; j < arr2Capy.length; j++) {\r\n                        if (arr1Capy[i] == arr2Capy[j]) {\r\n                            arr1Capy.splice(i, 1);\r\n                            i--;\r\n                        }\r\n                    }\r\n                }\r\n                return arr1Capy;\r\n            }\r\n            _Array.oneExcludeOtherOne = oneExcludeOtherOne;\r\n            function moreExclude(arrays, exclude) {\r\n                let arr0 = [];\r\n                for (let i = 0; i < arrays.length; i++) {\r\n                    for (let j = 0; j < arrays[i].length; j++) {\r\n                        arr0.push(arrays[i][j]);\r\n                    }\r\n                }\r\n                let arr1 = copy(arr0);\r\n                let arr2 = copy(arr1);\r\n                let arrNum = [];\r\n                for (let k = 0; k < arr2.length; k++) {\r\n                    arrNum.push({\r\n                        name: arr2[k],\r\n                        num: 0,\r\n                    });\r\n                }\r\n                for (let l = 0; l < arr0.length; l++) {\r\n                    for (let m = 0; m < arrNum.length; m++) {\r\n                        if (arr0[l] == arrNum[m]['name']) {\r\n                            arrNum[m]['num']++;\r\n                        }\r\n                    }\r\n                }\r\n                let arrAllHave = [];\r\n                let arrDiffHave = [];\r\n                for (let n = 0; n < arrNum.length; n++) {\r\n                    const element = arrNum[n];\r\n                    if (arrNum[n]['num'] == arrays.length) {\r\n                        arrAllHave.push(arrNum[n]['name']);\r\n                    }\r\n                    else {\r\n                        arrDiffHave.push(arrNum[n]['name']);\r\n                    }\r\n                }\r\n                if (!exclude) {\r\n                    return arrAllHave;\r\n                }\r\n                else {\r\n                    return arrDiffHave;\r\n                }\r\n            }\r\n            _Array.moreExclude = moreExclude;\r\n        })(_Array = ToolsAdmin._Array || (ToolsAdmin._Array = {}));\r\n    })(ToolsAdmin = Lwg.ToolsAdmin || (Lwg.ToolsAdmin = {}));\r\n    let PreLoadAdmin;\r\n    (function (PreLoadAdmin) {\r\n        let _scene3D = [];\r\n        let _prefab3D = [];\r\n        let _mesh3D = [];\r\n        let _material = [];\r\n        let _texture = [];\r\n        let _texture2D = [];\r\n        let _pic2D = [];\r\n        let _scene2D = [];\r\n        let _prefab2D = [];\r\n        let _json = [];\r\n        let _skeleton = [];\r\n        let _effectsTex2D = [];\r\n        PreLoadAdmin._sumProgress = 0;\r\n        PreLoadAdmin._loadOrder = [];\r\n        PreLoadAdmin._loadOrderIndex = 0;\r\n        PreLoadAdmin._loadType = SceneAdmin._BaseName.PreLoad;\r\n        let _ListName;\r\n        (function (_ListName) {\r\n            _ListName[\"scene3D\"] = \"scene3D\";\r\n            _ListName[\"prefab3D\"] = \"prefab3D\";\r\n            _ListName[\"mesh3D\"] = \"mesh3D\";\r\n            _ListName[\"material\"] = \"material\";\r\n            _ListName[\"texture\"] = \"texture\";\r\n            _ListName[\"texture2D\"] = \"texture2D\";\r\n            _ListName[\"pic2D\"] = \"pic2D\";\r\n            _ListName[\"scene2D\"] = \"scene2D\";\r\n            _ListName[\"prefab2D\"] = \"prefab2D\";\r\n            _ListName[\"json\"] = \"json\";\r\n            _ListName[\"skeleton\"] = \"skeleton\";\r\n            _ListName[\"effectTex2D\"] = \"effectTex2D\";\r\n        })(_ListName = PreLoadAdmin._ListName || (PreLoadAdmin._ListName = {}));\r\n        PreLoadAdmin._currentProgress = {\r\n            get value() {\r\n                return this['len'] ? this['len'] : 0;\r\n            },\r\n            set value(val) {\r\n                this['len'] = val;\r\n                if (this['len'] >= PreLoadAdmin._sumProgress) {\r\n                    if (PreLoadAdmin._sumProgress == 0) {\r\n                        return;\r\n                    }\r\n                    console.log('当前进度条进度为:', PreLoadAdmin._currentProgress.value / PreLoadAdmin._sumProgress);\r\n                    console.log('所有资源加载完成！此时所有资源可通过例如 Laya.loader.getRes(\"url\")获取');\r\n                    EventAdmin._notify(PreLoadAdmin._Event.complete);\r\n                }\r\n                else {\r\n                    let number = 0;\r\n                    for (let index = 0; index <= PreLoadAdmin._loadOrderIndex; index++) {\r\n                        number += PreLoadAdmin._loadOrder[index].length;\r\n                    }\r\n                    if (this['len'] == number) {\r\n                        PreLoadAdmin._loadOrderIndex++;\r\n                    }\r\n                    EventAdmin._notify(PreLoadAdmin._Event.stepLoding);\r\n                }\r\n            },\r\n        };\r\n        let _Event;\r\n        (function (_Event) {\r\n            _Event[\"importList\"] = \"_PreLoad_importList\";\r\n            _Event[\"complete\"] = \"_PreLoad_complete\";\r\n            _Event[\"stepLoding\"] = \"_PreLoad_startLoding\";\r\n            _Event[\"progress\"] = \"_PreLoad_progress\";\r\n        })(_Event = PreLoadAdmin._Event || (PreLoadAdmin._Event = {}));\r\n        function _remakeLode() {\r\n            _scene3D = [];\r\n            _prefab3D = [];\r\n            _mesh3D = [];\r\n            _material = [];\r\n            _texture2D = [];\r\n            _pic2D = [];\r\n            _scene2D = [];\r\n            _prefab2D = [];\r\n            _json = [];\r\n            _skeleton = [];\r\n            PreLoadAdmin._loadOrder = [];\r\n            _effectsTex2D = [];\r\n            PreLoadAdmin._sumProgress = 0;\r\n            PreLoadAdmin._loadOrderIndex = 0;\r\n            PreLoadAdmin._currentProgress.value = 0;\r\n        }\r\n        PreLoadAdmin._remakeLode = _remakeLode;\r\n        class _PreLoadScene extends SceneAdmin._SceneBase {\r\n            moduleOnAwake() {\r\n                PreLoadAdmin._remakeLode();\r\n            }\r\n            lwgStartLoding(any) {\r\n                EventAdmin._notify(PreLoadAdmin._Event.importList, (any));\r\n            }\r\n            moduleEvent() {\r\n                EventAdmin._registerOnce(_Event.importList, this, (listObj) => {\r\n                    listObj[_ListName.effectTex2D] = Eff3DAdmin._tex2D;\r\n                    for (const key in listObj) {\r\n                        if (Object.prototype.hasOwnProperty.call(listObj, key)) {\r\n                            for (const key1 in listObj[key]) {\r\n                                if (Object.prototype.hasOwnProperty.call(listObj[key], key1)) {\r\n                                    const element = listObj[key][key1];\r\n                                    switch (key) {\r\n                                        case _ListName.json:\r\n                                            _json.push(element);\r\n                                            break;\r\n                                        case _ListName.material:\r\n                                            _material.push(element);\r\n                                            break;\r\n                                        case _ListName.mesh3D:\r\n                                            _mesh3D.push(element);\r\n                                            break;\r\n                                        case _ListName.pic2D:\r\n                                            _pic2D.push(element);\r\n                                            break;\r\n                                        case _ListName.prefab2D:\r\n                                            _prefab2D.push(element);\r\n                                            break;\r\n                                        case _ListName.prefab3D:\r\n                                            _prefab3D.push(element);\r\n                                            break;\r\n                                        case _ListName.scene2D:\r\n                                            _scene2D.push(element);\r\n                                            break;\r\n                                        case _ListName.scene3D:\r\n                                            _scene3D.push(element);\r\n                                            break;\r\n                                        case _ListName.texture2D:\r\n                                            _texture2D.push(element);\r\n                                            break;\r\n                                        case _ListName.skeleton:\r\n                                            _skeleton.push(element);\r\n                                            break;\r\n                                        case _ListName.texture:\r\n                                            _texture.push(element);\r\n                                            break;\r\n                                        case _ListName.effectTex2D:\r\n                                            _effectsTex2D.push(element);\r\n                                            break;\r\n                                        default:\r\n                                            break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    PreLoadAdmin._loadOrder = [_pic2D, _scene2D, _prefab2D, _prefab3D, _json, _texture, _texture2D, _mesh3D, _material, _skeleton, _scene3D, _effectsTex2D];\r\n                    for (let index = 0; index < PreLoadAdmin._loadOrder.length; index++) {\r\n                        PreLoadAdmin._sumProgress += PreLoadAdmin._loadOrder[index].length;\r\n                        if (PreLoadAdmin._loadOrder[index].length <= 0) {\r\n                            PreLoadAdmin._loadOrder.splice(index, 1);\r\n                            index--;\r\n                        }\r\n                    }\r\n                    let time = this.lwgOpenAni();\r\n                    Laya.timer.once(time ? time : 0, this, () => {\r\n                        EventAdmin._notify(PreLoadAdmin._Event.stepLoding);\r\n                    });\r\n                });\r\n                EventAdmin._register(_Event.stepLoding, this, () => { this.startLodingRule(); });\r\n                EventAdmin._registerOnce(_Event.complete, this, () => {\r\n                    Laya.timer.once(this.lwgAllComplete(), this, () => {\r\n                        LwgScene._SceneControl[PreLoadAdmin._loadType] = this._Owner;\r\n                        if (PreLoadAdmin._loadType !== LwgScene._BaseName.PreLoad) {\r\n                            LwgScene._PreLoadCutIn.openName && this._openScene(LwgScene._PreLoadCutIn.openName);\r\n                        }\r\n                        else {\r\n                            AudioAdmin._playMusic();\r\n                            this._openScene(LwgScene._BaseName.Start, true, false, () => {\r\n                                PreLoadAdmin._loadType = LwgScene._BaseName.PreLoadCutIn;\r\n                            });\r\n                        }\r\n                    });\r\n                });\r\n                EventAdmin._register(_Event.progress, this, () => {\r\n                    PreLoadAdmin._currentProgress.value++;\r\n                    if (PreLoadAdmin._currentProgress.value < PreLoadAdmin._sumProgress) {\r\n                        console.log('当前进度条进度为:', PreLoadAdmin._currentProgress.value / PreLoadAdmin._sumProgress);\r\n                        this.lwgStepComplete();\r\n                    }\r\n                });\r\n            }\r\n            moduleOnEnable() {\r\n                PreLoadAdmin._loadOrderIndex = 0;\r\n            }\r\n            startLodingRule() {\r\n                if (PreLoadAdmin._loadOrder.length <= 0) {\r\n                    console.log('没有加载项');\r\n                    EventAdmin._notify(PreLoadAdmin._Event.complete);\r\n                    return;\r\n                }\r\n                let alreadyPro = 0;\r\n                for (let i = 0; i < PreLoadAdmin._loadOrderIndex; i++) {\r\n                    alreadyPro += PreLoadAdmin._loadOrder[i].length;\r\n                }\r\n                let index = PreLoadAdmin._currentProgress.value - alreadyPro;\r\n                switch (PreLoadAdmin._loadOrder[PreLoadAdmin._loadOrderIndex]) {\r\n                    case _pic2D:\r\n                        Laya.loader.load(_pic2D[index], Laya.Handler.create(this, (any) => {\r\n                            EventAdmin._notify(_Event.progress);\r\n                            if (typeof _pic2D[index]['url'] === 'object') {\r\n                                return;\r\n                            }\r\n                            if (any == null) {\r\n                                console.log('XXXXXXXXXXX2D资源' + _pic2D[index] + '加载失败！不会停止加载进程！', '数组下标为：', index, 'XXXXXXXXXXX');\r\n                            }\r\n                            else {\r\n                                console.log('2D图片' + _pic2D[index] + '加载完成！', '数组下标为：', index);\r\n                            }\r\n                        }));\r\n                        break;\r\n                    case _scene2D:\r\n                        Laya.loader.load(_scene2D[index], Laya.Handler.create(this, (any) => {\r\n                            EventAdmin._notify(_Event.progress);\r\n                            if (typeof _scene2D[index]['url'] === 'object') {\r\n                                return;\r\n                            }\r\n                            if (any == null) {\r\n                                console.log('XXXXXXXXXXX数据表' + _scene2D[index] + '加载失败！不会停止加载进程！', '数组下标为：', index, 'XXXXXXXXXXX');\r\n                            }\r\n                            else {\r\n                                console.log('2D场景' + _scene2D[index] + '加载完成！', '数组下标为：', index);\r\n                            }\r\n                        }), null, Laya.Loader.JSON);\r\n                        break;\r\n                    case _scene3D:\r\n                        Laya.Scene3D.load(_scene3D[index]['url'], Laya.Handler.create(this, (Scene) => {\r\n                            EventAdmin._notify(_Event.progress);\r\n                            if (typeof _scene3D[index]['url'] === 'object') {\r\n                                return;\r\n                            }\r\n                            if (Scene == null) {\r\n                                console.log('XXXXXXXXXXX3D场景' + _scene3D[index]['url'] + '加载失败！不会停止加载进程！', '数组下标为：', index, 'XXXXXXXXXXX');\r\n                            }\r\n                            else {\r\n                                _scene3D[index]['Scene'] = Scene;\r\n                                console.log('3D场景' + _scene3D[index]['url'] + '加载完成！', '数组下标为：', index);\r\n                            }\r\n                        }));\r\n                        break;\r\n                    case _prefab3D:\r\n                        Laya.Sprite3D.load(_prefab3D[index]['url'], Laya.Handler.create(this, (Sp) => {\r\n                            EventAdmin._notify(_Event.progress);\r\n                            if (typeof _prefab3D[index]['url'] === 'object') {\r\n                                return;\r\n                            }\r\n                            if (Sp == null) {\r\n                                console.log('XXXXXXXXXXX3D预设体' + _prefab3D[index]['url'] + '加载失败！不会停止加载进程！', '数组下标为：', index, 'XXXXXXXXXXX');\r\n                            }\r\n                            else {\r\n                                _prefab3D[index]['Prefab'] = Sp;\r\n                                console.log('3D预制体' + _prefab3D[index]['url'] + '加载完成！', '数组下标为：', index);\r\n                            }\r\n                        }));\r\n                        break;\r\n                    case _mesh3D:\r\n                        Laya.Mesh.load(_mesh3D[index]['url'], Laya.Handler.create(this, (any) => {\r\n                            EventAdmin._notify(_Event.progress);\r\n                            if (typeof _mesh3D[index]['url'] === 'object') {\r\n                                return;\r\n                            }\r\n                            if (any == null) {\r\n                                console.log('XXXXXXXXXXX3D网格' + _mesh3D[index]['url'] + '加载失败！不会停止加载进程！', '数组下标为：', index, 'XXXXXXXXXXX');\r\n                            }\r\n                            else {\r\n                                console.log('3D网格' + _mesh3D[index]['url'] + '加载完成！', '数组下标为：', index);\r\n                            }\r\n                        }));\r\n                        break;\r\n                    case _texture:\r\n                        Laya.loader.load(_texture[index]['url'], Laya.Handler.create(this, (tex) => {\r\n                            EventAdmin._notify(_Event.progress);\r\n                            if (typeof _texture[index]['url'] === 'object') {\r\n                                return;\r\n                            }\r\n                            if (tex == null) {\r\n                                console.log('XXXXXXXXXXX2D纹理' + _texture[index]['url'] + '加载失败！不会停止加载进程！', '数组下标为：', index, 'XXXXXXXXXXX');\r\n                            }\r\n                            else {\r\n                                _texture[index]['texture'] = tex;\r\n                                console.log('纹理' + _texture[index]['url'] + '加载完成！', '数组下标为：', index);\r\n                            }\r\n                        }));\r\n                        break;\r\n                    case _texture2D:\r\n                        Laya.Texture2D.load(_texture2D[index]['url'], Laya.Handler.create(this, function (tex) {\r\n                            EventAdmin._notify(_Event.progress);\r\n                            if (typeof _texture2D[index]['url'] === 'object') {\r\n                                return;\r\n                            }\r\n                            if (tex == null) {\r\n                                console.log('XXXXXXXXXXX2D纹理' + _texture2D[index]['url'] + '加载失败！不会停止加载进程！', '数组下标为：', index, 'XXXXXXXXXXX');\r\n                            }\r\n                            else {\r\n                                _texture2D[index]['texture2D'] = tex;\r\n                                console.log('3D纹理' + _texture2D[index]['url'] + '加载完成！', '数组下标为：', index);\r\n                            }\r\n                        }));\r\n                        break;\r\n                    case _effectsTex2D:\r\n                        Laya.Texture2D.load(_effectsTex2D[index]['url'], Laya.Handler.create(this, function (tex) {\r\n                            EventAdmin._notify(_Event.progress);\r\n                            if (typeof _effectsTex2D[index]['url'] === 'object') {\r\n                                return;\r\n                            }\r\n                            if (tex == null) {\r\n                                console.log('XXXXXXXXXXX2D纹理' + _effectsTex2D[index]['url'] + '加载失败！不会停止加载进程！', '数组下标为：', index, 'XXXXXXXXXXX');\r\n                            }\r\n                            else {\r\n                                _effectsTex2D[index]['texture2D'] = tex;\r\n                                console.log('3D纹理' + _effectsTex2D[index]['url'] + '加载完成！', '数组下标为：', index);\r\n                            }\r\n                        }));\r\n                        break;\r\n                    case _material:\r\n                        Laya.Material.load(_material[index]['url'], Laya.Handler.create(this, (any) => {\r\n                            EventAdmin._notify(_Event.progress);\r\n                            if (typeof _material[index]['url'] === 'object') {\r\n                                return;\r\n                            }\r\n                            if (any == null) {\r\n                                console.log('XXXXXXXXXXX材质' + _material[index]['url'] + '加载失败！不会停止加载进程！', '数组下标为：', index, 'XXXXXXXXXXX');\r\n                            }\r\n                            else {\r\n                                console.log('材质' + _material[index]['url'] + '加载完成！', '数组下标为：', index);\r\n                            }\r\n                        }));\r\n                        break;\r\n                    case _json:\r\n                        Laya.loader.load(_json[index]['url'], Laya.Handler.create(this, (data) => {\r\n                            EventAdmin._notify(_Event.progress);\r\n                            if (typeof _json[index]['url'] === 'object') {\r\n                                return;\r\n                            }\r\n                            if (data == null) {\r\n                                console.log('XXXXXXXXXXX数据表' + _json[index]['url'] + '加载失败！不会停止加载进程！', '数组下标为：', index, 'XXXXXXXXXXX');\r\n                            }\r\n                            else {\r\n                                _json[index]['dataArr'] = data[\"RECORDS\"];\r\n                                console.log('数据表' + _json[index]['url'] + '加载完成！', '数组下标为：', index);\r\n                            }\r\n                        }), null, Laya.Loader.JSON);\r\n                        break;\r\n                    case _skeleton:\r\n                        _skeleton[index]['templet'].on(Laya.Event.ERROR, this, () => {\r\n                            console.log('XXXXXXXXXXX骨骼动画' + _skeleton[index] + '加载失败！不会停止加载进程！', '数组下标为：', index, 'XXXXXXXXXXX');\r\n                            EventAdmin._notify(_Event.progress);\r\n                        });\r\n                        _skeleton[index]['templet'].on(Laya.Event.COMPLETE, this, () => {\r\n                            console.log('骨骼动画', _skeleton[index]['templet']['url'], '加载完成！', '数组下标为：', index);\r\n                            EventAdmin._notify(_Event.progress);\r\n                        });\r\n                        _skeleton[index]['templet'].loadAni(_skeleton[index]['url']);\r\n                        break;\r\n                    case _prefab2D:\r\n                        Laya.loader.load(_prefab2D[index]['url'], Laya.Handler.create(this, (prefab) => {\r\n                            EventAdmin._notify(_Event.progress);\r\n                            if (typeof _prefab2D[index]['url'] === 'object') {\r\n                                return;\r\n                            }\r\n                            if (prefab == null) {\r\n                                console.log('XXXXXXXXXXX数据表' + _prefab2D[index]['url'] + '加载失败！不会停止加载进程！', '数组下标为：', index, 'XXXXXXXXXXX');\r\n                            }\r\n                            else {\r\n                                let _prefab = new Laya.Prefab();\r\n                                _prefab.json = prefab;\r\n                                _prefab2D[index]['prefab'] = _prefab;\r\n                                console.log('2D预制体' + _prefab2D[index]['url'] + '加载完成！', '数组下标为：', index);\r\n                            }\r\n                        }));\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n            lwgStepComplete() { }\r\n            lwgAllComplete() { return 0; }\r\n            ;\r\n        }\r\n        PreLoadAdmin._PreLoadScene = _PreLoadScene;\r\n    })(PreLoadAdmin = Lwg.PreLoadAdmin || (Lwg.PreLoadAdmin = {}));\r\n    let InitAdmin;\r\n    (function (InitAdmin) {\r\n        class _InitScene extends SceneAdmin._SceneBase {\r\n            lwgOpenAni() {\r\n                return 100;\r\n            }\r\n            moduleOnStart() {\r\n                DateAdmin._init();\r\n            }\r\n            ;\r\n        }\r\n        InitAdmin._InitScene = _InitScene;\r\n    })(InitAdmin = Lwg.InitAdmin || (Lwg.InitAdmin = {}));\r\n    let ExecutionAdmin;\r\n    (function (ExecutionAdmin) {\r\n        let maxEx = 15;\r\n        ExecutionAdmin._execution = {\r\n            get value() {\r\n                if (!this['Execution/executionNum']) {\r\n                    return Laya.LocalStorage.getItem('Execution/executionNum') ? Number(Laya.LocalStorage.getItem('Execution/executionNum')) : maxEx;\r\n                }\r\n                return this['Execution/executionNum'];\r\n            },\r\n            set value(val) {\r\n                console.log(val);\r\n                this['Execution/executionNum'] = val;\r\n                Laya.LocalStorage.setItem('Execution/executionNum', val.toString());\r\n            }\r\n        };\r\n        ExecutionAdmin._addExDate = {\r\n            get value() {\r\n                if (!this['Execution/addExDate']) {\r\n                    return Laya.LocalStorage.getItem('Execution/addExDate') ? Number(Laya.LocalStorage.getItem('Execution/addExDate')) : (new Date()).getDay();\r\n                }\r\n                return this['Execution/addExDate'];\r\n            },\r\n            set value(val) {\r\n                this['Execution/addExDate'] = val;\r\n                Laya.LocalStorage.setItem('Execution/addExDate', val.toString());\r\n            }\r\n        };\r\n        ExecutionAdmin._addExHours = {\r\n            get value() {\r\n                if (!this['Execution/addExHours']) {\r\n                    return Laya.LocalStorage.getItem('Execution/addExHours') ? Number(Laya.LocalStorage.getItem('Execution/addExHours')) : (new Date()).getHours();\r\n                }\r\n                return this['Execution/addExHours'];\r\n            },\r\n            set value(val) {\r\n                this['Execution/addExHours'] = val;\r\n                Laya.LocalStorage.setItem('Execution/addExHours', val.toString());\r\n            }\r\n        };\r\n        ExecutionAdmin._addMinutes = {\r\n            get value() {\r\n                if (!this['Execution/addMinutes']) {\r\n                    return Laya.LocalStorage.getItem('Execution/addMinutes') ? Number(Laya.LocalStorage.getItem('Execution/addMinutes')) : (new Date()).getMinutes();\r\n                }\r\n                return this['Execution/addMinutes'];\r\n            },\r\n            set value(val) {\r\n                this['Execution/addMinutes'] = val;\r\n                Laya.LocalStorage.setItem('Execution/addMinutes', val.toString());\r\n            }\r\n        };\r\n        function _createExecutionNode(parent) {\r\n            let sp;\r\n            Laya.loader.load('prefab/ExecutionNum.json', Laya.Handler.create(this, function (prefab) {\r\n                let _prefab = new Laya.Prefab();\r\n                _prefab.json = prefab;\r\n                sp = Laya.Pool.getItemByCreateFun('prefab', _prefab.create, _prefab);\r\n                parent.addChild(sp);\r\n                let num = sp.getChildByName('Num');\r\n                num.value = ExecutionAdmin._execution.value.toString();\r\n                sp.pos(297, 90);\r\n                sp.zOrder = 50;\r\n                ExecutionAdmin._ExecutionNode = sp;\r\n                ExecutionAdmin._ExecutionNode.name = '_ExecutionNode';\r\n            }));\r\n        }\r\n        ExecutionAdmin._createExecutionNode = _createExecutionNode;\r\n        function _addExecution(x, y, func) {\r\n            let sp;\r\n            Laya.loader.load('prefab/execution.json', Laya.Handler.create(this, function (prefab) {\r\n                let _prefab = new Laya.Prefab();\r\n                _prefab.json = prefab;\r\n                sp = Laya.Pool.getItemByCreateFun('prefab', _prefab.create, _prefab);\r\n                Laya.stage.addChild(sp);\r\n                sp.x = Laya.stage.width / 2;\r\n                sp.y = Laya.stage.height / 2;\r\n                sp.zOrder = 50;\r\n                if (ExecutionAdmin._ExecutionNode) {\r\n                    Ani2DAdmin.move(sp, ExecutionAdmin._ExecutionNode.x, ExecutionAdmin._ExecutionNode.y, 800, () => {\r\n                        Ani2DAdmin.fadeOut(sp, 1, 0, 200, 0, () => {\r\n                            Ani2DAdmin.upDwon_Shake(ExecutionAdmin._ExecutionNode, 10, 80, 0, null);\r\n                            if (func) {\r\n                                func();\r\n                            }\r\n                        });\r\n                    }, 100);\r\n                }\r\n            }));\r\n        }\r\n        ExecutionAdmin._addExecution = _addExecution;\r\n        function createConsumeEx(subEx) {\r\n            let label = Laya.Pool.getItemByClass('label', Laya.Label);\r\n            label.name = 'label';\r\n            Laya.stage.addChild(label);\r\n            label.text = `${subEx}`;\r\n            label.fontSize = 40;\r\n            label.bold = true;\r\n            label.color = '#59245c';\r\n            label.x = ExecutionAdmin._ExecutionNode.x + 100;\r\n            label.y = ExecutionAdmin._ExecutionNode.y - label.height / 2 + 4;\r\n            label.zOrder = 100;\r\n            Ani2DAdmin.fadeOut(label, 0, 1, 200, 150, () => {\r\n                Ani2DAdmin.leftRight_Shake(ExecutionAdmin._ExecutionNode, 15, 60, 0, null);\r\n                Ani2DAdmin.fadeOut(label, 1, 0, 600, 400, () => {\r\n                });\r\n            });\r\n        }\r\n        ExecutionAdmin.createConsumeEx = createConsumeEx;\r\n        class ExecutionNode extends SceneAdmin._ObjectBase {\r\n            constructor() {\r\n                super(...arguments);\r\n                this.timeSwitch = true;\r\n                this.time = 0;\r\n                this.countNum = 59;\r\n            }\r\n            lwgOnAwake() {\r\n                this.Num = this._Owner.getChildByName('Num');\r\n                this.CountDown = this._Owner.getChildByName('CountDown');\r\n                this.CountDown_Board = this._Owner.getChildByName('CountDown_Board');\r\n                this.countNum = 59;\r\n                this.CountDown.text = '00:' + this.countNum;\r\n                this.CountDown_Board.text = this.CountDown.text;\r\n                let d = new Date;\r\n                if (d.getDate() !== ExecutionAdmin._addExDate.value) {\r\n                    ExecutionAdmin._execution.value = maxEx;\r\n                }\r\n                else {\r\n                    if (d.getHours() == ExecutionAdmin._addExHours.value) {\r\n                        console.log(d.getMinutes(), ExecutionAdmin._addMinutes.value);\r\n                        ExecutionAdmin._execution.value += (d.getMinutes() - ExecutionAdmin._addMinutes.value);\r\n                        if (ExecutionAdmin._execution.value > maxEx) {\r\n                            ExecutionAdmin._execution.value = maxEx;\r\n                        }\r\n                    }\r\n                    else {\r\n                        ExecutionAdmin._execution.value = maxEx;\r\n                    }\r\n                }\r\n                this.Num.value = ExecutionAdmin._execution.value.toString();\r\n                ExecutionAdmin._addExDate.value = d.getDate();\r\n                ExecutionAdmin._addExHours.value = d.getHours();\r\n                ExecutionAdmin._addMinutes.value = d.getMinutes();\r\n            }\r\n            countDownAddEx() {\r\n                this.time++;\r\n                if (this.time % 60 == 0) {\r\n                    this.countNum--;\r\n                    if (this.countNum < 0) {\r\n                        this.countNum = 59;\r\n                        ExecutionAdmin._execution.value += 1;\r\n                        this.Num.value = ExecutionAdmin._execution.value.toString();\r\n                        let d = new Date;\r\n                        ExecutionAdmin._addExHours.value = d.getHours();\r\n                        ExecutionAdmin._addMinutes.value = d.getMinutes();\r\n                    }\r\n                    if (this.countNum >= 10 && this.countNum <= 59) {\r\n                        this.CountDown.text = '00:' + this.countNum;\r\n                        this.CountDown_Board.text = this.CountDown.text;\r\n                    }\r\n                    else if (this.countNum >= 0 && this.countNum < 10) {\r\n                        this.CountDown.text = '00:0' + this.countNum;\r\n                        this.CountDown_Board.text = this.CountDown.text;\r\n                    }\r\n                }\r\n            }\r\n            lwgOnStart() {\r\n                TimerAdmin._frameLoop(1, this, () => {\r\n                    if (Number(this.Num.value) >= maxEx) {\r\n                        if (this.timeSwitch) {\r\n                            ExecutionAdmin._execution.value = maxEx;\r\n                            this.Num.value = ExecutionAdmin._execution.value.toString();\r\n                            this.CountDown.text = '00:00';\r\n                            this.CountDown_Board.text = this.CountDown.text;\r\n                            this.countNum = 60;\r\n                            this.timeSwitch = false;\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.timeSwitch = true;\r\n                        this.countDownAddEx();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        ExecutionAdmin.ExecutionNode = ExecutionNode;\r\n    })(ExecutionAdmin = Lwg.ExecutionAdmin || (Lwg.ExecutionAdmin = {}));\r\n})(Lwg || (Lwg = {}));\r\nexport default Lwg;\r\nexport let LwgPlatform = Lwg.PlatformAdmin;\r\nexport let LwgGame = Lwg.GameAdmin;\r\nexport let LwgScene = Lwg.SceneAdmin;\r\nexport let LwgAdaptive = Lwg.AdaptiveAdmin;\r\nexport let LwgSceneAni = Lwg.SceneAniAdmin;\r\nexport let LwgDialogue = Lwg.Dialogue;\r\nexport let LwgEvent = Lwg.EventAdmin;\r\nexport let LwgTimer = Lwg.TimerAdmin;\r\nexport let LwgData = Lwg.DataAdmin;\r\nexport let LwgStorage = Lwg.StorageAdmin;\r\nexport let LwgDate = Lwg.DateAdmin;\r\nexport let LwgSet = Lwg.SetAdmin;\r\nexport let LwgAudio = Lwg.AudioAdmin;\r\nexport let LwgClick = Lwg.ClickAdmin;\r\nexport let LwgColor = Lwg.ColorAdmin;\r\nexport let LwgEff2D = Lwg.Eff2DAdmin;\r\nexport let LwgEff3D = Lwg.Eff3DAdmin;\r\nexport let LwgAni2D = Lwg.Ani2DAdmin;\r\nexport let LwgAni3D = Lwg.Ani3DAdmin;\r\nexport let LwgExecution = Lwg.ExecutionAdmin;\r\nexport let LwgGold = Lwg.GoldAdmin;\r\nexport let LwgTools = Lwg.ToolsAdmin;\r\nexport let LwgPreLoad = Lwg.PreLoadAdmin;\r\nexport let LwgAdmin = Lwg.InitAdmin;\r\n",
  "references": []
}
