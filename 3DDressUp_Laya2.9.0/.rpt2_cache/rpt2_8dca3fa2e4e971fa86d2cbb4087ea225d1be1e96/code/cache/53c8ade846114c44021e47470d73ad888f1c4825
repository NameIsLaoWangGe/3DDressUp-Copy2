{
  "code": "import Behaviour from \"./Behaviour\";\r\nimport PromoItem from \"./PromoItem\";\r\nimport { GO } from \"../../GO\";\r\nexport default class P402 extends Behaviour {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.scroll = null;\r\n        this.layout = null;\r\n        this.mouseDown = false;\r\n        this.lastStageX = 0;\r\n        this.lastStageY = 0;\r\n        this.targetX = 0;\r\n        this.cd = 0;\r\n    }\r\n    get node() {\r\n        return this.owner;\r\n    }\r\n    async OnAwake() {\r\n        this.shield = TJ.Develop.Yun.Location.shield;\r\n        this.scroll = this.owner.getChildByName(\"scroll\");\r\n        this.layout = this.scroll.getChildByName(\"layout\");\r\n        TJ.Develop.Yun.Promo.Data.ReportAwake(P402.style);\r\n        this.layoutS = this.layout.addComponent(P402Layout);\r\n        this.active = false;\r\n        let list = await TJ.Develop.Yun.Promo.List.Get();\r\n        if (list != null && list.count > 0) {\r\n            if (this.layoutS != null) {\r\n                if (this.shield) {\r\n                    for (let i = 0; i < Math.min(list.count, 9); i++) {\r\n                        this.layoutS.datas.push(list.Load());\r\n                    }\r\n                }\r\n                else {\r\n                    for (let i = 0; i < list.count; i++) {\r\n                        this.layoutS.datas.push(list.Load());\r\n                    }\r\n                }\r\n                this.layoutS.Init(this.scroll.width, this.scroll.height, this.shield);\r\n                this.active = true;\r\n                TJ.Develop.Yun.Promo.Data.ReportStart(P402.style);\r\n                this.targetX = this.layout.x;\r\n            }\r\n            else {\r\n            }\r\n        }\r\n        else {\r\n        }\r\n    }\r\n    async OnDisable() {\r\n        if (!this.shield)\r\n            return;\r\n        let list = await TJ.Develop.Yun.Promo.List.Get();\r\n        if (list != null && list.count > 0) {\r\n            this.layoutS.datas = [];\r\n            for (let i = 0; i < Math.min(list.count, 9); i++) {\r\n                this.layoutS.datas.push(list.Load());\r\n            }\r\n            this.layoutS.Redata();\r\n        }\r\n    }\r\n    OnStart() {\r\n        if (this.shield)\r\n            return;\r\n        let checkPos = () => {\r\n            let d = this.layout.x - this.targetX;\r\n            if (d > 0 && d > this.layoutS.pageSpace / 2) {\r\n                this.targetX += this.layoutS.pageSpace;\r\n            }\r\n            else if (d < 0 && d < -this.layoutS.pageSpace / 2) {\r\n                this.targetX -= this.layoutS.pageSpace;\r\n            }\r\n        };\r\n        this.scroll.on(Laya.Event.MOUSE_DOWN, null, (event) => {\r\n            this.mouseDown = true;\r\n            this.lastStageX = event.stageX;\r\n            this.lastStageY = event.stageY;\r\n        });\r\n        this.scroll.on(Laya.Event.MOUSE_OUT, null, (event) => {\r\n            this.mouseDown = false;\r\n            checkPos();\r\n        });\r\n        this.scroll.on(Laya.Event.MOUSE_UP, null, (event) => {\r\n            this.mouseDown = false;\r\n            checkPos();\r\n        });\r\n        this.scroll.on(Laya.Event.MOUSE_MOVE, null, (event) => {\r\n            if (this.mouseDown) {\r\n                let dx = event.stageX - this.lastStageX;\r\n                let dy = event.stageY - this.lastStageY;\r\n                this.lastStageX = event.stageX;\r\n                this.lastStageY = event.stageY;\r\n                let tx = this.layoutS.node.x + dx;\r\n                this.layoutS.node.x = tx;\r\n            }\r\n        });\r\n    }\r\n    OnUpdate() {\r\n        if (this.shield)\r\n            return;\r\n        if (this.mouseDown) {\r\n            this.cd = 0;\r\n        }\r\n        else {\r\n            let dt = Laya.timer.delta / 1000;\r\n            this.cd += dt;\r\n            if (this.cd >= 3) {\r\n                this.cd -= 3;\r\n                this.targetX -= this.layoutS.pageSpace;\r\n            }\r\n            if (this.layout.x != this.targetX) {\r\n                let d = this.targetX - this.layout.x;\r\n                let s = 20;\r\n                if (d > 0) {\r\n                    d = Math.min(this.layout.x + s, this.targetX);\r\n                }\r\n                else {\r\n                    d = Math.max(this.layout.x - s, this.targetX);\r\n                }\r\n                this.layout.x = d;\r\n            }\r\n        }\r\n        this.layoutS.Repos(this.layout.x);\r\n    }\r\n}\r\nP402.style = \"P402\";\r\nclass P402Layout extends Behaviour {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.datas = [];\r\n        this.items = [];\r\n        this.prefab = null;\r\n        this.line = 0;\r\n        this.column = 0;\r\n        this.spacingX = 15;\r\n        this.spacingY = 15;\r\n        this.pageSpace = 0;\r\n    }\r\n    get node() {\r\n        return this.owner;\r\n    }\r\n    OnAwake() {\r\n        this.prefab = this.node.getChildAt(0);\r\n        this.prefab.active = this.prefab.visible = false;\r\n    }\r\n    Init(width, height, shield) {\r\n        this.node.x = this.prefab.width / 2;\r\n        while (width >= this.prefab.width) {\r\n            width = width - this.prefab.width - this.spacingX;\r\n            this.column++;\r\n        }\r\n        while (height >= this.prefab.height) {\r\n            height = height - this.prefab.height - this.spacingY;\r\n            this.line++;\r\n        }\r\n        this.pageSpace = (this.prefab.width + this.spacingX) * this.column;\r\n        if (shield) {\r\n            let uw = this.prefab.width;\r\n            let uh = this.prefab.height;\r\n            let spaceX = uw + this.spacingX;\r\n            let spaceY = uh + this.spacingY;\r\n            for (let y = 0; y < this.line; y++) {\r\n                for (let x = 0; x < this.column; x++) {\r\n                    if (this.items.length < this.datas.length) {\r\n                        let item = GO.Instantiate(this.prefab).getComponent(PromoItem);\r\n                        this.node.addChild(item.owner);\r\n                        item.owner.active = item.owner.visible = true;\r\n                        this.items.push(item);\r\n                        item.owner.x = x * spaceX;\r\n                        item.owner.y = spaceY * y + uh / 2;\r\n                        item.onAwake();\r\n                    }\r\n                }\r\n            }\r\n            this.Redata();\r\n        }\r\n        else {\r\n            this.datas.sort((a, b) => b.weight - a.weight);\r\n            this.column += 2;\r\n            for (let x = 0; x < this.column; x++) {\r\n                for (let y = 0; y < this.line; y++) {\r\n                    let item = GO.Instantiate(this.prefab).getComponent(PromoItem);\r\n                    this.node.addChild(item.owner);\r\n                    item.owner.active = item.owner.visible = true;\r\n                    this.items.push(item);\r\n                    item.onAwake();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    Redata() {\r\n        for (let i = 0; i < this.items.length; i++) {\r\n            let item = this.items[i];\r\n            item.data = this.datas[i];\r\n            item.data.Load();\r\n            item.DoLoad();\r\n        }\r\n    }\r\n    Repos(posX) {\r\n        let ic = this.items.length;\r\n        let dc = this.datas.length;\r\n        if (ic < 1)\r\n            return;\r\n        if (dc < 1)\r\n            return;\r\n        let uw = this.prefab.width;\r\n        let uh = this.prefab.height;\r\n        let spaceX = uw + this.spacingX;\r\n        let spaceY = uh + this.spacingY;\r\n        let k = -posX / spaceX;\r\n        k = Math.floor(k);\r\n        let k1 = Math.floor(k / this.column) * this.column, k2 = k < 0 ? (this.column + k % this.column) % this.column : (k % this.column);\r\n        let checkPos = (item, b, l, c) => {\r\n            let pid = (b + c) * this.line + l;\r\n            if (item.posId != pid) {\r\n                item.posId = pid;\r\n                item.owner.x = (b + c) * spaceX;\r\n                item.owner.y = spaceY * l + uh / 2;\r\n                let did = pid < 0 ? (dc + pid % dc) % dc : (pid % dc);\r\n                if (item.dataId != did) {\r\n                    item.dataId = did;\r\n                    item.data = this.datas[did];\r\n                    item.data.Load();\r\n                    item.DoLoad();\r\n                }\r\n            }\r\n        };\r\n        for (let c = 0; c < k2; c++) {\r\n            for (let l = 0; l < this.line; l++) {\r\n                checkPos(this.items[c * this.line + l], k1 + this.column, l, c);\r\n            }\r\n        }\r\n        for (let c = k2; c < this.column; c++) {\r\n            for (let l = 0; l < this.line; l++) {\r\n                checkPos(this.items[c * this.line + l], k1, l, c);\r\n            }\r\n        }\r\n    }\r\n}\r\n",
  "references": [
    "D:/Game/project/3DDressUp/Copy2/3DDressUp_Laya2.9.0/src/TJ/Promo/script/Behaviour.ts",
    "D:/Game/project/3DDressUp/Copy2/3DDressUp_Laya2.9.0/src/TJ/Promo/script/PromoItem.ts",
    "D:/Game/project/3DDressUp/Copy2/3DDressUp_Laya2.9.0/src/TJ/GO.ts"
  ]
}
